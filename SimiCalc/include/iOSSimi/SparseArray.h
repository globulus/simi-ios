//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SparseArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiSparseArray")
#ifdef RESTRICT_NetGlobulusSimiSparseArray
#define INCLUDE_ALL_NetGlobulusSimiSparseArray 0
#else
#define INCLUDE_ALL_NetGlobulusSimiSparseArray 1
#endif
#undef RESTRICT_NetGlobulusSimiSparseArray

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMSparseArray_) && (INCLUDE_ALL_NetGlobulusSimiSparseArray || defined(INCLUDE_SMSparseArray))
#define SMSparseArray_

@interface SMSparseArray : NSObject < NSCopying >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)initialCapacity;

- (void)appendWithInt:(jint)key
               withId:(id)value;

- (void)clear;

- (SMSparseArray *)java_clone;

- (void)delete__WithInt:(jint)key;

- (id)getWithInt:(jint)key;

- (id)getWithInt:(jint)key
          withId:(id)valueIfKeyNotFound;

+ (jint)idealByteArraySizeWithInt:(jint)need;

+ (jint)idealIntArraySizeWithInt:(jint)need;

- (jint)indexOfKeyWithInt:(jint)key;

- (jint)indexOfValueWithId:(id)value;

- (jint)keyAtWithInt:(jint)index;

- (void)putWithInt:(jint)key
            withId:(id)value;

- (void)removeWithInt:(jint)key;

- (void)removeAtWithInt:(jint)index;

- (void)setValueAtWithInt:(jint)index
                   withId:(id)value;

- (jint)size;

- (id)valueAtWithInt:(jint)index;

@end

J2OBJC_STATIC_INIT(SMSparseArray)

FOUNDATION_EXPORT void SMSparseArray_init(SMSparseArray *self);

FOUNDATION_EXPORT SMSparseArray *new_SMSparseArray_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMSparseArray *create_SMSparseArray_init(void);

FOUNDATION_EXPORT void SMSparseArray_initWithInt_(SMSparseArray *self, jint initialCapacity);

FOUNDATION_EXPORT SMSparseArray *new_SMSparseArray_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMSparseArray *create_SMSparseArray_initWithInt_(jint initialCapacity);

FOUNDATION_EXPORT jint SMSparseArray_idealByteArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint SMSparseArray_idealIntArraySizeWithInt_(jint need);

J2OBJC_TYPE_LITERAL_HEADER(SMSparseArray)

@compatibility_alias NetGlobulusSimiSparseArray SMSparseArray;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiSparseArray")
