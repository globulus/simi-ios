//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SimiNativeClass.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiSimiNativeClass")
#ifdef RESTRICT_NetGlobulusSimiSimiNativeClass
#define INCLUDE_ALL_NetGlobulusSimiSimiNativeClass 0
#else
#define INCLUDE_ALL_NetGlobulusSimiSimiNativeClass 1
#endif
#undef RESTRICT_NetGlobulusSimiSimiNativeClass

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMSimiNativeClass_) && (INCLUDE_ALL_NetGlobulusSimiSimiNativeClass || defined(INCLUDE_SMSimiNativeClass))
#define SMSimiNativeClass_

@protocol JavaUtilMap;

@interface SMSimiNativeClass : NSObject {
 @public
  NSString *name_;
  id<JavaUtilMap> methods_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString *)name
                           withJavaUtilMap:(id<JavaUtilMap>)methods;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SMSimiNativeClass)

J2OBJC_FIELD_SETTER(SMSimiNativeClass, name_, NSString *)
J2OBJC_FIELD_SETTER(SMSimiNativeClass, methods_, id<JavaUtilMap>)

FOUNDATION_EXPORT void SMSimiNativeClass_initWithNSString_withJavaUtilMap_(SMSimiNativeClass *self, NSString *name, id<JavaUtilMap> methods);

FOUNDATION_EXPORT SMSimiNativeClass *new_SMSimiNativeClass_initWithNSString_withJavaUtilMap_(NSString *name, id<JavaUtilMap> methods) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMSimiNativeClass *create_SMSimiNativeClass_initWithNSString_withJavaUtilMap_(NSString *name, id<JavaUtilMap> methods);

J2OBJC_TYPE_LITERAL_HEADER(SMSimiNativeClass)

@compatibility_alias NetGlobulusSimiSimiNativeClass SMSimiNativeClass;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiSimiNativeClass")
