//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/ErrorHub.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "ErrorHub.h"
#include "ErrorWatcher.h"
#include "RuntimeError.h"
#include "Token.h"
#include "TokenType.h"

@interface SMErrorHub () {
 @public
  id<JavaUtilList> watchers_;
}

- (instancetype __nonnull)init;

@end

J2OBJC_FIELD_SETTER(SMErrorHub, watchers_, id<JavaUtilList>)

inline SMErrorHub *SMErrorHub_get_instance(void);
static SMErrorHub *SMErrorHub_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMErrorHub, instance, SMErrorHub *)

__attribute__((unused)) static void SMErrorHub_init(SMErrorHub *self);

__attribute__((unused)) static SMErrorHub *new_SMErrorHub_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMErrorHub *create_SMErrorHub_init(void);

J2OBJC_INITIALIZED_DEFN(SMErrorHub)

@implementation SMErrorHub

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMErrorHub_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (SMErrorHub *)sharedInstance {
  return SMErrorHub_sharedInstance();
}

- (void)errorWithInt:(jint)line
        withNSString:(NSString *)message {
  [self reportWithInt:line withNSString:@"" withNSString:message];
}

- (void)errorWithSMToken:(SMToken *)token
            withNSString:(NSString *)message {
  if (((SMToken *) nil_chk(token))->type_ == JreLoadEnum(SMTokenType, EOF)) {
    [self reportWithInt:token->line_ withNSString:@" at end" withNSString:message];
  }
  else {
    [self reportWithInt:token->line_ withNSString:JreStrcat("$$C", @" at '", token->lexeme_, '\'') withNSString:message];
  }
}

- (void)reportWithInt:(jint)line
         withNSString:(NSString *)where
         withNSString:(NSString *)message {
  for (id<SMErrorWatcher> __strong watcher in nil_chk(watchers_)) {
    [((id<SMErrorWatcher>) nil_chk(watcher)) reportWithInt:line withNSString:where withNSString:message];
  }
}

- (void)runtimeErrorWithSMRuntimeError:(SMRuntimeError *)error {
  for (id<SMErrorWatcher> __strong watcher in nil_chk(watchers_)) {
    [((id<SMErrorWatcher>) nil_chk(watcher)) runtimeErrorWithSMRuntimeError:error];
  }
}

- (void)addWatcherWithSMErrorWatcher:(id<SMErrorWatcher>)watcher {
  [((id<JavaUtilList>) nil_chk(watchers_)) addWithId:watcher];
}

- (void)removeWatcherWithSMErrorWatcher:(id<SMErrorWatcher>)watcher {
  [((id<JavaUtilList>) nil_chk(watchers_)) removeWithId:watcher];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMErrorHub;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sharedInstance);
  methods[2].selector = @selector(errorWithInt:withNSString:);
  methods[3].selector = @selector(errorWithSMToken:withNSString:);
  methods[4].selector = @selector(reportWithInt:withNSString:withNSString:);
  methods[5].selector = @selector(runtimeErrorWithSMRuntimeError:);
  methods[6].selector = @selector(addWatcherWithSMErrorWatcher:);
  methods[7].selector = @selector(removeWatcherWithSMErrorWatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "watchers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "instance", "LSMErrorHub;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "error", "ILNSString;", "LSMToken;LNSString;", "report", "ILNSString;LNSString;", "runtimeError", "LSMRuntimeError;", "addWatcher", "LSMErrorWatcher;", "removeWatcher", "Ljava/util/List<LErrorWatcher;>;", &SMErrorHub_instance };
  static const J2ObjcClassInfo _SMErrorHub = { "ErrorHub", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 8, 2, -1, -1, -1, -1, -1 };
  return &_SMErrorHub;
}

+ (void)initialize {
  if (self == [SMErrorHub class]) {
    SMErrorHub_instance = new_SMErrorHub_init();
    J2OBJC_SET_INITIALIZED(SMErrorHub)
  }
}

@end

void SMErrorHub_init(SMErrorHub *self) {
  NSObject_init(self);
  self->watchers_ = new_JavaUtilArrayList_init();
}

SMErrorHub *new_SMErrorHub_init() {
  J2OBJC_NEW_IMPL(SMErrorHub, init)
}

SMErrorHub *create_SMErrorHub_init() {
  J2OBJC_CREATE_IMPL(SMErrorHub, init)
}

SMErrorHub *SMErrorHub_sharedInstance() {
  SMErrorHub_initialize();
  return SMErrorHub_instance;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMErrorHub)
