//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Pass.java
//

#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "Pass.h"
#include "SimiValue.h"

@implementation SMPass

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMPass_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (SMSimiValue *)copy__ {
  return nil;
}

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_ {
  return nil;
}

- (jint)compareToWithId:(SMSimiValue *)o {
  (void) cast_chk(o, [SMSimiValue class]);
  @throw new_JavaLangAssertionError_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copy__);
  methods[2].selector = @selector(cloneWithBoolean:);
  methods[3].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "copy", "clone", "Z", "compareTo", "LSMSimiValue;" };
  static const J2ObjcClassInfo _SMPass = { "Pass", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x0, 4, 0, -1, -1, -1, -1, -1 };
  return &_SMPass;
}

@end

void SMPass_init(SMPass *self) {
  SMSimiValue_init(self);
}

SMPass *new_SMPass_init() {
  J2OBJC_NEW_IMPL(SMPass, init)
}

SMPass *create_SMPass_init() {
  J2OBJC_CREATE_IMPL(SMPass, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMPass)
