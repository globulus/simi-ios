//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/RuntimeError.java
//

#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "RuntimeError.h"
#include "Token.h"

@implementation SMRuntimeError

- (instancetype __nonnull)initWithSMToken:(SMToken *)token
                             withNSString:(NSString *)message {
  SMRuntimeError_initWithSMToken_withNSString_(self, token, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "token_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LNSString;" };
  static const J2ObjcClassInfo _SMRuntimeError = { "RuntimeError", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 1, 1, -1, -1, -1, -1, -1 };
  return &_SMRuntimeError;
}

@end

void SMRuntimeError_initWithSMToken_withNSString_(SMRuntimeError *self, SMToken *token, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
  self->token_ = token;
}

SMRuntimeError *new_SMRuntimeError_initWithSMToken_withNSString_(SMToken *token, NSString *message) {
  J2OBJC_NEW_IMPL(SMRuntimeError, initWithSMToken_withNSString_, token, message)
}

SMRuntimeError *create_SMRuntimeError_initWithSMToken_withNSString_(SMToken *token, NSString *message) {
  J2OBJC_CREATE_IMPL(SMRuntimeError, initWithSMToken_withNSString_, token, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMRuntimeError)
