//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SimiObjectImpl.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/IntFunction.h"
#include "java/util/function/Supplier.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/IntStream.h"
#include "java/util/stream/Stream.h"
#include "BlockImpl.h"
#include "Constants.h"
#include "Environment.h"
#include "Interpreter.h"
#include "RuntimeError.h"
#include "SimiCallable.h"
#include "SimiClass.h"
#include "SimiClassImpl.h"
#include "SimiEnvironment.h"
#include "SimiFunction.h"
#include "SimiMethod.h"
#include "SimiObject.h"
#include "SimiObjectImpl.h"
#include "SimiProperty.h"
#include "SimiPropertyImpl.h"
#include "SimiValue.h"
#include "Token.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface SMSimiObjectImpl ()

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                      withBoolean:(jboolean)immutable;

@end

__attribute__((unused)) static void SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_(SMSimiObjectImpl *self, SMSimiClassImpl *clazz, jboolean immutable);

@interface SMSimiObjectImpl_Dictionary_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(NSString *)a;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Dictionary_$Lambda$1)

inline SMSimiObjectImpl_Dictionary_$Lambda$1 *SMSimiObjectImpl_Dictionary_$Lambda$1_get_instance(void);
static SMSimiObjectImpl_Dictionary_$Lambda$1 *SMSimiObjectImpl_Dictionary_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Dictionary_$Lambda$1, instance, SMSimiObjectImpl_Dictionary_$Lambda$1 *)

__attribute__((unused)) static void SMSimiObjectImpl_Dictionary_$Lambda$1_init(SMSimiObjectImpl_Dictionary_$Lambda$1 *self);

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$1 *new_SMSimiObjectImpl_Dictionary_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$1 *create_SMSimiObjectImpl_Dictionary_$Lambda$1_init(void);

@interface SMSimiObjectImpl_Dictionary_$Lambda$2 : NSObject < JavaUtilFunctionSupplier >

- (id)get;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Dictionary_$Lambda$2)

inline SMSimiObjectImpl_Dictionary_$Lambda$2 *SMSimiObjectImpl_Dictionary_$Lambda$2_get_instance(void);
static SMSimiObjectImpl_Dictionary_$Lambda$2 *SMSimiObjectImpl_Dictionary_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Dictionary_$Lambda$2, instance, SMSimiObjectImpl_Dictionary_$Lambda$2 *)

__attribute__((unused)) static void SMSimiObjectImpl_Dictionary_$Lambda$2_init(SMSimiObjectImpl_Dictionary_$Lambda$2 *self);

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$2 *new_SMSimiObjectImpl_Dictionary_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$2 *create_SMSimiObjectImpl_Dictionary_$Lambda$2_init(void);

@interface SMSimiObjectImpl_Dictionary_$Lambda$3 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiProperty>)p;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Dictionary_$Lambda$3)

inline SMSimiObjectImpl_Dictionary_$Lambda$3 *SMSimiObjectImpl_Dictionary_$Lambda$3_get_instance(void);
static SMSimiObjectImpl_Dictionary_$Lambda$3 *SMSimiObjectImpl_Dictionary_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Dictionary_$Lambda$3, instance, SMSimiObjectImpl_Dictionary_$Lambda$3 *)

__attribute__((unused)) static void SMSimiObjectImpl_Dictionary_$Lambda$3_init(SMSimiObjectImpl_Dictionary_$Lambda$3 *self);

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$3 *new_SMSimiObjectImpl_Dictionary_$Lambda$3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$3 *create_SMSimiObjectImpl_Dictionary_$Lambda$3_init(void);

@interface SMSimiObjectImpl_Dictionary_$Lambda$4 : NSObject < JavaUtilFunctionSupplier >

- (id)get;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Dictionary_$Lambda$4)

inline SMSimiObjectImpl_Dictionary_$Lambda$4 *SMSimiObjectImpl_Dictionary_$Lambda$4_get_instance(void);
static SMSimiObjectImpl_Dictionary_$Lambda$4 *SMSimiObjectImpl_Dictionary_$Lambda$4_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Dictionary_$Lambda$4, instance, SMSimiObjectImpl_Dictionary_$Lambda$4 *)

__attribute__((unused)) static void SMSimiObjectImpl_Dictionary_$Lambda$4_init(SMSimiObjectImpl_Dictionary_$Lambda$4 *self);

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$4 *new_SMSimiObjectImpl_Dictionary_$Lambda$4_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$4 *create_SMSimiObjectImpl_Dictionary_$Lambda$4_init(void);

@interface SMSimiObjectImpl_Dictionary_$Lambda$5 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiProperty>)p;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Dictionary_$Lambda$5)

inline SMSimiObjectImpl_Dictionary_$Lambda$5 *SMSimiObjectImpl_Dictionary_$Lambda$5_get_instance(void);
static SMSimiObjectImpl_Dictionary_$Lambda$5 *SMSimiObjectImpl_Dictionary_$Lambda$5_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Dictionary_$Lambda$5, instance, SMSimiObjectImpl_Dictionary_$Lambda$5 *)

__attribute__((unused)) static void SMSimiObjectImpl_Dictionary_$Lambda$5_init(SMSimiObjectImpl_Dictionary_$Lambda$5 *self);

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$5 *new_SMSimiObjectImpl_Dictionary_$Lambda$5_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$5 *create_SMSimiObjectImpl_Dictionary_$Lambda$5_init(void);

@interface SMSimiObjectImpl_Dictionary_$Lambda$6 : NSObject < JavaUtilFunctionConsumer > {
 @public
  JavaUtilLinkedHashMap *val$sortedFields_;
}

- (void)acceptWithId:(id<JavaUtilMap_Entry>)e;

@end

J2OBJC_EMPTY_STATIC_INIT(SMSimiObjectImpl_Dictionary_$Lambda$6)

__attribute__((unused)) static void SMSimiObjectImpl_Dictionary_$Lambda$6_initWithJavaUtilLinkedHashMap_(SMSimiObjectImpl_Dictionary_$Lambda$6 *self, JavaUtilLinkedHashMap *capture$0);

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$6 *new_SMSimiObjectImpl_Dictionary_$Lambda$6_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Dictionary_$Lambda$6 *create_SMSimiObjectImpl_Dictionary_$Lambda$6_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *capture$0);

@interface SMSimiObjectImpl_Array_$Lambda$1 : NSObject < JavaUtilFunctionIntFunction >

- (id)applyWithInt:(jint)a;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Array_$Lambda$1)

inline SMSimiObjectImpl_Array_$Lambda$1 *SMSimiObjectImpl_Array_$Lambda$1_get_instance(void);
static SMSimiObjectImpl_Array_$Lambda$1 *SMSimiObjectImpl_Array_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Array_$Lambda$1, instance, SMSimiObjectImpl_Array_$Lambda$1 *)

__attribute__((unused)) static void SMSimiObjectImpl_Array_$Lambda$1_init(SMSimiObjectImpl_Array_$Lambda$1 *self);

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$1 *new_SMSimiObjectImpl_Array_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$1 *create_SMSimiObjectImpl_Array_$Lambda$1_init(void);

@interface SMSimiObjectImpl_Array_$Lambda$2 : NSObject < JavaUtilFunctionSupplier >

- (id)get;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Array_$Lambda$2)

inline SMSimiObjectImpl_Array_$Lambda$2 *SMSimiObjectImpl_Array_$Lambda$2_get_instance(void);
static SMSimiObjectImpl_Array_$Lambda$2 *SMSimiObjectImpl_Array_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Array_$Lambda$2, instance, SMSimiObjectImpl_Array_$Lambda$2 *)

__attribute__((unused)) static void SMSimiObjectImpl_Array_$Lambda$2_init(SMSimiObjectImpl_Array_$Lambda$2 *self);

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$2 *new_SMSimiObjectImpl_Array_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$2 *create_SMSimiObjectImpl_Array_$Lambda$2_init(void);

@interface SMSimiObjectImpl_Array_$Lambda$3 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiProperty>)a;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Array_$Lambda$3)

inline SMSimiObjectImpl_Array_$Lambda$3 *SMSimiObjectImpl_Array_$Lambda$3_get_instance(void);
static SMSimiObjectImpl_Array_$Lambda$3 *SMSimiObjectImpl_Array_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Array_$Lambda$3, instance, SMSimiObjectImpl_Array_$Lambda$3 *)

__attribute__((unused)) static void SMSimiObjectImpl_Array_$Lambda$3_init(SMSimiObjectImpl_Array_$Lambda$3 *self);

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$3 *new_SMSimiObjectImpl_Array_$Lambda$3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$3 *create_SMSimiObjectImpl_Array_$Lambda$3_init(void);

@interface SMSimiObjectImpl_Array_$Lambda$4 : NSObject < JavaUtilFunctionSupplier >

- (id)get;

@end

J2OBJC_STATIC_INIT(SMSimiObjectImpl_Array_$Lambda$4)

inline SMSimiObjectImpl_Array_$Lambda$4 *SMSimiObjectImpl_Array_$Lambda$4_get_instance(void);
static SMSimiObjectImpl_Array_$Lambda$4 *SMSimiObjectImpl_Array_$Lambda$4_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiObjectImpl_Array_$Lambda$4, instance, SMSimiObjectImpl_Array_$Lambda$4 *)

__attribute__((unused)) static void SMSimiObjectImpl_Array_$Lambda$4_init(SMSimiObjectImpl_Array_$Lambda$4 *self);

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$4 *new_SMSimiObjectImpl_Array_$Lambda$4_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_Array_$Lambda$4 *create_SMSimiObjectImpl_Array_$Lambda$4_init(void);

@interface SMSimiObjectImpl_InitiallyEmpty () {
 @public
  SMSimiObjectImpl *underlying_;
}

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                      withBoolean:(jboolean)immutable;

@end

J2OBJC_FIELD_SETTER(SMSimiObjectImpl_InitiallyEmpty, underlying_, SMSimiObjectImpl *)

__attribute__((unused)) static void SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(SMSimiObjectImpl_InitiallyEmpty *self, SMSimiClassImpl *clazz, jboolean immutable);

__attribute__((unused)) static SMSimiObjectImpl_InitiallyEmpty *new_SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(SMSimiClassImpl *clazz, jboolean immutable) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiObjectImpl_InitiallyEmpty *create_SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(SMSimiClassImpl *clazz, jboolean immutable);

@implementation SMSimiObjectImpl

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                      withBoolean:(jboolean)immutable {
  SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_(self, clazz, immutable);
  return self;
}

+ (SMSimiObjectImpl *)instanceWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                        withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)props {
  return SMSimiObjectImpl_instanceWithSMSimiClassImpl_withJavaUtilLinkedHashMap_(clazz, props);
}

+ (SMSimiObjectImpl *)pairWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass
                                 withNSString:(NSString *)key
                           withSMSimiProperty:(id<SMSimiProperty>)prop {
  return SMSimiObjectImpl_pairWithSMSimiClassImpl_withNSString_withSMSimiProperty_(objectClass, key, prop);
}

+ (SMSimiObjectImpl *)decomposedPairWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass
                                        withSMSimiValue:(SMSimiValue *)key
                                        withSMSimiValue:(SMSimiValue *)value {
  return SMSimiObjectImpl_decomposedPairWithSMSimiClassImpl_withSMSimiValue_withSMSimiValue_(objectClass, key, value);
}

+ (SMSimiObjectImpl *)fromMapWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                     withBoolean:(jboolean)immutable
                       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)props {
  return SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz, immutable, props);
}

+ (SMSimiObjectImpl *)fromArrayWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                       withBoolean:(jboolean)immutable
                             withJavaUtilArrayList:(JavaUtilArrayList *)fields {
  return SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz, immutable, fields);
}

+ (SMSimiObjectImpl *)emptyWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                   withBoolean:(jboolean)immutable {
  return SMSimiObjectImpl_emptyWithSMSimiClassImpl_withBoolean_(clazz, immutable);
}

- (id<SMSimiProperty>)getWithSMToken:(SMToken *)name
                 withJavaLangInteger:(JavaLangInteger *)arity
                   withSMEnvironment:(SMEnvironment *)environment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<SMSimiProperty>)getFromClassWithSMToken:(SMToken *)name
                          withJavaLangInteger:(JavaLangInteger *)arity
                            withSMEnvironment:(SMEnvironment *)environment {
  NSString *key = ((SMToken *) nil_chk(name))->lexeme_;
  if (clazz_ != nil) {
    if ([((JavaUtilLinkedHashMap *) nil_chk(clazz_->fields_)) containsKeyWithId:key]) {
      return [self bindWithNSString:key withSMSimiProperty:[clazz_->fields_ getWithId:key]];
    }
    SMSimiMethod *method = [clazz_ findMethodWithSMSimiObjectImpl:self withNSString:key withJavaLangInteger:arity];
    if (method != nil) {
      return new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_(new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(method, key, self), ((SMSimiFunction *) nil_chk(method->function_))->annotations_);
    }
  }
  return nil;
}

- (id<SMSimiProperty>)bindWithNSString:(NSString *)key
                    withSMSimiProperty:(id<SMSimiProperty>)prop {
  if (prop != nil && [[prop getValue] isKindOfClass:[SMSimiValue_Callable class]]) {
    id<SMSimiCallable> callable = [((SMSimiValue *) nil_chk([prop getValue])) getCallable];
    if ([callable isKindOfClass:[SMBlockImpl class]]) {
      return new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_(new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_([((SMBlockImpl *) nil_chk(((SMBlockImpl *) cast_chk(callable, [SMBlockImpl class])))) bindWithSMSimiObjectImpl:self], key, self), [prop getAnnotations]);
    }
  }
  return prop;
}

- (void)setWithSMToken:(SMToken *)name
    withSMSimiProperty:(id<SMSimiProperty>)prop
     withSMEnvironment:(SMEnvironment *)environment {
  [self checkMutabilityWithSMToken:name withSMEnvironment:environment];
  NSString *key = ((SMToken *) nil_chk(name))->lexeme_;
  if ([((NSString *) nil_chk(key)) isEqual:SMConstants_PRIVATE] && clazz_ != nil && ([((NSString *) nil_chk(clazz_->name_)) isEqual:SMConstants_CLASS_STRING] || [clazz_->name_ isEqual:SMConstants_CLASS_NUMBER])) {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(name, @"Cannot modify self._ of Strings and Numbers!");
  }
  if (![self isArray]) {
    @try {
      jint index = JavaLangInteger_parseIntWithNSString_(key);
      key = JreStrcat("$I", SMConstants_IMPLICIT, index);
    }
    @catch (JavaLangNumberFormatException *ignored) {
    }
  }
  if ([key java_hasPrefix:SMConstants_PRIVATE]) {
    id<SMSimiObject> self_ = [((SMSimiValue *) nil_chk([((SMEnvironment *) nil_chk(environment)) getWithSMToken:SMToken_self__()])) getObject];
    if (self_ != self && self_ != clazz_) {
      @throw new_SMRuntimeError_initWithSMToken_withNSString_(name, @"Trying to access a private property!");
    }
  }
  [self setFieldWithNSString:key withSMSimiProperty:prop];
}

- (void)setFieldWithNSString:(NSString *)key
          withSMSimiProperty:(id<SMSimiProperty>)prop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isWithSMSimiClassImpl:(SMSimiClassImpl *)clazz {
  if ([((NSString *) nil_chk(((SMSimiClassImpl *) nil_chk(clazz))->name_)) isEqual:((SMSimiClassImpl *) nil_chk(self->clazz_))->name_]) {
    return true;
  }
  if (self->clazz_->superclasses_ != nil) {
    for (SMSimiClassImpl * __strong superclass_ in self->clazz_->superclasses_) {
      if ([((SMSimiClassImpl *) nil_chk(superclass_))->name_ isEqual:clazz->name_]) {
        return true;
      }
    }
  }
  return false;
}

- (jboolean)isNumber {
  return [((NSString *) nil_chk(((SMSimiClassImpl *) nil_chk(clazz_))->name_)) isEqual:SMConstants_CLASS_NUMBER];
}

- (jboolean)isString {
  return [((NSString *) nil_chk(((SMSimiClassImpl *) nil_chk(clazz_))->name_)) isEqual:SMConstants_CLASS_STRING];
}

- (void)clearWithSMEnvironment:(SMEnvironment *)environment {
  [self checkMutabilityWithSMToken:SMToken_self__() withSMEnvironment:environment];
  [self clearImpl];
}

- (void)clearImpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)matchesWithSMSimiObjectImpl:(SMSimiObjectImpl *)other
                       withJavaUtilList:(id<JavaUtilList>)fieldsToMatch {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)containsWithSMSimiValue:(SMSimiValue *)object
                        withSMToken:(SMToken *)at {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)length {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)checkMutabilityWithSMToken:(SMToken *)name
                 withSMEnvironment:(SMEnvironment *)environment {
  if (self->immutable_ && [((SMSimiValue *) nil_chk([((SMEnvironment *) nil_chk(environment)) getWithSMToken:SMToken_self__()])) getObject] != self) {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(name, @"Trying to alter an immutable object!");
  }
}

- (JavaUtilArrayList *)keys {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilArrayList *)values {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiObjectImpl *)enumerateWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiObjectImpl *)zipWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiValue *)indexOfWithSMSimiValue:(SMSimiValue *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiObjectImpl *)reversed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilIterator>)iterate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiObjectImpl *)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)valuesMatchWithSMSimiValue:(SMSimiValue *)a
                       withSMSimiValue:(SMSimiValue *)b {
  if ([a isKindOfClass:[SMSimiValue_Object class]]) {
    if (!([b isKindOfClass:[SMSimiValue_Object class]])) {
      return false;
    }
    SMSimiObjectImpl *object = (SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk(a)) getObject], [SMSimiObjectImpl class]);
    return [((SMSimiObjectImpl *) nil_chk(object)) matchesWithSMSimiObjectImpl:(SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk(b)) getObject], [SMSimiObjectImpl class]) withJavaUtilList:nil];
  }
  else {
    return [((SMSimiValue *) nil_chk(a)) isEqual:b];
  }
}

- (jboolean)valuesMatchWithSMSimiProperty:(id<SMSimiProperty>)a
                       withSMSimiProperty:(id<SMSimiProperty>)b {
  if (a == nil && b == nil) {
    return true;
  }
  if (a == nil || b == nil) {
    return false;
  }
  return [self valuesMatchWithSMSimiValue:[a getValue] withSMSimiValue:[b getValue]];
}

- (void)appendWithSMSimiProperty:(id<SMSimiProperty>)elem {
  if (immutable_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Trying to append to an immutable object!");
  }
  [self appendImplWithSMSimiProperty:elem];
}

- (void)appendImplWithSMSimiProperty:(id<SMSimiProperty>)elem {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addAllWithSMSimiObjectImpl:(SMSimiObjectImpl *)other {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)description {
  SMSimiMethod *method = [((SMSimiClassImpl *) nil_chk(clazz_)) findMethodWithSMSimiObjectImpl:self withNSString:SMConstants_TO_STRING withJavaLangInteger:JavaLangInteger_valueOfWithInt_(0)];
  if (method != nil && !((SMSimiFunction *) nil_chk(method->function_))->isNative_) {
    return [((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([method callWithSMBlockInterpreter:JreLoadStatic(SMInterpreter, sharedInstance) withJavaUtilList:new_JavaUtilArrayList_init() withBoolean:false])) getValue])) getString];
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"[\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\timmutable: "])) appendWithBoolean:immutable_])) appendWithNSString:@"\n"];
  if (clazz_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\tclass: "])) appendWithNSString:clazz_->name_])) appendWithNSString:@";\n"];
  }
  (void) [sb appendWithNSString:[self printFields]];
  (void) [sb appendWithNSString:@"]"];
  return [sb description];
}

- (NSString *)printFields {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiObjectImpl_Dictionary *)asDictionary {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiObjectImpl_Array *)asArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<SMSimiClass>)getSimiClass {
  return clazz_;
}

- (id<SMSimiProperty>)getWithNSString:(NSString *)key
                withSMSimiEnvironment:(id<SMSimiEnvironment>)environment {
  return [self getWithSMToken:SMToken_nativeCallWithNSString_(key) withJavaLangInteger:nil withSMEnvironment:(SMEnvironment *) cast_chk(environment, [SMEnvironment class])];
}

- (void)setWithNSString:(NSString *)key
     withSMSimiProperty:(id<SMSimiProperty>)prop
  withSMSimiEnvironment:(id<SMSimiEnvironment>)environment {
  [self setWithSMToken:SMToken_nativeCallWithNSString_(key) withSMSimiProperty:prop withSMEnvironment:(SMEnvironment *) cast_chk(environment, [SMEnvironment class])];
}

+ (id<SMSimiObject>)getOrConvertObjectWithSMSimiProperty:(id<SMSimiProperty>)prop
                                       withSMInterpreter:(SMInterpreter *)interpreter {
  return SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_(prop, interpreter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x8, 1, 2, -1, 3, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x8, 8, 9, -1, 10, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x8, 11, 12, -1, 13, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x8, 14, 0, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x400, 15, 16, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x0, 17, 16, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 22, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 27, 28, -1, 29, -1, -1 },
    { NULL, "Z", 0x400, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 32, 33, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x400, -1, -1, -1, 34, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x401, -1, -1, -1, 34, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x400, 35, 24, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x400, 36, 24, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x400, 37, 38, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x400, -1, -1, -1, 39, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x400, 40, 41, -1, 42, -1, -1 },
    { NULL, "Z", 0x0, 43, 44, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 43, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 48, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 49, 50, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 51, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Dictionary;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Array;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 15, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 53, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x8, 54, 55, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiClassImpl:withBoolean:);
  methods[1].selector = @selector(instanceWithSMSimiClassImpl:withJavaUtilLinkedHashMap:);
  methods[2].selector = @selector(pairWithSMSimiClassImpl:withNSString:withSMSimiProperty:);
  methods[3].selector = @selector(decomposedPairWithSMSimiClassImpl:withSMSimiValue:withSMSimiValue:);
  methods[4].selector = @selector(fromMapWithSMSimiClassImpl:withBoolean:withJavaUtilLinkedHashMap:);
  methods[5].selector = @selector(fromArrayWithSMSimiClassImpl:withBoolean:withJavaUtilArrayList:);
  methods[6].selector = @selector(emptyWithSMSimiClassImpl:withBoolean:);
  methods[7].selector = @selector(getWithSMToken:withJavaLangInteger:withSMEnvironment:);
  methods[8].selector = @selector(getFromClassWithSMToken:withJavaLangInteger:withSMEnvironment:);
  methods[9].selector = @selector(bindWithNSString:withSMSimiProperty:);
  methods[10].selector = @selector(setWithSMToken:withSMSimiProperty:withSMEnvironment:);
  methods[11].selector = @selector(setFieldWithNSString:withSMSimiProperty:);
  methods[12].selector = @selector(isWithSMSimiClassImpl:);
  methods[13].selector = @selector(isNumber);
  methods[14].selector = @selector(isString);
  methods[15].selector = @selector(clearWithSMEnvironment:);
  methods[16].selector = @selector(clearImpl);
  methods[17].selector = @selector(matchesWithSMSimiObjectImpl:withJavaUtilList:);
  methods[18].selector = @selector(containsWithSMSimiValue:withSMToken:);
  methods[19].selector = @selector(isArray);
  methods[20].selector = @selector(length);
  methods[21].selector = @selector(checkMutabilityWithSMToken:withSMEnvironment:);
  methods[22].selector = @selector(keys);
  methods[23].selector = @selector(values);
  methods[24].selector = @selector(enumerateWithSMSimiClassImpl:);
  methods[25].selector = @selector(zipWithSMSimiClassImpl:);
  methods[26].selector = @selector(indexOfWithSMSimiValue:);
  methods[27].selector = @selector(reversed);
  methods[28].selector = @selector(iterate);
  methods[29].selector = @selector(sortedWithJavaUtilComparator:);
  methods[30].selector = @selector(valuesMatchWithSMSimiValue:withSMSimiValue:);
  methods[31].selector = @selector(valuesMatchWithSMSimiProperty:withSMSimiProperty:);
  methods[32].selector = @selector(appendWithSMSimiProperty:);
  methods[33].selector = @selector(appendImplWithSMSimiProperty:);
  methods[34].selector = @selector(addAllWithSMSimiObjectImpl:);
  methods[35].selector = @selector(description);
  methods[36].selector = @selector(printFields);
  methods[37].selector = @selector(asDictionary);
  methods[38].selector = @selector(asArray);
  methods[39].selector = @selector(getSimiClass);
  methods[40].selector = @selector(getWithNSString:withSMSimiEnvironment:);
  methods[41].selector = @selector(setWithNSString:withSMSimiProperty:withSMSimiEnvironment:);
  methods[42].selector = @selector(getOrConvertObjectWithSMSimiProperty:withSMInterpreter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clazz_", "LSMSimiClassImpl;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "immutable_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiClassImpl;Z", "instance", "LSMSimiClassImpl;LJavaUtilLinkedHashMap;", "(LSimiClassImpl;Ljava/util/LinkedHashMap<Ljava/lang/String;LSimiProperty;>;)LSimiObjectImpl;", "pair", "LSMSimiClassImpl;LNSString;LSMSimiProperty;", "decomposedPair", "LSMSimiClassImpl;LSMSimiValue;LSMSimiValue;", "fromMap", "LSMSimiClassImpl;ZLJavaUtilLinkedHashMap;", "(LSimiClassImpl;ZLjava/util/LinkedHashMap<Ljava/lang/String;LSimiProperty;>;)LSimiObjectImpl;", "fromArray", "LSMSimiClassImpl;ZLJavaUtilArrayList;", "(LSimiClassImpl;ZLjava/util/ArrayList<+LSimiProperty;>;)LSimiObjectImpl;", "empty", "get", "LSMToken;LJavaLangInteger;LSMEnvironment;", "getFromClass", "bind", "LNSString;LSMSimiProperty;", "set", "LSMToken;LSMSimiProperty;LSMEnvironment;", "setField", "is", "LSMSimiClassImpl;", "clear", "LSMEnvironment;", "matches", "LSMSimiObjectImpl;LJavaUtilList;", "(LSimiObjectImpl;Ljava/util/List<Ljava/lang/String;>;)Z", "contains", "LSMSimiValue;LSMToken;", "checkMutability", "LSMToken;LSMEnvironment;", "()Ljava/util/ArrayList<LSimiValue;>;", "enumerate", "zip", "indexOf", "LSMSimiValue;", "()Ljava/util/Iterator<*>;", "sorted", "LJavaUtilComparator;", "(Ljava/util/Comparator<*>;)LSimiObjectImpl;", "valuesMatch", "LSMSimiValue;LSMSimiValue;", "LSMSimiProperty;LSMSimiProperty;", "append", "LSMSimiProperty;", "appendImpl", "addAll", "LSMSimiObjectImpl;", "toString", "LNSString;LSMSimiEnvironment;", "LNSString;LSMSimiProperty;LSMSimiEnvironment;", "getOrConvertObject", "LSMSimiProperty;LSMInterpreter;", "LSMSimiObjectImpl_Dictionary;LSMSimiObjectImpl_Array;LSMSimiObjectImpl_InitiallyEmpty;" };
  static const J2ObjcClassInfo _SMSimiObjectImpl = { "SimiObjectImpl", "net.globulus.simi", ptrTable, methods, fields, 7, 0x400, 43, 2, -1, 56, -1, -1, -1 };
  return &_SMSimiObjectImpl;
}

@end

void SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_(SMSimiObjectImpl *self, SMSimiClassImpl *clazz, jboolean immutable) {
  NSObject_init(self);
  self->clazz_ = clazz;
  self->immutable_ = immutable;
}

SMSimiObjectImpl *SMSimiObjectImpl_instanceWithSMSimiClassImpl_withJavaUtilLinkedHashMap_(SMSimiClassImpl *clazz, JavaUtilLinkedHashMap *props) {
  SMSimiObjectImpl_initialize();
  return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz, true, props);
}

SMSimiObjectImpl *SMSimiObjectImpl_pairWithSMSimiClassImpl_withNSString_withSMSimiProperty_(SMSimiClassImpl *objectClass, NSString *key, id<SMSimiProperty> prop) {
  SMSimiObjectImpl_initialize();
  JavaUtilLinkedHashMap *field = new_JavaUtilLinkedHashMap_init();
  (void) [field putWithId:key withId:prop];
  return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(objectClass, true, field);
}

SMSimiObjectImpl *SMSimiObjectImpl_decomposedPairWithSMSimiClassImpl_withSMSimiValue_withSMSimiValue_(SMSimiClassImpl *objectClass, SMSimiValue *key, SMSimiValue *value) {
  SMSimiObjectImpl_initialize();
  JavaUtilLinkedHashMap *prop = new_JavaUtilLinkedHashMap_init();
  (void) [prop putWithId:SMConstants_KEY withId:key];
  (void) [prop putWithId:SMConstants_VALUE withId:value];
  return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(objectClass, true, prop);
}

SMSimiObjectImpl *SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(SMSimiClassImpl *clazz, jboolean immutable, JavaUtilLinkedHashMap *props) {
  SMSimiObjectImpl_initialize();
  return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz, immutable, props);
}

SMSimiObjectImpl *SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(SMSimiClassImpl *clazz, jboolean immutable, JavaUtilArrayList *fields) {
  SMSimiObjectImpl_initialize();
  return new_SMSimiObjectImpl_Array_initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz, immutable, fields);
}

SMSimiObjectImpl *SMSimiObjectImpl_emptyWithSMSimiClassImpl_withBoolean_(SMSimiClassImpl *clazz, jboolean immutable) {
  SMSimiObjectImpl_initialize();
  return new_SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(clazz, immutable);
}

id<SMSimiObject> SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_(id<SMSimiProperty> prop, SMInterpreter *interpreter) {
  SMSimiObjectImpl_initialize();
  if (prop == nil) {
    return nil;
  }
  SMSimiValue *value = [prop getValue];
  if (value == nil || [value isKindOfClass:[SMSimiValue_Callable class]]) {
    return nil;
  }
  if ([value isKindOfClass:[SMSimiValue_Number class]] || [value isKindOfClass:[SMSimiValue_String class]]) {
    JavaUtilLinkedHashMap *fields = new_JavaUtilLinkedHashMap_init();
    (void) [fields putWithId:SMConstants_PRIVATE withId:value];
    return SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_((SMSimiClassImpl *) cast_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([((SMInterpreter *) nil_chk(interpreter)) getGlobalWithNSString:[value isKindOfClass:[SMSimiValue_Number class]] ? SMConstants_CLASS_NUMBER : SMConstants_CLASS_STRING])) getValue])) getObject], [SMSimiClassImpl class]), true, fields);
  }
  return [value getObject];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiObjectImpl)

@implementation SMSimiObjectImpl_Dictionary

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                      withBoolean:(jboolean)immutable
                        withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)fields {
  SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(self, clazz, immutable, fields);
  return self;
}

- (id<SMSimiProperty>)getWithSMToken:(SMToken *)name
                 withJavaLangInteger:(JavaLangInteger *)arity
                   withSMEnvironment:(SMEnvironment *)environment {
  NSString *key = ((SMToken *) nil_chk(name))->lexeme_;
  @try {
    jint index = JavaLangInteger_parseIntWithNSString_(key);
    NSString *implicitKey = JreStrcat("$I", SMConstants_IMPLICIT, index);
    if ([((JavaUtilLinkedHashMap *) nil_chk(fields_)) containsKeyWithId:implicitKey]) {
      return [self bindWithNSString:implicitKey withSMSimiProperty:[fields_ getWithId:implicitKey]];
    }
    else {
      if (clazz_ != nil && [((NSString *) nil_chk(clazz_->name_)) isEqual:SMConstants_CLASS_STRING]) {
        NSString *value = [((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([fields_ getWithId:SMConstants_PRIVATE])) getValue])) getString];
        return new_SMSimiValue_String_initWithNSString_(JreStrcat("C", [((NSString *) nil_chk(value)) charAtWithInt:index]));
      }
      return [self bindWithNSString:implicitKey withSMSimiProperty:[new_JavaUtilArrayList_initWithJavaUtilCollection_([fields_ values]) getWithInt:index]];
    }
  }
  @catch (JavaLangNumberFormatException *ignored) {
  }
  if ([((NSString *) nil_chk(key)) java_hasPrefix:SMConstants_PRIVATE]) {
    id<SMSimiObject> self_ = [((SMSimiValue *) nil_chk([((SMEnvironment *) nil_chk(environment)) getWithSMToken:SMToken_self__()])) getObject];
    if (self_ != self && self_ != clazz_) {
      @throw new_SMRuntimeError_initWithSMToken_withNSString_(name, @"Trying to access a private property!");
    }
  }
  if ([((JavaUtilLinkedHashMap *) nil_chk(fields_)) containsKeyWithId:key]) {
    return [self bindWithNSString:key withSMSimiProperty:[fields_ getWithId:key]];
  }
  return [self getFromClassWithSMToken:name withJavaLangInteger:arity withSMEnvironment:environment];
}

- (void)setFieldWithNSString:(NSString *)key
          withSMSimiProperty:(id<SMSimiProperty>)prop {
  if (prop == nil) {
    (void) [((JavaUtilLinkedHashMap *) nil_chk(fields_)) removeWithId:key];
  }
  else {
    (void) [((JavaUtilLinkedHashMap *) nil_chk(fields_)) putWithId:key withId:prop];
  }
}

- (void)clearImpl {
  [((JavaUtilLinkedHashMap *) nil_chk(fields_)) clear];
}

- (jboolean)matchesWithSMSimiObjectImpl:(SMSimiObjectImpl *)other
                       withJavaUtilList:(id<JavaUtilList>)fieldsToMatch {
  if (!([other isKindOfClass:[SMSimiObjectImpl_Dictionary class]])) {
    return false;
  }
  SMSimiObjectImpl_Dictionary *dictionary = (SMSimiObjectImpl_Dictionary *) cast_chk(other, [SMSimiObjectImpl_Dictionary class]);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) entrySet])) {
    if (fieldsToMatch != nil && ![fieldsToMatch containsWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]]) {
      continue;
    }
    id<SMSimiProperty> prop = [((SMSimiObjectImpl_Dictionary *) nil_chk(dictionary))->fields_ getWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
    if (![self valuesMatchWithSMSimiProperty:prop withSMSimiProperty:[entry_ getValue]]) {
      return false;
    }
  }
  return true;
}

- (jboolean)containsWithSMSimiValue:(SMSimiValue *)object
                        withSMToken:(SMToken *)at {
  if (!([object isKindOfClass:[SMSimiValue_String class]])) {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(at, @"Left side must be a string!");
  }
  return [((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) keySet])) containsWithId:[((SMSimiValue *) nil_chk(object)) getString]];
}

- (jboolean)isArray {
  return false;
}

- (jint)length {
  return [((JavaUtilLinkedHashMap *) nil_chk(fields_)) size];
}

- (JavaUtilArrayList *)keys {
  id<JavaUtilSet> keys = new_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(fields_)) keySet]);
  if (clazz_ != nil) {
    [keys addAllWithJavaUtilCollection:[clazz_ allKeys]];
  }
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([keys stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiObjectImpl_Dictionary_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toCollectionWithJavaUtilFunctionSupplier_(JreLoadStatic(SMSimiObjectImpl_Dictionary_$Lambda$2, instance))];
}

- (JavaUtilArrayList *)values {
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) values])) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiObjectImpl_Dictionary_$Lambda$3, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toCollectionWithJavaUtilFunctionSupplier_(JreLoadStatic(SMSimiObjectImpl_Dictionary_$Lambda$4, instance))];
}

- (SMSimiObjectImpl *)enumerateWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  jint size = [self length];
  JavaUtilArrayList *values = new_JavaUtilArrayList_initWithInt_(size);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) entrySet])) {
    [values addWithId:new_SMSimiValue_Object_initWithSMSimiObject_(SMSimiObjectImpl_decomposedPairWithSMSimiClassImpl_withSMSimiValue_withSMSimiValue_(objectClass, new_SMSimiValue_String_initWithNSString_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]), [((id<SMSimiProperty>) nil_chk([entry_ getValue])) getValue]))];
  }
  return SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(objectClass, true, values);
}

- (SMSimiObjectImpl *)zipWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  if ([self length] == 0) {
    return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(objectClass, true, new_JavaUtilLinkedHashMap_init());
  }
  JavaUtilLinkedHashMap *zipFields = new_JavaUtilLinkedHashMap_init();
  for (id<SMSimiProperty> __strong prop in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) values])) {
    SMSimiObjectImpl_Dictionary *obj = [((SMSimiObjectImpl *) nil_chk(((SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(prop)) getValue])) getObject], [SMSimiObjectImpl class])))) asDictionary];
    (void) [zipFields putWithId:[((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([((SMSimiObjectImpl_Dictionary *) nil_chk(obj))->fields_ getWithId:SMConstants_KEY])) getValue])) getString] withId:[obj->fields_ getWithId:SMConstants_VALUE]];
  }
  return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(objectClass, true, zipFields);
}

- (SMSimiValue *)indexOfWithSMSimiValue:(SMSimiValue *)value {
  jint index = [((id<JavaUtilList>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) values])) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiObjectImpl_Dictionary_$Lambda$5, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()])) indexOfWithId:value];
  if (index == -1) {
    return nil;
  }
  return new_SMSimiValue_Number_initWithDouble_(index);
}

- (SMSimiObjectImpl *)reversed {
  id<JavaUtilListIterator> iter = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(fields_)) entrySet]) listIteratorWithInt:[fields_ size]];
  JavaUtilLinkedHashMap *reversedFields = new_JavaUtilLinkedHashMap_init();
  while ([((id<JavaUtilListIterator>) nil_chk(iter)) hasPrevious]) {
    id<JavaUtilMap_Entry> entry_ = [iter previous];
    (void) [reversedFields putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
  }
  return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz_, immutable_, reversedFields);
}

- (id<JavaUtilIterator>)iterate {
  return [((JavaUtilArrayList *) nil_chk([self keys])) iterator];
}

- (SMSimiObjectImpl *)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  JavaUtilLinkedHashMap *sortedFields = new_JavaUtilLinkedHashMap_init();
  [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) entrySet])) stream])) sortedWithJavaUtilComparator:comparator])) forEachWithJavaUtilFunctionConsumer:new_SMSimiObjectImpl_Dictionary_$Lambda$6_initWithJavaUtilLinkedHashMap_(sortedFields)];
  return SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz_, true, sortedFields);
}

- (void)appendImplWithSMSimiProperty:(id<SMSimiProperty>)elem {
  (void) [((JavaUtilLinkedHashMap *) nil_chk(fields_)) putWithId:JreStrcat("$I", SMConstants_IMPLICIT, [fields_ size]) withId:elem];
}

- (void)addAllWithSMSimiObjectImpl:(SMSimiObjectImpl *)other {
  if ([((SMSimiObjectImpl *) nil_chk(other)) isArray]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Trying to add an array to object!");
  }
  else {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(((SMSimiObjectImpl_Dictionary *) cast_chk(other, [SMSimiObjectImpl_Dictionary class]))->fields_)) entrySet])) {
      if (![fields_ containsKeyWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]]) {
        (void) [fields_ putWithId:[entry_ getKey] withId:[entry_ getValue]];
      }
    }
  }
}

- (NSString *)printFields {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (NSString * __strong key in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) keySet])) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:key])) appendWithNSString:@" = "])) appendWithId:[fields_ getWithId:key]])) appendWithNSString:@"\n"];
  }
  return [sb description];
}

- (SMSimiObjectImpl_Dictionary *)asDictionary {
  return self;
}

- (SMSimiObjectImpl_Array *)asArray {
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot cast Dictionary to Array!");
}

- (id<SMSimiObject>)cloneWithBoolean:(jboolean)mutable_ {
  JavaUtilLinkedHashMap *fieldsClone = new_JavaUtilLinkedHashMap_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(fields_)) entrySet])) {
    (void) [fieldsClone putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[((id<SMSimiProperty>) nil_chk([entry_ getValue])) cloneWithBoolean:mutable_]];
  }
  return new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz_, mutable_, fieldsClone);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 14, 13, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x0, -1, -1, -1, 17, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Dictionary;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Array;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiClassImpl:withBoolean:withJavaUtilLinkedHashMap:);
  methods[1].selector = @selector(getWithSMToken:withJavaLangInteger:withSMEnvironment:);
  methods[2].selector = @selector(setFieldWithNSString:withSMSimiProperty:);
  methods[3].selector = @selector(clearImpl);
  methods[4].selector = @selector(matchesWithSMSimiObjectImpl:withJavaUtilList:);
  methods[5].selector = @selector(containsWithSMSimiValue:withSMToken:);
  methods[6].selector = @selector(isArray);
  methods[7].selector = @selector(length);
  methods[8].selector = @selector(keys);
  methods[9].selector = @selector(values);
  methods[10].selector = @selector(enumerateWithSMSimiClassImpl:);
  methods[11].selector = @selector(zipWithSMSimiClassImpl:);
  methods[12].selector = @selector(indexOfWithSMSimiValue:);
  methods[13].selector = @selector(reversed);
  methods[14].selector = @selector(iterate);
  methods[15].selector = @selector(sortedWithJavaUtilComparator:);
  methods[16].selector = @selector(appendImplWithSMSimiProperty:);
  methods[17].selector = @selector(addAllWithSMSimiObjectImpl:);
  methods[18].selector = @selector(printFields);
  methods[19].selector = @selector(asDictionary);
  methods[20].selector = @selector(asArray);
  methods[21].selector = @selector(cloneWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fields_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x10, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiClassImpl;ZLJavaUtilLinkedHashMap;", "(LSimiClassImpl;ZLjava/util/LinkedHashMap<Ljava/lang/String;LSimiProperty;>;)V", "get", "LSMToken;LJavaLangInteger;LSMEnvironment;", "setField", "LNSString;LSMSimiProperty;", "matches", "LSMSimiObjectImpl;LJavaUtilList;", "(LSimiObjectImpl;Ljava/util/List<Ljava/lang/String;>;)Z", "contains", "LSMSimiValue;LSMToken;", "()Ljava/util/ArrayList<LSimiValue;>;", "enumerate", "LSMSimiClassImpl;", "zip", "indexOf", "LSMSimiValue;", "()Ljava/util/Iterator<*>;", "sorted", "LJavaUtilComparator;", "(Ljava/util/Comparator<*>;)LSimiObjectImpl;", "appendImpl", "LSMSimiProperty;", "addAll", "LSMSimiObjectImpl;", "clone", "Z", "Ljava/util/LinkedHashMap<Ljava/lang/String;LSimiProperty;>;" };
  static const J2ObjcClassInfo _SMSimiObjectImpl_Dictionary = { "Dictionary", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 22, 1, 24, -1, -1, -1, -1 };
  return &_SMSimiObjectImpl_Dictionary;
}

@end

void SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(SMSimiObjectImpl_Dictionary *self, SMSimiClassImpl *clazz, jboolean immutable, JavaUtilLinkedHashMap *fields) {
  SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_(self, clazz, immutable);
  self->fields_ = fields;
}

SMSimiObjectImpl_Dictionary *new_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(SMSimiClassImpl *clazz, jboolean immutable, JavaUtilLinkedHashMap *fields) {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Dictionary, initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_, clazz, immutable, fields)
}

SMSimiObjectImpl_Dictionary *create_SMSimiObjectImpl_Dictionary_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(SMSimiClassImpl *clazz, jboolean immutable, JavaUtilLinkedHashMap *fields) {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Dictionary, initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_, clazz, immutable, fields)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiObjectImpl_Dictionary)

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Dictionary_$Lambda$1)

@implementation SMSimiObjectImpl_Dictionary_$Lambda$1

- (id)applyWithId:(NSString *)a {
  return new_SMSimiValue_String_initWithNSString_(a);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Dictionary_$Lambda$1 class]) {
    SMSimiObjectImpl_Dictionary_$Lambda$1_instance = new_SMSimiObjectImpl_Dictionary_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Dictionary_$Lambda$1)
  }
}

@end

void SMSimiObjectImpl_Dictionary_$Lambda$1_init(SMSimiObjectImpl_Dictionary_$Lambda$1 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Dictionary_$Lambda$1 *new_SMSimiObjectImpl_Dictionary_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$1, init)
}

SMSimiObjectImpl_Dictionary_$Lambda$1 *create_SMSimiObjectImpl_Dictionary_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Dictionary_$Lambda$2)

@implementation SMSimiObjectImpl_Dictionary_$Lambda$2

- (id)get {
  return new_JavaUtilArrayList_init();
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Dictionary_$Lambda$2 class]) {
    SMSimiObjectImpl_Dictionary_$Lambda$2_instance = new_SMSimiObjectImpl_Dictionary_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Dictionary_$Lambda$2)
  }
}

@end

void SMSimiObjectImpl_Dictionary_$Lambda$2_init(SMSimiObjectImpl_Dictionary_$Lambda$2 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Dictionary_$Lambda$2 *new_SMSimiObjectImpl_Dictionary_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$2, init)
}

SMSimiObjectImpl_Dictionary_$Lambda$2 *create_SMSimiObjectImpl_Dictionary_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Dictionary_$Lambda$3)

@implementation SMSimiObjectImpl_Dictionary_$Lambda$3

- (id)applyWithId:(id<SMSimiProperty>)p {
  return [((id<SMSimiProperty>) nil_chk(p)) getValue];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Dictionary_$Lambda$3 class]) {
    SMSimiObjectImpl_Dictionary_$Lambda$3_instance = new_SMSimiObjectImpl_Dictionary_$Lambda$3_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Dictionary_$Lambda$3)
  }
}

@end

void SMSimiObjectImpl_Dictionary_$Lambda$3_init(SMSimiObjectImpl_Dictionary_$Lambda$3 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Dictionary_$Lambda$3 *new_SMSimiObjectImpl_Dictionary_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$3, init)
}

SMSimiObjectImpl_Dictionary_$Lambda$3 *create_SMSimiObjectImpl_Dictionary_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$3, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Dictionary_$Lambda$4)

@implementation SMSimiObjectImpl_Dictionary_$Lambda$4

- (id)get {
  return new_JavaUtilArrayList_init();
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Dictionary_$Lambda$4 class]) {
    SMSimiObjectImpl_Dictionary_$Lambda$4_instance = new_SMSimiObjectImpl_Dictionary_$Lambda$4_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Dictionary_$Lambda$4)
  }
}

@end

void SMSimiObjectImpl_Dictionary_$Lambda$4_init(SMSimiObjectImpl_Dictionary_$Lambda$4 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Dictionary_$Lambda$4 *new_SMSimiObjectImpl_Dictionary_$Lambda$4_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$4, init)
}

SMSimiObjectImpl_Dictionary_$Lambda$4 *create_SMSimiObjectImpl_Dictionary_$Lambda$4_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$4, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Dictionary_$Lambda$5)

@implementation SMSimiObjectImpl_Dictionary_$Lambda$5

- (id)applyWithId:(id<SMSimiProperty>)p {
  return [((id<SMSimiProperty>) nil_chk(p)) getValue];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Dictionary_$Lambda$5 class]) {
    SMSimiObjectImpl_Dictionary_$Lambda$5_instance = new_SMSimiObjectImpl_Dictionary_$Lambda$5_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Dictionary_$Lambda$5)
  }
}

@end

void SMSimiObjectImpl_Dictionary_$Lambda$5_init(SMSimiObjectImpl_Dictionary_$Lambda$5 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Dictionary_$Lambda$5 *new_SMSimiObjectImpl_Dictionary_$Lambda$5_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$5, init)
}

SMSimiObjectImpl_Dictionary_$Lambda$5 *create_SMSimiObjectImpl_Dictionary_$Lambda$5_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$5, init)
}

@implementation SMSimiObjectImpl_Dictionary_$Lambda$6

- (void)acceptWithId:(id<JavaUtilMap_Entry>)e {
  (void) [((JavaUtilLinkedHashMap *) nil_chk(val$sortedFields_)) putWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withId:[e getValue]];
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void SMSimiObjectImpl_Dictionary_$Lambda$6_initWithJavaUtilLinkedHashMap_(SMSimiObjectImpl_Dictionary_$Lambda$6 *self, JavaUtilLinkedHashMap *capture$0) {
  self->val$sortedFields_ = capture$0;
  NSObject_init(self);
}

SMSimiObjectImpl_Dictionary_$Lambda$6 *new_SMSimiObjectImpl_Dictionary_$Lambda$6_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *capture$0) {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$6, initWithJavaUtilLinkedHashMap_, capture$0)
}

SMSimiObjectImpl_Dictionary_$Lambda$6 *create_SMSimiObjectImpl_Dictionary_$Lambda$6_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *capture$0) {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Dictionary_$Lambda$6, initWithJavaUtilLinkedHashMap_, capture$0)
}

@implementation SMSimiObjectImpl_Array

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                      withBoolean:(jboolean)immutable
                            withJavaUtilArrayList:(JavaUtilArrayList *)fields {
  SMSimiObjectImpl_Array_initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(self, clazz, immutable, fields);
  return self;
}

- (id<SMSimiProperty>)getWithSMToken:(SMToken *)name
                 withJavaLangInteger:(JavaLangInteger *)arity
                   withSMEnvironment:(SMEnvironment *)environment {
  NSString *key = ((SMToken *) nil_chk(name))->lexeme_;
  @try {
    jint index = JavaLangInteger_parseIntWithNSString_(key);
    return [self bindWithNSString:key withSMSimiProperty:[((JavaUtilArrayList *) nil_chk(fields_)) getWithInt:index]];
  }
  @catch (JavaLangNumberFormatException *ignored) {
  }
  return [self getFromClassWithSMToken:name withJavaLangInteger:arity withSMEnvironment:environment];
}

- (void)setFieldWithNSString:(NSString *)key
          withSMSimiProperty:(id<SMSimiProperty>)prop {
  jint index = JavaLangInteger_parseIntWithNSString_(key);
  if (prop == nil) {
    (void) [((JavaUtilArrayList *) nil_chk(fields_)) removeWithInt:index];
  }
  else {
    (void) [((JavaUtilArrayList *) nil_chk(fields_)) setWithInt:index withId:prop];
  }
}

- (void)clearImpl {
  [((JavaUtilArrayList *) nil_chk(fields_)) clear];
}

- (jboolean)matchesWithSMSimiObjectImpl:(SMSimiObjectImpl *)other
                       withJavaUtilList:(id<JavaUtilList>)fieldsToMatch {
  if (![((SMSimiObjectImpl *) nil_chk(other)) isArray]) {
    return false;
  }
  jint length = [self length];
  if ([other length] != length) {
    return false;
  }
  for (jint i = 0; i < length; i++) {
    if (![self valuesMatchWithSMSimiProperty:[((JavaUtilArrayList *) nil_chk(fields_)) getWithInt:i] withSMSimiProperty:[((SMSimiObjectImpl_Array *) cast_chk(other, [SMSimiObjectImpl_Array class]))->fields_ getWithInt:i]]) {
      return false;
    }
  }
  return true;
}

- (jboolean)containsWithSMSimiValue:(SMSimiValue *)object
                        withSMToken:(SMToken *)at {
  return [((JavaUtilArrayList *) nil_chk(fields_)) containsWithId:object];
}

- (jboolean)isArray {
  return true;
}

- (jint)length {
  return [((JavaUtilArrayList *) nil_chk(fields_)) size];
}

- (JavaUtilArrayList *)keys {
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamIntStream>) nil_chk(JavaUtilStreamIntStream_rangeWithInt_withInt_(0, [self length]))) mapToObjWithJavaUtilFunctionIntFunction:JreLoadStatic(SMSimiObjectImpl_Array_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toCollectionWithJavaUtilFunctionSupplier_(JreLoadStatic(SMSimiObjectImpl_Array_$Lambda$2, instance))];
}

- (JavaUtilArrayList *)values {
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((JavaUtilArrayList *) nil_chk(fields_)) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiObjectImpl_Array_$Lambda$3, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toCollectionWithJavaUtilFunctionSupplier_(JreLoadStatic(SMSimiObjectImpl_Array_$Lambda$4, instance))];
}

- (SMSimiObjectImpl *)enumerateWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  jint size = [self length];
  JavaUtilArrayList *values = new_JavaUtilArrayList_initWithInt_(size);
  for (jint i = 0; i < size; i++) {
    [values addWithId:new_SMSimiValue_Object_initWithSMSimiObject_(SMSimiObjectImpl_decomposedPairWithSMSimiClassImpl_withSMSimiValue_withSMSimiValue_(objectClass, new_SMSimiValue_Number_initWithDouble_(i), [((id<SMSimiProperty>) nil_chk([((JavaUtilArrayList *) nil_chk(fields_)) getWithInt:i])) getValue]))];
  }
  return SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(objectClass, true, values);
}

- (SMSimiObjectImpl *)zipWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Can only zip arrays!");
}

- (SMSimiValue *)indexOfWithSMSimiValue:(SMSimiValue *)value {
  jint index = [((JavaUtilArrayList *) nil_chk(fields_)) indexOfWithId:value];
  if (index == -1) {
    return nil;
  }
  return new_SMSimiValue_Number_initWithDouble_(index);
}

- (SMSimiObjectImpl *)reversed {
  JavaUtilArrayList *reversed = new_JavaUtilArrayList_initWithJavaUtilCollection_(fields_);
  JavaUtilCollections_reverseWithJavaUtilList_(reversed);
  return new_SMSimiObjectImpl_Array_initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz_, immutable_, reversed);
}

- (id<JavaUtilIterator>)iterate {
  return [((JavaUtilArrayList *) nil_chk(fields_)) iterator];
}

- (SMSimiObjectImpl *)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  JavaUtilArrayList *sorted = [self values];
  [((JavaUtilArrayList *) nil_chk(sorted)) sortWithJavaUtilComparator:comparator];
  return SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz_, true, new_JavaUtilArrayList_initWithJavaUtilCollection_(sorted));
}

- (void)appendImplWithSMSimiProperty:(id<SMSimiProperty>)elem {
  [((JavaUtilArrayList *) nil_chk(fields_)) addWithId:[((id<SMSimiProperty>) nil_chk(elem)) getValue]];
}

- (void)addAllWithSMSimiObjectImpl:(SMSimiObjectImpl *)other {
  if ([((SMSimiObjectImpl *) nil_chk(other)) isArray]) {
    [((JavaUtilArrayList *) nil_chk(fields_)) addAllWithJavaUtilCollection:((SMSimiObjectImpl_Array *) cast_chk(other, [SMSimiObjectImpl_Array class]))->fields_];
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Trying to add a dictionary to an array!");
  }
}

- (NSString *)printFields {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jint size = [self length];
  for (jint i = 0; i < size; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithInt:i])) appendWithNSString:@" = "])) appendWithId:[((JavaUtilArrayList *) nil_chk(fields_)) getWithInt:i]])) appendWithNSString:@"\n"];
  }
  return [sb description];
}

- (SMSimiObjectImpl_Dictionary *)asDictionary {
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot cast Array to Dictionary!");
}

- (SMSimiObjectImpl_Array *)asArray {
  return self;
}

- (id<SMSimiObject>)cloneWithBoolean:(jboolean)mutable_ {
  JavaUtilArrayList *fieldsClone = new_JavaUtilArrayList_init();
  for (id<SMSimiProperty> __strong field in nil_chk(fields_)) {
    [fieldsClone addWithId:[((id<SMSimiProperty>) nil_chk(field)) cloneWithBoolean:mutable_]];
  }
  return new_SMSimiObjectImpl_Array_initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz_, mutable_, fieldsClone);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 14, 13, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x0, -1, -1, -1, 17, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Dictionary;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Array;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiClassImpl:withBoolean:withJavaUtilArrayList:);
  methods[1].selector = @selector(getWithSMToken:withJavaLangInteger:withSMEnvironment:);
  methods[2].selector = @selector(setFieldWithNSString:withSMSimiProperty:);
  methods[3].selector = @selector(clearImpl);
  methods[4].selector = @selector(matchesWithSMSimiObjectImpl:withJavaUtilList:);
  methods[5].selector = @selector(containsWithSMSimiValue:withSMToken:);
  methods[6].selector = @selector(isArray);
  methods[7].selector = @selector(length);
  methods[8].selector = @selector(keys);
  methods[9].selector = @selector(values);
  methods[10].selector = @selector(enumerateWithSMSimiClassImpl:);
  methods[11].selector = @selector(zipWithSMSimiClassImpl:);
  methods[12].selector = @selector(indexOfWithSMSimiValue:);
  methods[13].selector = @selector(reversed);
  methods[14].selector = @selector(iterate);
  methods[15].selector = @selector(sortedWithJavaUtilComparator:);
  methods[16].selector = @selector(appendImplWithSMSimiProperty:);
  methods[17].selector = @selector(addAllWithSMSimiObjectImpl:);
  methods[18].selector = @selector(printFields);
  methods[19].selector = @selector(asDictionary);
  methods[20].selector = @selector(asArray);
  methods[21].selector = @selector(cloneWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fields_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiClassImpl;ZLJavaUtilArrayList;", "(LSimiClassImpl;ZLjava/util/ArrayList<+LSimiProperty;>;)V", "get", "LSMToken;LJavaLangInteger;LSMEnvironment;", "setField", "LNSString;LSMSimiProperty;", "matches", "LSMSimiObjectImpl;LJavaUtilList;", "(LSimiObjectImpl;Ljava/util/List<Ljava/lang/String;>;)Z", "contains", "LSMSimiValue;LSMToken;", "()Ljava/util/ArrayList<LSimiValue;>;", "enumerate", "LSMSimiClassImpl;", "zip", "indexOf", "LSMSimiValue;", "()Ljava/util/Iterator<*>;", "sorted", "LJavaUtilComparator;", "(Ljava/util/Comparator<*>;)LSimiObjectImpl;", "appendImpl", "LSMSimiProperty;", "addAll", "LSMSimiObjectImpl;", "clone", "Z", "Ljava/util/ArrayList<LSimiProperty;>;" };
  static const J2ObjcClassInfo _SMSimiObjectImpl_Array = { "Array", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 22, 1, 24, -1, -1, -1, -1 };
  return &_SMSimiObjectImpl_Array;
}

@end

void SMSimiObjectImpl_Array_initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(SMSimiObjectImpl_Array *self, SMSimiClassImpl *clazz, jboolean immutable, JavaUtilArrayList *fields) {
  SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_(self, clazz, immutable);
  self->fields_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(fields);
}

SMSimiObjectImpl_Array *new_SMSimiObjectImpl_Array_initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(SMSimiClassImpl *clazz, jboolean immutable, JavaUtilArrayList *fields) {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Array, initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_, clazz, immutable, fields)
}

SMSimiObjectImpl_Array *create_SMSimiObjectImpl_Array_initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(SMSimiClassImpl *clazz, jboolean immutable, JavaUtilArrayList *fields) {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Array, initWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_, clazz, immutable, fields)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiObjectImpl_Array)

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Array_$Lambda$1)

@implementation SMSimiObjectImpl_Array_$Lambda$1

- (id)applyWithInt:(jint)a {
  return new_SMSimiValue_Number_initWithDouble_(a);
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Array_$Lambda$1 class]) {
    SMSimiObjectImpl_Array_$Lambda$1_instance = new_SMSimiObjectImpl_Array_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Array_$Lambda$1)
  }
}

@end

void SMSimiObjectImpl_Array_$Lambda$1_init(SMSimiObjectImpl_Array_$Lambda$1 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Array_$Lambda$1 *new_SMSimiObjectImpl_Array_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Array_$Lambda$1, init)
}

SMSimiObjectImpl_Array_$Lambda$1 *create_SMSimiObjectImpl_Array_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Array_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Array_$Lambda$2)

@implementation SMSimiObjectImpl_Array_$Lambda$2

- (id)get {
  return new_JavaUtilArrayList_init();
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Array_$Lambda$2 class]) {
    SMSimiObjectImpl_Array_$Lambda$2_instance = new_SMSimiObjectImpl_Array_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Array_$Lambda$2)
  }
}

@end

void SMSimiObjectImpl_Array_$Lambda$2_init(SMSimiObjectImpl_Array_$Lambda$2 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Array_$Lambda$2 *new_SMSimiObjectImpl_Array_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Array_$Lambda$2, init)
}

SMSimiObjectImpl_Array_$Lambda$2 *create_SMSimiObjectImpl_Array_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Array_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Array_$Lambda$3)

@implementation SMSimiObjectImpl_Array_$Lambda$3

- (id)applyWithId:(id<SMSimiProperty>)a {
  return [((id<SMSimiProperty>) nil_chk(a)) getValue];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Array_$Lambda$3 class]) {
    SMSimiObjectImpl_Array_$Lambda$3_instance = new_SMSimiObjectImpl_Array_$Lambda$3_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Array_$Lambda$3)
  }
}

@end

void SMSimiObjectImpl_Array_$Lambda$3_init(SMSimiObjectImpl_Array_$Lambda$3 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Array_$Lambda$3 *new_SMSimiObjectImpl_Array_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Array_$Lambda$3, init)
}

SMSimiObjectImpl_Array_$Lambda$3 *create_SMSimiObjectImpl_Array_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Array_$Lambda$3, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiObjectImpl_Array_$Lambda$4)

@implementation SMSimiObjectImpl_Array_$Lambda$4

- (id)get {
  return new_JavaUtilArrayList_init();
}

+ (void)initialize {
  if (self == [SMSimiObjectImpl_Array_$Lambda$4 class]) {
    SMSimiObjectImpl_Array_$Lambda$4_instance = new_SMSimiObjectImpl_Array_$Lambda$4_init();
    J2OBJC_SET_INITIALIZED(SMSimiObjectImpl_Array_$Lambda$4)
  }
}

@end

void SMSimiObjectImpl_Array_$Lambda$4_init(SMSimiObjectImpl_Array_$Lambda$4 *self) {
  NSObject_init(self);
}

SMSimiObjectImpl_Array_$Lambda$4 *new_SMSimiObjectImpl_Array_$Lambda$4_init() {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_Array_$Lambda$4, init)
}

SMSimiObjectImpl_Array_$Lambda$4 *create_SMSimiObjectImpl_Array_$Lambda$4_init() {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_Array_$Lambda$4, init)
}

@implementation SMSimiObjectImpl_InitiallyEmpty

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                                      withBoolean:(jboolean)immutable {
  SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(self, clazz, immutable);
  return self;
}

- (id<SMSimiProperty>)getWithSMToken:(SMToken *)name
                 withJavaLangInteger:(JavaLangInteger *)arity
                   withSMEnvironment:(SMEnvironment *)environment {
  if (underlying_ == nil) {
    return [self getFromClassWithSMToken:name withJavaLangInteger:arity withSMEnvironment:environment];
  }
  return [underlying_ getWithSMToken:name withJavaLangInteger:arity withSMEnvironment:environment];
}

- (void)setFieldWithNSString:(NSString *)key
          withSMSimiProperty:(id<SMSimiProperty>)prop {
  if (underlying_ == nil) {
    JavaUtilLinkedHashMap *fields = new_JavaUtilLinkedHashMap_init();
    (void) [fields putWithId:key withId:prop];
    underlying_ = SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz_, immutable_, fields);
  }
  else {
    [underlying_ setFieldWithNSString:key withSMSimiProperty:prop];
  }
}

- (void)clearImpl {
  if (underlying_ != nil) {
    [underlying_ clearImpl];
  }
}

- (jboolean)matchesWithSMSimiObjectImpl:(SMSimiObjectImpl *)other
                       withJavaUtilList:(id<JavaUtilList>)fieldsToMatch {
  return [((SMSimiObjectImpl *) nil_chk(other)) length] == 0;
}

- (jboolean)containsWithSMSimiValue:(SMSimiValue *)object
                        withSMToken:(SMToken *)at {
  if (underlying_ == nil) {
    return false;
  }
  return [underlying_ containsWithSMSimiValue:object withSMToken:at];
}

- (jboolean)isArray {
  if (underlying_ == nil) {
    return false;
  }
  return [underlying_ isArray];
}

- (jint)length {
  if (underlying_ == nil) {
    return 0;
  }
  return [underlying_ length];
}

- (JavaUtilArrayList *)keys {
  if (underlying_ == nil) {
    return new_JavaUtilArrayList_init();
  }
  return [underlying_ keys];
}

- (JavaUtilArrayList *)values {
  if (underlying_ == nil) {
    return new_JavaUtilArrayList_init();
  }
  return [underlying_ values];
}

- (SMSimiObjectImpl *)enumerateWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  if (underlying_ == nil) {
    return SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz_, immutable_, new_JavaUtilArrayList_init());
  }
  return [underlying_ enumerateWithSMSimiClassImpl:objectClass];
}

- (SMSimiObjectImpl *)zipWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  if (underlying_ == nil) {
    return SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz_, immutable_, new_JavaUtilLinkedHashMap_init());
  }
  return [underlying_ enumerateWithSMSimiClassImpl:objectClass];
}

- (SMSimiValue *)indexOfWithSMSimiValue:(SMSimiValue *)value {
  if (underlying_ == nil) {
    return nil;
  }
  return [underlying_ indexOfWithSMSimiValue:value];
}

- (SMSimiObjectImpl *)reversed {
  if (underlying_ == nil) {
    return SMSimiObjectImpl_emptyWithSMSimiClassImpl_withBoolean_(clazz_, immutable_);
  }
  return [underlying_ reversed];
}

- (id<JavaUtilIterator>)iterate {
  if (underlying_ == nil) {
    return [new_JavaUtilArrayList_init() iterator];
  }
  return [underlying_ iterate];
}

- (SMSimiObjectImpl *)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (underlying_ == nil) {
    return SMSimiObjectImpl_emptyWithSMSimiClassImpl_withBoolean_(clazz_, immutable_);
  }
  return [underlying_ sortedWithJavaUtilComparator:comparator];
}

- (void)appendImplWithSMSimiProperty:(id<SMSimiProperty>)elem {
  if (underlying_ == nil) {
    JavaUtilArrayList *fields = new_JavaUtilArrayList_init();
    [fields addWithId:elem];
    underlying_ = SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz_, immutable_, fields);
  }
  else {
    [underlying_ appendImplWithSMSimiProperty:elem];
  }
}

- (void)addAllWithSMSimiObjectImpl:(SMSimiObjectImpl *)other {
  if (underlying_ == nil) {
    if ([((SMSimiObjectImpl *) nil_chk(other)) isArray]) {
      underlying_ = SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz_, immutable_, new_JavaUtilArrayList_initWithJavaUtilCollection_([((SMSimiObjectImpl *) nil_chk(underlying_)) values]));
    }
    else {
      JavaUtilLinkedHashMap *fields = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(((SMSimiObjectImpl_Dictionary *) nil_chk([other asDictionary]))->fields_);
      underlying_ = SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz_, immutable_, fields);
    }
  }
  else {
    [underlying_ addAllWithSMSimiObjectImpl:other];
  }
}

- (NSString *)printFields {
  if (underlying_ == nil) {
    return @"";
  }
  return [underlying_ printFields];
}

- (SMSimiObjectImpl_Dictionary *)asDictionary {
  if (underlying_ == nil) {
    return (SMSimiObjectImpl_Dictionary *) cast_chk(SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(clazz_, immutable_, new_JavaUtilLinkedHashMap_init()), [SMSimiObjectImpl_Dictionary class]);
  }
  return [underlying_ asDictionary];
}

- (SMSimiObjectImpl_Array *)asArray {
  if (underlying_ == nil) {
    return (SMSimiObjectImpl_Array *) cast_chk(SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(clazz_, immutable_, new_JavaUtilArrayList_init()), [SMSimiObjectImpl_Array class]);
  }
  return [underlying_ asArray];
}

- (id<SMSimiObject>)cloneWithBoolean:(jboolean)mutable_ {
  SMSimiObjectImpl_InitiallyEmpty *clone = (SMSimiObjectImpl_InitiallyEmpty *) cast_chk(SMSimiObjectImpl_emptyWithSMSimiClassImpl_withBoolean_(clazz_, mutable_), [SMSimiObjectImpl_InitiallyEmpty class]);
  ((SMSimiObjectImpl_InitiallyEmpty *) nil_chk(clone))->underlying_ = (underlying_ != nil) ? (SMSimiObjectImpl *) cast_chk([((SMSimiObjectImpl *) nil_chk(underlying_)) cloneWithBoolean:mutable_], [SMSimiObjectImpl class]) : nil;
  return clone;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 13, 12, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x0, -1, -1, -1, 16, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Dictionary;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObjectImpl_Array;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiClassImpl:withBoolean:);
  methods[1].selector = @selector(getWithSMToken:withJavaLangInteger:withSMEnvironment:);
  methods[2].selector = @selector(setFieldWithNSString:withSMSimiProperty:);
  methods[3].selector = @selector(clearImpl);
  methods[4].selector = @selector(matchesWithSMSimiObjectImpl:withJavaUtilList:);
  methods[5].selector = @selector(containsWithSMSimiValue:withSMToken:);
  methods[6].selector = @selector(isArray);
  methods[7].selector = @selector(length);
  methods[8].selector = @selector(keys);
  methods[9].selector = @selector(values);
  methods[10].selector = @selector(enumerateWithSMSimiClassImpl:);
  methods[11].selector = @selector(zipWithSMSimiClassImpl:);
  methods[12].selector = @selector(indexOfWithSMSimiValue:);
  methods[13].selector = @selector(reversed);
  methods[14].selector = @selector(iterate);
  methods[15].selector = @selector(sortedWithJavaUtilComparator:);
  methods[16].selector = @selector(appendImplWithSMSimiProperty:);
  methods[17].selector = @selector(addAllWithSMSimiObjectImpl:);
  methods[18].selector = @selector(printFields);
  methods[19].selector = @selector(asDictionary);
  methods[20].selector = @selector(asArray);
  methods[21].selector = @selector(cloneWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "underlying_", "LSMSimiObjectImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiClassImpl;Z", "get", "LSMToken;LJavaLangInteger;LSMEnvironment;", "setField", "LNSString;LSMSimiProperty;", "matches", "LSMSimiObjectImpl;LJavaUtilList;", "(LSimiObjectImpl;Ljava/util/List<Ljava/lang/String;>;)Z", "contains", "LSMSimiValue;LSMToken;", "()Ljava/util/ArrayList<LSimiValue;>;", "enumerate", "LSMSimiClassImpl;", "zip", "indexOf", "LSMSimiValue;", "()Ljava/util/Iterator<*>;", "sorted", "LJavaUtilComparator;", "(Ljava/util/Comparator<*>;)LSimiObjectImpl;", "appendImpl", "LSMSimiProperty;", "addAll", "LSMSimiObjectImpl;", "clone", "Z" };
  static const J2ObjcClassInfo _SMSimiObjectImpl_InitiallyEmpty = { "InitiallyEmpty", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 22, 1, 23, -1, -1, -1, -1 };
  return &_SMSimiObjectImpl_InitiallyEmpty;
}

@end

void SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(SMSimiObjectImpl_InitiallyEmpty *self, SMSimiClassImpl *clazz, jboolean immutable) {
  SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_(self, clazz, immutable);
}

SMSimiObjectImpl_InitiallyEmpty *new_SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(SMSimiClassImpl *clazz, jboolean immutable) {
  J2OBJC_NEW_IMPL(SMSimiObjectImpl_InitiallyEmpty, initWithSMSimiClassImpl_withBoolean_, clazz, immutable)
}

SMSimiObjectImpl_InitiallyEmpty *create_SMSimiObjectImpl_InitiallyEmpty_initWithSMSimiClassImpl_withBoolean_(SMSimiClassImpl *clazz, jboolean immutable) {
  J2OBJC_CREATE_IMPL(SMSimiObjectImpl_InitiallyEmpty, initWithSMSimiClassImpl_withBoolean_, clazz, immutable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiObjectImpl_InitiallyEmpty)
