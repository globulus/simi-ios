//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Scanner.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "Constants.h"
#include "ErrorHub.h"
#include "Scanner.h"
#include "SimiValue.h"
#include "Token.h"
#include "TokenType.h"

@interface NetGlobulusSimiScanner () {
 @public
  NSString *source_;
  id<JavaUtilList> tokens_;
  jint start_;
  jint current_;
  jint line_;
}

- (void)scanToken;

- (void)identifier;

- (void)number;

- (NSString *)escapedStringWithInt:(jint)start
                           withInt:(jint)stop;

- (NSString *)keywordStringWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type;

- (jboolean)matchPeekWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type;

- (jboolean)matchWithChar:(jchar)expected;

- (jchar)peek;

- (jchar)peekNext;

- (jboolean)isAlphaWithChar:(jchar)c;

- (jboolean)isAlphaNumericWithChar:(jchar)c;

- (jboolean)isDigitWithChar:(jchar)c;

- (jboolean)isDigitOrUnderscoreWithChar:(jchar)c;

- (jboolean)isStringDelimWithChar:(jchar)c;

- (jboolean)isAtEnd;

- (jchar)advance;

- (void)addTokenWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type;

- (void)addTokenWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type
                withNetGlobulusSimiSimiValue:(NetGlobulusSimiSimiValue *)literal;

@end

J2OBJC_FIELD_SETTER(NetGlobulusSimiScanner, source_, NSString *)
J2OBJC_FIELD_SETTER(NetGlobulusSimiScanner, tokens_, id<JavaUtilList>)

inline id<JavaUtilMap> NetGlobulusSimiScanner_get_keywords(void);
static id<JavaUtilMap> NetGlobulusSimiScanner_keywords;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetGlobulusSimiScanner, keywords, id<JavaUtilMap>)

__attribute__((unused)) static void NetGlobulusSimiScanner_scanToken(NetGlobulusSimiScanner *self);

__attribute__((unused)) static void NetGlobulusSimiScanner_identifier(NetGlobulusSimiScanner *self);

__attribute__((unused)) static void NetGlobulusSimiScanner_number(NetGlobulusSimiScanner *self);

__attribute__((unused)) static NSString *NetGlobulusSimiScanner_escapedStringWithInt_withInt_(NetGlobulusSimiScanner *self, jint start, jint stop);

__attribute__((unused)) static NSString *NetGlobulusSimiScanner_keywordStringWithNetGlobulusSimiTokenType_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_matchPeekWithNetGlobulusSimiTokenType_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_matchWithChar_(NetGlobulusSimiScanner *self, jchar expected);

__attribute__((unused)) static jchar NetGlobulusSimiScanner_peek(NetGlobulusSimiScanner *self);

__attribute__((unused)) static jchar NetGlobulusSimiScanner_peekNext(NetGlobulusSimiScanner *self);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_isAlphaWithChar_(NetGlobulusSimiScanner *self, jchar c);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_isAlphaNumericWithChar_(NetGlobulusSimiScanner *self, jchar c);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_isDigitWithChar_(NetGlobulusSimiScanner *self, jchar c);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_isDigitOrUnderscoreWithChar_(NetGlobulusSimiScanner *self, jchar c);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_isStringDelimWithChar_(NetGlobulusSimiScanner *self, jchar c);

__attribute__((unused)) static jboolean NetGlobulusSimiScanner_isAtEnd(NetGlobulusSimiScanner *self);

__attribute__((unused)) static jchar NetGlobulusSimiScanner_advance(NetGlobulusSimiScanner *self);

__attribute__((unused)) static void NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type);

__attribute__((unused)) static void NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_withNetGlobulusSimiSimiValue_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type, NetGlobulusSimiSimiValue *literal);

J2OBJC_INITIALIZED_DEFN(NetGlobulusSimiScanner)

@implementation NetGlobulusSimiScanner

- (instancetype)initWithNSString:(NSString *)source {
  NetGlobulusSimiScanner_initWithNSString_(self, source);
  return self;
}

- (id<JavaUtilList>)scanTokensWithBoolean:(jboolean)addEof {
  while (!NetGlobulusSimiScanner_isAtEnd(self)) {
    start_ = current_;
    NetGlobulusSimiScanner_scanToken(self);
  }
  if (addEof) {
    [((id<JavaUtilList>) nil_chk(tokens_)) addWithId:new_NetGlobulusSimiToken_initWithNetGlobulusSimiTokenType_withNSString_withNetGlobulusSimiSimiValue_withInt_(JreLoadEnum(NetGlobulusSimiTokenType, EOF), @"", nil, line_)];
  }
  return tokens_;
}

- (void)scanToken {
  NetGlobulusSimiScanner_scanToken(self);
}

- (void)identifier {
  NetGlobulusSimiScanner_identifier(self);
}

- (void)number {
  NetGlobulusSimiScanner_number(self);
}

- (void)stringWithChar:(jchar)opener {
  while (NetGlobulusSimiScanner_peek(self) != opener && !NetGlobulusSimiScanner_isAtEnd(self)) {
    if (NetGlobulusSimiScanner_peek(self) == 0x000a) line_++;
    NetGlobulusSimiScanner_advance(self);
  }
  if (NetGlobulusSimiScanner_isAtEnd(self)) {
    [((NetGlobulusSimiErrorHub *) nil_chk(NetGlobulusSimiErrorHub_sharedInstance())) errorWithInt:line_ withNSString:@"Unterminated string."];
    return;
  }
  NetGlobulusSimiScanner_advance(self);
  NSString *value = NetGlobulusSimiScanner_escapedStringWithInt_withInt_(self, start_ + 1, current_ - 1);
  NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_withNetGlobulusSimiSimiValue_(self, JreLoadEnum(NetGlobulusSimiTokenType, STRING), new_NetGlobulusSimiSimiValue_String_initWithNSString_(value));
}

- (NSString *)escapedStringWithInt:(jint)start
                           withInt:(jint)stop {
  return NetGlobulusSimiScanner_escapedStringWithInt_withInt_(self, start, stop);
}

- (NSString *)keywordStringWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type {
  return NetGlobulusSimiScanner_keywordStringWithNetGlobulusSimiTokenType_(self, type);
}

- (jboolean)matchPeekWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type {
  return NetGlobulusSimiScanner_matchPeekWithNetGlobulusSimiTokenType_(self, type);
}

- (jboolean)matchWithChar:(jchar)expected {
  return NetGlobulusSimiScanner_matchWithChar_(self, expected);
}

- (jchar)peek {
  return NetGlobulusSimiScanner_peek(self);
}

- (jchar)peekNext {
  return NetGlobulusSimiScanner_peekNext(self);
}

- (jboolean)isAlphaWithChar:(jchar)c {
  return NetGlobulusSimiScanner_isAlphaWithChar_(self, c);
}

- (jboolean)isAlphaNumericWithChar:(jchar)c {
  return NetGlobulusSimiScanner_isAlphaNumericWithChar_(self, c);
}

- (jboolean)isDigitWithChar:(jchar)c {
  return NetGlobulusSimiScanner_isDigitWithChar_(self, c);
}

- (jboolean)isDigitOrUnderscoreWithChar:(jchar)c {
  return NetGlobulusSimiScanner_isDigitOrUnderscoreWithChar_(self, c);
}

- (jboolean)isStringDelimWithChar:(jchar)c {
  return NetGlobulusSimiScanner_isStringDelimWithChar_(self, c);
}

- (jboolean)isAtEnd {
  return NetGlobulusSimiScanner_isAtEnd(self);
}

- (jchar)advance {
  return NetGlobulusSimiScanner_advance(self);
}

- (void)addTokenWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type {
  NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, type);
}

- (void)addTokenWithNetGlobulusSimiTokenType:(NetGlobulusSimiTokenType *)type
                withNetGlobulusSimiSimiValue:(NetGlobulusSimiSimiValue *)literal {
  NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_withNetGlobulusSimiSimiValue_(self, type, literal);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 5, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 15, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(scanTokensWithBoolean:);
  methods[2].selector = @selector(scanToken);
  methods[3].selector = @selector(identifier);
  methods[4].selector = @selector(number);
  methods[5].selector = @selector(stringWithChar:);
  methods[6].selector = @selector(escapedStringWithInt:withInt:);
  methods[7].selector = @selector(keywordStringWithNetGlobulusSimiTokenType:);
  methods[8].selector = @selector(matchPeekWithNetGlobulusSimiTokenType:);
  methods[9].selector = @selector(matchWithChar:);
  methods[10].selector = @selector(peek);
  methods[11].selector = @selector(peekNext);
  methods[12].selector = @selector(isAlphaWithChar:);
  methods[13].selector = @selector(isAlphaNumericWithChar:);
  methods[14].selector = @selector(isDigitWithChar:);
  methods[15].selector = @selector(isDigitOrUnderscoreWithChar:);
  methods[16].selector = @selector(isStringDelimWithChar:);
  methods[17].selector = @selector(isAtEnd);
  methods[18].selector = @selector(advance);
  methods[19].selector = @selector(addTokenWithNetGlobulusSimiTokenType:);
  methods[20].selector = @selector(addTokenWithNetGlobulusSimiTokenType:withNetGlobulusSimiSimiValue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keywords", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 19, 20, -1 },
    { "source_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tokens_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "start_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "current_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "line_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "scanTokens", "Z", "(Z)Ljava/util/List<LToken;>;", "string", "C", "escapedString", "II", "keywordString", "LNetGlobulusSimiTokenType;", "matchPeek", "match", "isAlpha", "isAlphaNumeric", "isDigit", "isDigitOrUnderscore", "isStringDelim", "addToken", "LNetGlobulusSimiTokenType;LNetGlobulusSimiSimiValue;", &NetGlobulusSimiScanner_keywords, "Ljava/util/Map<Ljava/lang/String;LTokenType;>;", "Ljava/util/List<LToken;>;" };
  static const J2ObjcClassInfo _NetGlobulusSimiScanner = { "Scanner", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 21, 6, -1, -1, -1, -1, -1 };
  return &_NetGlobulusSimiScanner;
}

+ (void)initialize {
  if (self == [NetGlobulusSimiScanner class]) {
    {
      NetGlobulusSimiScanner_keywords = new_JavaUtilHashMap_init();
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"and" withId:JreLoadEnum(NetGlobulusSimiTokenType, AND)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"break" withId:JreLoadEnum(NetGlobulusSimiTokenType, BREAK)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"class" withId:JreLoadEnum(NetGlobulusSimiTokenType, CLASS)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"continue" withId:JreLoadEnum(NetGlobulusSimiTokenType, CONTINUE)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"def" withId:JreLoadEnum(NetGlobulusSimiTokenType, DEF)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"end" withId:JreLoadEnum(NetGlobulusSimiTokenType, END)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"else" withId:JreLoadEnum(NetGlobulusSimiTokenType, ELSE)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"elsif" withId:JreLoadEnum(NetGlobulusSimiTokenType, ELSIF)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"false" withId:JreLoadEnum(NetGlobulusSimiTokenType, FALSE)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"for" withId:JreLoadEnum(NetGlobulusSimiTokenType, FOR)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"gu" withId:JreLoadEnum(NetGlobulusSimiTokenType, GU)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"if" withId:JreLoadEnum(NetGlobulusSimiTokenType, IF)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"import" withId:JreLoadEnum(NetGlobulusSimiTokenType, IMPORT)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"in" withId:JreLoadEnum(NetGlobulusSimiTokenType, IN)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"is" withId:JreLoadEnum(NetGlobulusSimiTokenType, IS)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"native" withId:JreLoadEnum(NetGlobulusSimiTokenType, NATIVE)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"nil" withId:JreLoadEnum(NetGlobulusSimiTokenType, NIL)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"not" withId:JreLoadEnum(NetGlobulusSimiTokenType, NOT)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"or" withId:JreLoadEnum(NetGlobulusSimiTokenType, OR)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"pass" withId:JreLoadEnum(NetGlobulusSimiTokenType, PASS)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"print" withId:JreLoadEnum(NetGlobulusSimiTokenType, PRINT)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"rescue" withId:JreLoadEnum(NetGlobulusSimiTokenType, RESCUE)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"return" withId:JreLoadEnum(NetGlobulusSimiTokenType, RETURN)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:NetGlobulusSimiConstants_SELF withId:JreLoadEnum(NetGlobulusSimiTokenType, SELF)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:NetGlobulusSimiConstants_SUPER withId:JreLoadEnum(NetGlobulusSimiTokenType, SUPER)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"true" withId:JreLoadEnum(NetGlobulusSimiTokenType, TRUE)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"when" withId:JreLoadEnum(NetGlobulusSimiTokenType, WHEN)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"while" withId:JreLoadEnum(NetGlobulusSimiTokenType, WHILE)];
      (void) [NetGlobulusSimiScanner_keywords putWithId:@"yield" withId:JreLoadEnum(NetGlobulusSimiTokenType, YIELD)];
    }
    J2OBJC_SET_INITIALIZED(NetGlobulusSimiScanner)
  }
}

@end

void NetGlobulusSimiScanner_initWithNSString_(NetGlobulusSimiScanner *self, NSString *source) {
  NSObject_init(self);
  self->tokens_ = new_JavaUtilArrayList_init();
  self->start_ = 0;
  self->current_ = 0;
  self->line_ = 1;
  self->source_ = source;
}

NetGlobulusSimiScanner *new_NetGlobulusSimiScanner_initWithNSString_(NSString *source) {
  J2OBJC_NEW_IMPL(NetGlobulusSimiScanner, initWithNSString_, source)
}

NetGlobulusSimiScanner *create_NetGlobulusSimiScanner_initWithNSString_(NSString *source) {
  J2OBJC_CREATE_IMPL(NetGlobulusSimiScanner, initWithNSString_, source)
}

void NetGlobulusSimiScanner_scanToken(NetGlobulusSimiScanner *self) {
  jchar c = NetGlobulusSimiScanner_advance(self);
  switch (c) {
    case '(':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, LEFT_PAREN));
    break;
    case ')':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, RIGHT_PAREN));
    break;
    case '[':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, LEFT_BRACKET));
    break;
    case ']':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, RIGHT_BRACKET));
    break;
    case ',':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, COMMA));
    break;
    case '.':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, DOT));
    break;
    case ':':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, COLON));
    break;
    case '@':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, SELF));
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, DOT));
    break;
    case '?':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, NetGlobulusSimiScanner_matchWithChar_(self, '?') ? JreLoadEnum(NetGlobulusSimiTokenType, QUESTION_QUESTION) : JreLoadEnum(NetGlobulusSimiTokenType, QUESTION));
    break;
    case '=':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, NetGlobulusSimiScanner_matchWithChar_(self, '=') ? JreLoadEnum(NetGlobulusSimiTokenType, EQUAL_EQUAL) : JreLoadEnum(NetGlobulusSimiTokenType, EQUAL));
    break;
    case '<':
    {
      if (NetGlobulusSimiScanner_matchWithChar_(self, '>')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, LESS_GREATER));
      }
      else if (NetGlobulusSimiScanner_matchWithChar_(self, '=')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, LESS_EQUAL));
      }
      else {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, LESS));
      }
    }
    break;
    case '!':
    {
      if (NetGlobulusSimiScanner_matchWithChar_(self, '!')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, BANG_BANG));
      }
      else if (NetGlobulusSimiScanner_matchWithChar_(self, '=')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, BANG_EQUAL));
      }
      else {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, BANG));
      }
    }
    break;
    case '>':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, NetGlobulusSimiScanner_matchWithChar_(self, '=') ? JreLoadEnum(NetGlobulusSimiTokenType, GREATER_EQUAL) : JreLoadEnum(NetGlobulusSimiTokenType, GREATER));
    break;
    case '+':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, NetGlobulusSimiScanner_matchWithChar_(self, '=') ? JreLoadEnum(NetGlobulusSimiTokenType, PLUS_EQUAL) : JreLoadEnum(NetGlobulusSimiTokenType, PLUS));
    break;
    case '-':
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, NetGlobulusSimiScanner_matchWithChar_(self, '=') ? JreLoadEnum(NetGlobulusSimiTokenType, MINUS_EQUAL) : JreLoadEnum(NetGlobulusSimiTokenType, MINUS));
    break;
    case '/':
    {
      if (NetGlobulusSimiScanner_matchWithChar_(self, '/')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, SLASH_SLASH));
      }
      else if (NetGlobulusSimiScanner_matchWithChar_(self, '=')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, SLASH_EQUAL));
      }
      else {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, SLASH));
      }
    }
    break;
    case '*':
    {
      if (NetGlobulusSimiScanner_matchWithChar_(self, '*')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, STAR_STAR));
      }
      else if (NetGlobulusSimiScanner_matchWithChar_(self, '=')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, STAR_EQUAL));
      }
      else {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, STAR));
      }
    }
    break;
    case '%':
    {
      if (NetGlobulusSimiScanner_matchWithChar_(self, '%')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, MOD_MOD));
      }
      else if (NetGlobulusSimiScanner_matchWithChar_(self, '=')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, MOD_EQUAL));
      }
      else {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, MOD));
      }
    }
    break;
    case '$':
    {
      if (NetGlobulusSimiScanner_matchWithChar_(self, '[')) {
        NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, DOLLAR_LEFT_BRACKET));
      }
      else {
        NetGlobulusSimiScanner_identifier(self);
      }
    }
    break;
    case '#':
    while (NetGlobulusSimiScanner_peek(self) != 0x000a && !NetGlobulusSimiScanner_isAtEnd(self)) NetGlobulusSimiScanner_advance(self);
    break;
    case '\\':
    if (NetGlobulusSimiScanner_matchWithChar_(self, 0x000a)) {
      self->line_++;
    }
    break;
    case ' ':
    case 0x000d:
    case 0x0009:
    break;
    case 0x000a:
    self->line_++;
    NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, NEWLINE));
    break;
    default:
    if (NetGlobulusSimiScanner_isStringDelimWithChar_(self, c)) {
      [self stringWithChar:c];
    }
    else if (NetGlobulusSimiScanner_isDigitWithChar_(self, c)) {
      NetGlobulusSimiScanner_number(self);
    }
    else if (NetGlobulusSimiScanner_isAlphaWithChar_(self, c)) {
      NetGlobulusSimiScanner_identifier(self);
    }
    else {
      [((NetGlobulusSimiErrorHub *) nil_chk(NetGlobulusSimiErrorHub_sharedInstance())) errorWithInt:self->line_ withNSString:@"Unexpected character."];
    }
    break;
  }
}

void NetGlobulusSimiScanner_identifier(NetGlobulusSimiScanner *self) {
  while (NetGlobulusSimiScanner_isAlphaNumericWithChar_(self, NetGlobulusSimiScanner_peek(self))) NetGlobulusSimiScanner_advance(self);
  NSString *text = [((NSString *) nil_chk(self->source_)) java_substring:self->start_ endIndex:self->current_];
  NetGlobulusSimiTokenType *type = [((id<JavaUtilMap>) nil_chk(NetGlobulusSimiScanner_keywords)) getWithId:text];
  if (type == JreLoadEnum(NetGlobulusSimiTokenType, NOT) && NetGlobulusSimiScanner_matchPeekWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, IN))) {
    type = JreLoadEnum(NetGlobulusSimiTokenType, NOTIN);
  }
  else if (type == JreLoadEnum(NetGlobulusSimiTokenType, IS) && NetGlobulusSimiScanner_matchPeekWithNetGlobulusSimiTokenType_(self, JreLoadEnum(NetGlobulusSimiTokenType, NOT))) {
    type = JreLoadEnum(NetGlobulusSimiTokenType, ISNOT);
  }
  else if (type == nil) {
    type = JreLoadEnum(NetGlobulusSimiTokenType, IDENTIFIER);
  }
  NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(self, type);
}

void NetGlobulusSimiScanner_number(NetGlobulusSimiScanner *self) {
  while (NetGlobulusSimiScanner_isDigitOrUnderscoreWithChar_(self, NetGlobulusSimiScanner_peek(self))) NetGlobulusSimiScanner_advance(self);
  if (NetGlobulusSimiScanner_peek(self) == '.' && NetGlobulusSimiScanner_isDigitWithChar_(self, NetGlobulusSimiScanner_peekNext(self))) {
    NetGlobulusSimiScanner_advance(self);
    while (NetGlobulusSimiScanner_isDigitOrUnderscoreWithChar_(self, NetGlobulusSimiScanner_peek(self))) NetGlobulusSimiScanner_advance(self);
  }
  if (NetGlobulusSimiScanner_peek(self) == 'e' || NetGlobulusSimiScanner_peek(self) == 'E') {
    if (NetGlobulusSimiScanner_isDigitWithChar_(self, NetGlobulusSimiScanner_peekNext(self))) {
      NetGlobulusSimiScanner_advance(self);
    }
    else if (NetGlobulusSimiScanner_peekNext(self) == '+' || NetGlobulusSimiScanner_peekNext(self) == '-') {
      NetGlobulusSimiScanner_advance(self);
      NetGlobulusSimiScanner_advance(self);
    }
    else {
      [((NetGlobulusSimiErrorHub *) nil_chk(NetGlobulusSimiErrorHub_sharedInstance())) errorWithInt:self->line_ withNSString:@"Expected a digit or + or - after E!"];
    }
    while (NetGlobulusSimiScanner_isDigitOrUnderscoreWithChar_(self, NetGlobulusSimiScanner_peek(self))) NetGlobulusSimiScanner_advance(self);
  }
  NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_withNetGlobulusSimiSimiValue_(self, JreLoadEnum(NetGlobulusSimiTokenType, NUMBER), new_NetGlobulusSimiSimiValue_Number_initWithDouble_(JavaLangDouble_parseDoubleWithNSString_([((NSString *) nil_chk([((NSString *) nil_chk(self->source_)) java_substring:self->start_ endIndex:self->current_])) java_replace:@"_" withSequence:@""])));
}

NSString *NetGlobulusSimiScanner_escapedStringWithInt_withInt_(NetGlobulusSimiScanner *self, jint start, jint stop) {
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(self->source_)) java_substring:start endIndex:stop])) java_replace:@"\\n" withSequence:@"\n"])) java_replace:@"\\t" withSequence:@"\t"];
}

NSString *NetGlobulusSimiScanner_keywordStringWithNetGlobulusSimiTokenType_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type) {
  for (NSString * __strong s in nil_chk([((id<JavaUtilMap>) nil_chk(NetGlobulusSimiScanner_keywords)) keySet])) {
    if ([NetGlobulusSimiScanner_keywords getWithId:s] == type) {
      return s;
    }
  }
  return nil;
}

jboolean NetGlobulusSimiScanner_matchPeekWithNetGlobulusSimiTokenType_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type) {
  NSString *keyword = NetGlobulusSimiScanner_keywordStringWithNetGlobulusSimiTokenType_(self, type);
  if (keyword == nil) {
    return false;
  }
  jint len = [keyword java_length];
  jint end = self->current_ + len + 1;
  if (end < [((NSString *) nil_chk(self->source_)) java_length] && [((NSString *) nil_chk([self->source_ java_substring:self->current_ + 1 endIndex:end])) isEqual:keyword]) {
    self->current_ = end;
    return true;
  }
  return false;
}

jboolean NetGlobulusSimiScanner_matchWithChar_(NetGlobulusSimiScanner *self, jchar expected) {
  if (NetGlobulusSimiScanner_isAtEnd(self)) return false;
  if ([((NSString *) nil_chk(self->source_)) charAtWithInt:self->current_] != expected) return false;
  self->current_++;
  return true;
}

jchar NetGlobulusSimiScanner_peek(NetGlobulusSimiScanner *self) {
  if (NetGlobulusSimiScanner_isAtEnd(self)) return 0x0000;
  return [((NSString *) nil_chk(self->source_)) charAtWithInt:self->current_];
}

jchar NetGlobulusSimiScanner_peekNext(NetGlobulusSimiScanner *self) {
  if (self->current_ + 1 >= [((NSString *) nil_chk(self->source_)) java_length]) return 0x0000;
  return [self->source_ charAtWithInt:self->current_ + 1];
}

jboolean NetGlobulusSimiScanner_isAlphaWithChar_(NetGlobulusSimiScanner *self, jchar c) {
  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == '$';
}

jboolean NetGlobulusSimiScanner_isAlphaNumericWithChar_(NetGlobulusSimiScanner *self, jchar c) {
  return NetGlobulusSimiScanner_isAlphaWithChar_(self, c) || NetGlobulusSimiScanner_isDigitWithChar_(self, c);
}

jboolean NetGlobulusSimiScanner_isDigitWithChar_(NetGlobulusSimiScanner *self, jchar c) {
  return c >= '0' && c <= '9';
}

jboolean NetGlobulusSimiScanner_isDigitOrUnderscoreWithChar_(NetGlobulusSimiScanner *self, jchar c) {
  return NetGlobulusSimiScanner_isDigitWithChar_(self, c) || c == '_';
}

jboolean NetGlobulusSimiScanner_isStringDelimWithChar_(NetGlobulusSimiScanner *self, jchar c) {
  return c == '"' || c == '\'';
}

jboolean NetGlobulusSimiScanner_isAtEnd(NetGlobulusSimiScanner *self) {
  return self->current_ >= [((NSString *) nil_chk(self->source_)) java_length];
}

jchar NetGlobulusSimiScanner_advance(NetGlobulusSimiScanner *self) {
  self->current_++;
  return [((NSString *) nil_chk(self->source_)) charAtWithInt:self->current_ - 1];
}

void NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type) {
  NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_withNetGlobulusSimiSimiValue_(self, type, nil);
}

void NetGlobulusSimiScanner_addTokenWithNetGlobulusSimiTokenType_withNetGlobulusSimiSimiValue_(NetGlobulusSimiScanner *self, NetGlobulusSimiTokenType *type, NetGlobulusSimiSimiValue *literal) {
  NSString *text = [((NSString *) nil_chk(self->source_)) java_substring:self->start_ endIndex:self->current_];
  [((id<JavaUtilList>) nil_chk(self->tokens_)) addWithId:new_NetGlobulusSimiToken_initWithNetGlobulusSimiTokenType_withNSString_withNetGlobulusSimiSimiValue_withInt_(type, text, literal, self->line_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetGlobulusSimiScanner)
