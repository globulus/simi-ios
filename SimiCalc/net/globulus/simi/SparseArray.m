//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SparseArray.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/System.h"
#include "SparseArray.h"

@interface NetGlobulusSimiSparseArray () {
 @public
  jboolean mGarbage_;
  IOSIntArray *mKeys_;
  IOSObjectArray *mValues_;
  jint mSize_;
}

- (void)gc;

+ (jint)binarySearchWithIntArray:(IOSIntArray *)a
                         withInt:(jint)start
                         withInt:(jint)len
                         withInt:(jint)key;

@end

J2OBJC_FIELD_SETTER(NetGlobulusSimiSparseArray, mKeys_, IOSIntArray *)
J2OBJC_FIELD_SETTER(NetGlobulusSimiSparseArray, mValues_, IOSObjectArray *)

inline id NetGlobulusSimiSparseArray_get_DELETED(void);
static id NetGlobulusSimiSparseArray_DELETED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetGlobulusSimiSparseArray, DELETED, id)

__attribute__((unused)) static void NetGlobulusSimiSparseArray_gc(NetGlobulusSimiSparseArray *self);

__attribute__((unused)) static jint NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint start, jint len, jint key);

J2OBJC_INITIALIZED_DEFN(NetGlobulusSimiSparseArray)

@implementation NetGlobulusSimiSparseArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetGlobulusSimiSparseArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialCapacity {
  NetGlobulusSimiSparseArray_initWithInt_(self, initialCapacity);
  return self;
}

- (NetGlobulusSimiSparseArray *)java_clone {
  NetGlobulusSimiSparseArray *clone = nil;
  @try {
    clone = (NetGlobulusSimiSparseArray *) cast_chk([super java_clone], [NetGlobulusSimiSparseArray class]);
    ((NetGlobulusSimiSparseArray *) nil_chk(clone))->mKeys_ = [((IOSIntArray *) nil_chk(mKeys_)) java_clone];
    clone->mValues_ = [((IOSObjectArray *) nil_chk(mValues_)) java_clone];
  }
  @catch (JavaLangCloneNotSupportedException *cnse) {
  }
  return clone;
}

- (id)getWithInt:(jint)key {
  return [self getWithInt:key withId:nil];
}

- (id)getWithInt:(jint)key
          withId:(id)valueIfKeyNotFound {
  jint i = NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(mKeys_, 0, mSize_, key);
  if (i < 0 || IOSObjectArray_Get(nil_chk(mValues_), i) == NetGlobulusSimiSparseArray_DELETED) {
    return valueIfKeyNotFound;
  }
  else {
    return IOSObjectArray_Get(nil_chk(mValues_), i);
  }
}

- (void)delete__WithInt:(jint)key {
  jint i = NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(mKeys_, 0, mSize_, key);
  if (i >= 0) {
    if (IOSObjectArray_Get(nil_chk(mValues_), i) != NetGlobulusSimiSparseArray_DELETED) {
      (void) IOSObjectArray_Set(mValues_, i, NetGlobulusSimiSparseArray_DELETED);
      mGarbage_ = true;
    }
  }
}

- (void)removeWithInt:(jint)key {
  [self delete__WithInt:key];
}

- (void)removeAtWithInt:(jint)index {
  if (index >= ((IOSObjectArray *) nil_chk(mValues_))->size_) {
    return;
  }
  if (IOSObjectArray_Get(mValues_, index) != NetGlobulusSimiSparseArray_DELETED) {
    (void) IOSObjectArray_Set(mValues_, index, NetGlobulusSimiSparseArray_DELETED);
    mGarbage_ = true;
  }
}

- (void)gc {
  NetGlobulusSimiSparseArray_gc(self);
}

- (void)putWithInt:(jint)key
            withId:(id)value {
  jint i = NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(mKeys_, 0, mSize_, key);
  if (i >= 0) {
    (void) IOSObjectArray_Set(nil_chk(mValues_), i, value);
  }
  else {
    i = ~i;
    if (i < mSize_ && IOSObjectArray_Get(nil_chk(mValues_), i) == NetGlobulusSimiSparseArray_DELETED) {
      *IOSIntArray_GetRef(nil_chk(mKeys_), i) = key;
      (void) IOSObjectArray_Set(nil_chk(mValues_), i, value);
      return;
    }
    if (mGarbage_ && mSize_ >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
      NetGlobulusSimiSparseArray_gc(self);
      i = ~NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(mKeys_, 0, mSize_, key);
    }
    if (mSize_ >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
      jint n = NetGlobulusSimiSparseArray_idealIntArraySizeWithInt_(mSize_ + 1);
      IOSIntArray *nkeys = [IOSIntArray newArrayWithLength:n];
      IOSObjectArray *nvalues = [IOSObjectArray newArrayWithLength:n type:NSObject_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, 0, nkeys, 0, ((IOSIntArray *) nil_chk(mKeys_))->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, 0, nvalues, 0, ((IOSObjectArray *) nil_chk(mValues_))->size_);
      mKeys_ = nkeys;
      mValues_ = nvalues;
    }
    if (mSize_ - i != 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, i, mKeys_, i + 1, mSize_ - i);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, i, mValues_, i + 1, mSize_ - i);
    }
    *IOSIntArray_GetRef(nil_chk(mKeys_), i) = key;
    (void) IOSObjectArray_Set(nil_chk(mValues_), i, value);
    mSize_++;
  }
}

- (jint)size {
  if (mGarbage_) {
    NetGlobulusSimiSparseArray_gc(self);
  }
  return mSize_;
}

- (jint)keyAtWithInt:(jint)index {
  if (mGarbage_) {
    NetGlobulusSimiSparseArray_gc(self);
  }
  return IOSIntArray_Get(nil_chk(mKeys_), index);
}

- (id)valueAtWithInt:(jint)index {
  if (mGarbage_) {
    NetGlobulusSimiSparseArray_gc(self);
  }
  return IOSObjectArray_Get(nil_chk(mValues_), index);
}

- (void)setValueAtWithInt:(jint)index
                   withId:(id)value {
  if (mGarbage_) {
    NetGlobulusSimiSparseArray_gc(self);
  }
  (void) IOSObjectArray_Set(nil_chk(mValues_), index, value);
}

- (jint)indexOfKeyWithInt:(jint)key {
  if (mGarbage_) {
    NetGlobulusSimiSparseArray_gc(self);
  }
  return NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(mKeys_, 0, mSize_, key);
}

- (jint)indexOfValueWithId:(id)value {
  if (mGarbage_) {
    NetGlobulusSimiSparseArray_gc(self);
  }
  for (jint i = 0; i < mSize_; i++) if (IOSObjectArray_Get(nil_chk(mValues_), i) == value) return i;
  return -1;
}

- (void)clear {
  jint n = mSize_;
  IOSObjectArray *values = mValues_;
  for (jint i = 0; i < n; i++) {
    (void) IOSObjectArray_Set(nil_chk(values), i, nil);
  }
  mSize_ = 0;
  mGarbage_ = false;
}

- (void)appendWithInt:(jint)key
               withId:(id)value {
  if (mSize_ != 0 && key <= IOSIntArray_Get(nil_chk(mKeys_), mSize_ - 1)) {
    [self putWithInt:key withId:value];
    return;
  }
  if (mGarbage_ && mSize_ >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
    NetGlobulusSimiSparseArray_gc(self);
  }
  jint pos = mSize_;
  if (pos >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
    jint n = NetGlobulusSimiSparseArray_idealIntArraySizeWithInt_(pos + 1);
    IOSIntArray *nkeys = [IOSIntArray newArrayWithLength:n];
    IOSObjectArray *nvalues = [IOSObjectArray newArrayWithLength:n type:NSObject_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, 0, nkeys, 0, ((IOSIntArray *) nil_chk(mKeys_))->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, 0, nvalues, 0, ((IOSObjectArray *) nil_chk(mValues_))->size_);
    mKeys_ = nkeys;
    mValues_ = nvalues;
  }
  *IOSIntArray_GetRef(mKeys_, pos) = key;
  (void) IOSObjectArray_Set(nil_chk(mValues_), pos, value);
  mSize_ = pos + 1;
}

+ (jint)binarySearchWithIntArray:(IOSIntArray *)a
                         withInt:(jint)start
                         withInt:(jint)len
                         withInt:(jint)key {
  return NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(a, start, len, key);
}

+ (jint)idealByteArraySizeWithInt:(jint)need {
  return NetGlobulusSimiSparseArray_idealByteArraySizeWithInt_(need);
}

+ (jint)idealIntArraySizeWithInt:(jint)need {
  return NetGlobulusSimiSparseArray_idealIntArraySizeWithInt_(need);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetGlobulusSimiSparseArray;", 0x1, 1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 0, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 0, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 14, 5, -1, 11, -1, -1 },
    { NULL, "I", 0x1, 15, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 5, -1, 11, -1, -1 },
    { NULL, "I", 0xa, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 22, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 23, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getWithInt:);
  methods[4].selector = @selector(getWithInt:withId:);
  methods[5].selector = @selector(delete__WithInt:);
  methods[6].selector = @selector(removeWithInt:);
  methods[7].selector = @selector(removeAtWithInt:);
  methods[8].selector = @selector(gc);
  methods[9].selector = @selector(putWithInt:withId:);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(keyAtWithInt:);
  methods[12].selector = @selector(valueAtWithInt:);
  methods[13].selector = @selector(setValueAtWithInt:withId:);
  methods[14].selector = @selector(indexOfKeyWithInt:);
  methods[15].selector = @selector(indexOfValueWithId:);
  methods[16].selector = @selector(clear);
  methods[17].selector = @selector(appendWithInt:withId:);
  methods[18].selector = @selector(binarySearchWithIntArray:withInt:withInt:withInt:);
  methods[19].selector = @selector(idealByteArraySizeWithInt:);
  methods[20].selector = @selector(idealIntArraySizeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DELETED", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "mGarbage_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mKeys_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mValues_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "clone", "()LSparseArray<TE;>;", "get", "(I)TE;", "ILNSObject;", "(ITE;)TE;", "delete", "remove", "removeAt", "put", "(ITE;)V", "keyAt", "valueAt", "setValueAt", "indexOfKey", "indexOfValue", "LNSObject;", "(TE;)I", "append", "binarySearch", "[IIII", "idealByteArraySize", "idealIntArraySize", &NetGlobulusSimiSparseArray_DELETED, "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _NetGlobulusSimiSparseArray = { "SparseArray", "net.globulus.simi", ptrTable, methods, fields, 7, 0x1, 21, 5, -1, -1, -1, 25, -1 };
  return &_NetGlobulusSimiSparseArray;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

+ (void)initialize {
  if (self == [NetGlobulusSimiSparseArray class]) {
    NetGlobulusSimiSparseArray_DELETED = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(NetGlobulusSimiSparseArray)
  }
}

@end

void NetGlobulusSimiSparseArray_init(NetGlobulusSimiSparseArray *self) {
  NetGlobulusSimiSparseArray_initWithInt_(self, 10);
}

NetGlobulusSimiSparseArray *new_NetGlobulusSimiSparseArray_init() {
  J2OBJC_NEW_IMPL(NetGlobulusSimiSparseArray, init)
}

NetGlobulusSimiSparseArray *create_NetGlobulusSimiSparseArray_init() {
  J2OBJC_CREATE_IMPL(NetGlobulusSimiSparseArray, init)
}

void NetGlobulusSimiSparseArray_initWithInt_(NetGlobulusSimiSparseArray *self, jint initialCapacity) {
  NSObject_init(self);
  self->mGarbage_ = false;
  initialCapacity = NetGlobulusSimiSparseArray_idealIntArraySizeWithInt_(initialCapacity);
  self->mKeys_ = [IOSIntArray newArrayWithLength:initialCapacity];
  self->mValues_ = [IOSObjectArray newArrayWithLength:initialCapacity type:NSObject_class_()];
  self->mSize_ = 0;
}

NetGlobulusSimiSparseArray *new_NetGlobulusSimiSparseArray_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(NetGlobulusSimiSparseArray, initWithInt_, initialCapacity)
}

NetGlobulusSimiSparseArray *create_NetGlobulusSimiSparseArray_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(NetGlobulusSimiSparseArray, initWithInt_, initialCapacity)
}

void NetGlobulusSimiSparseArray_gc(NetGlobulusSimiSparseArray *self) {
  jint n = self->mSize_;
  jint o = 0;
  IOSIntArray *keys = self->mKeys_;
  IOSObjectArray *values = self->mValues_;
  for (jint i = 0; i < n; i++) {
    id val = IOSObjectArray_Get(nil_chk(values), i);
    if (val != NetGlobulusSimiSparseArray_DELETED) {
      if (i != o) {
        *IOSIntArray_GetRef(nil_chk(keys), o) = IOSIntArray_Get(keys, i);
        (void) IOSObjectArray_Set(values, o, val);
        (void) IOSObjectArray_Set(values, i, nil);
      }
      o++;
    }
  }
  self->mGarbage_ = false;
  self->mSize_ = o;
}

jint NetGlobulusSimiSparseArray_binarySearchWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint start, jint len, jint key) {
  NetGlobulusSimiSparseArray_initialize();
  jint high = start + len;
  jint low = start - 1;
  jint guess;
  while (high - low > 1) {
    guess = (high + low) / 2;
    if (IOSIntArray_Get(nil_chk(a), guess) < key) low = guess;
    else high = guess;
  }
  if (high == start + len) return ~(start + len);
  else if (IOSIntArray_Get(nil_chk(a), high) == key) return high;
  else return ~high;
}

jint NetGlobulusSimiSparseArray_idealByteArraySizeWithInt_(jint need) {
  NetGlobulusSimiSparseArray_initialize();
  for (jint i = 4; i < 32; i++) if (need <= (JreLShift32(1, i)) - 12) return (JreLShift32(1, i)) - 12;
  return need;
}

jint NetGlobulusSimiSparseArray_idealIntArraySizeWithInt_(jint need) {
  NetGlobulusSimiSparseArray_initialize();
  return NetGlobulusSimiSparseArray_idealByteArraySizeWithInt_(need * 4) / 4;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetGlobulusSimiSparseArray)
