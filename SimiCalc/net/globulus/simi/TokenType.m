//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/TokenType.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "Codifiable.h"
#include "TokenType.h"

__attribute__((unused)) static void SMTokenType_initWithNSString_withInt_(SMTokenType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static SMTokenType *new_SMTokenType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(SMTokenType)

SMTokenType *SMTokenType_values_[70];

@implementation SMTokenType

+ (SMTokenType *)LEFT_PAREN {
  return JreEnum(SMTokenType, LEFT_PAREN);
}

+ (SMTokenType *)RIGHT_PAREN {
  return JreEnum(SMTokenType, RIGHT_PAREN);
}

+ (SMTokenType *)LEFT_BRACKET {
  return JreEnum(SMTokenType, LEFT_BRACKET);
}

+ (SMTokenType *)RIGHT_BRACKET {
  return JreEnum(SMTokenType, RIGHT_BRACKET);
}

+ (SMTokenType *)COMMA {
  return JreEnum(SMTokenType, COMMA);
}

+ (SMTokenType *)DOT {
  return JreEnum(SMTokenType, DOT);
}

+ (SMTokenType *)COLON {
  return JreEnum(SMTokenType, COLON);
}

+ (SMTokenType *)NEWLINE {
  return JreEnum(SMTokenType, NEWLINE);
}

+ (SMTokenType *)BANG {
  return JreEnum(SMTokenType, BANG);
}

+ (SMTokenType *)BANG_BANG {
  return JreEnum(SMTokenType, BANG_BANG);
}

+ (SMTokenType *)BANG_EQUAL {
  return JreEnum(SMTokenType, BANG_EQUAL);
}

+ (SMTokenType *)EQUAL {
  return JreEnum(SMTokenType, EQUAL);
}

+ (SMTokenType *)EQUAL_EQUAL {
  return JreEnum(SMTokenType, EQUAL_EQUAL);
}

+ (SMTokenType *)GREATER {
  return JreEnum(SMTokenType, GREATER);
}

+ (SMTokenType *)GREATER_EQUAL {
  return JreEnum(SMTokenType, GREATER_EQUAL);
}

+ (SMTokenType *)LESS {
  return JreEnum(SMTokenType, LESS);
}

+ (SMTokenType *)LESS_EQUAL {
  return JreEnum(SMTokenType, LESS_EQUAL);
}

+ (SMTokenType *)LESS_GREATER {
  return JreEnum(SMTokenType, LESS_GREATER);
}

+ (SMTokenType *)PLUS {
  return JreEnum(SMTokenType, PLUS);
}

+ (SMTokenType *)PLUS_EQUAL {
  return JreEnum(SMTokenType, PLUS_EQUAL);
}

+ (SMTokenType *)MINUS {
  return JreEnum(SMTokenType, MINUS);
}

+ (SMTokenType *)MINUS_EQUAL {
  return JreEnum(SMTokenType, MINUS_EQUAL);
}

+ (SMTokenType *)STAR {
  return JreEnum(SMTokenType, STAR);
}

+ (SMTokenType *)STAR_STAR {
  return JreEnum(SMTokenType, STAR_STAR);
}

+ (SMTokenType *)STAR_EQUAL {
  return JreEnum(SMTokenType, STAR_EQUAL);
}

+ (SMTokenType *)SLASH {
  return JreEnum(SMTokenType, SLASH);
}

+ (SMTokenType *)SLASH_SLASH {
  return JreEnum(SMTokenType, SLASH_SLASH);
}

+ (SMTokenType *)SLASH_EQUAL {
  return JreEnum(SMTokenType, SLASH_EQUAL);
}

+ (SMTokenType *)MOD {
  return JreEnum(SMTokenType, MOD);
}

+ (SMTokenType *)MOD_MOD {
  return JreEnum(SMTokenType, MOD_MOD);
}

+ (SMTokenType *)MOD_EQUAL {
  return JreEnum(SMTokenType, MOD_EQUAL);
}

+ (SMTokenType *)DOLLAR_LEFT_BRACKET {
  return JreEnum(SMTokenType, DOLLAR_LEFT_BRACKET);
}

+ (SMTokenType *)QUESTION {
  return JreEnum(SMTokenType, QUESTION);
}

+ (SMTokenType *)QUESTION_QUESTION {
  return JreEnum(SMTokenType, QUESTION_QUESTION);
}

+ (SMTokenType *)IDENTIFIER {
  return JreEnum(SMTokenType, IDENTIFIER);
}

+ (SMTokenType *)STRING {
  return JreEnum(SMTokenType, STRING);
}

+ (SMTokenType *)NUMBER {
  return JreEnum(SMTokenType, NUMBER);
}

+ (SMTokenType *)AND {
  return JreEnum(SMTokenType, AND);
}

+ (SMTokenType *)BREAK {
  return JreEnum(SMTokenType, BREAK);
}

+ (SMTokenType *)CLASS {
  return JreEnum(SMTokenType, CLASS);
}

+ (SMTokenType *)CONTINUE {
  return JreEnum(SMTokenType, CONTINUE);
}

+ (SMTokenType *)ELSE {
  return JreEnum(SMTokenType, ELSE);
}

+ (SMTokenType *)FALSE_ {
  return JreEnum(SMTokenType, FALSE);
}

+ (SMTokenType *)DEF {
  return JreEnum(SMTokenType, DEF);
}

+ (SMTokenType *)FOR {
  return JreEnum(SMTokenType, FOR);
}

+ (SMTokenType *)RESCUE {
  return JreEnum(SMTokenType, RESCUE);
}

+ (SMTokenType *)IF {
  return JreEnum(SMTokenType, IF);
}

+ (SMTokenType *)NIL {
  return JreEnum(SMTokenType, NIL);
}

+ (SMTokenType *)OR {
  return JreEnum(SMTokenType, OR);
}

+ (SMTokenType *)PRINT {
  return JreEnum(SMTokenType, PRINT);
}

+ (SMTokenType *)RETURN {
  return JreEnum(SMTokenType, RETURN);
}

+ (SMTokenType *)SUPER {
  return JreEnum(SMTokenType, SUPER);
}

+ (SMTokenType *)SELF {
  return JreEnum(SMTokenType, SELF);
}

+ (SMTokenType *)TRUE_ {
  return JreEnum(SMTokenType, TRUE);
}

+ (SMTokenType *)WHILE {
  return JreEnum(SMTokenType, WHILE);
}

+ (SMTokenType *)PASS {
  return JreEnum(SMTokenType, PASS);
}

+ (SMTokenType *)IN {
  return JreEnum(SMTokenType, IN);
}

+ (SMTokenType *)IS {
  return JreEnum(SMTokenType, IS);
}

+ (SMTokenType *)NOT {
  return JreEnum(SMTokenType, NOT);
}

+ (SMTokenType *)ELSIF {
  return JreEnum(SMTokenType, ELSIF);
}

+ (SMTokenType *)END {
  return JreEnum(SMTokenType, END);
}

+ (SMTokenType *)ISNOT {
  return JreEnum(SMTokenType, ISNOT);
}

+ (SMTokenType *)NOTIN {
  return JreEnum(SMTokenType, NOTIN);
}

+ (SMTokenType *)NATIVE {
  return JreEnum(SMTokenType, NATIVE);
}

+ (SMTokenType *)IMPORT {
  return JreEnum(SMTokenType, IMPORT);
}

+ (SMTokenType *)YIELD {
  return JreEnum(SMTokenType, YIELD);
}

+ (SMTokenType *)WHEN {
  return JreEnum(SMTokenType, WHEN);
}

+ (SMTokenType *)GU {
  return JreEnum(SMTokenType, GU);
}

+ (SMTokenType *)IVIC {
  return JreEnum(SMTokenType, IVIC);
}

+ (SMTokenType *)EOF_ {
  return JreEnum(SMTokenType, EOF);
}

- (NSString *)toCode {
  switch ([self ordinal]) {
    case SMTokenType_Enum_LEFT_PAREN:
    return @"(";
    case SMTokenType_Enum_RIGHT_PAREN:
    return @")";
    case SMTokenType_Enum_LEFT_BRACKET:
    return @"[";
    case SMTokenType_Enum_RIGHT_BRACKET:
    return @"]";
    case SMTokenType_Enum_COMMA:
    return @",";
    case SMTokenType_Enum_DOT:
    return @".";
    case SMTokenType_Enum_COLON:
    return @":";
    case SMTokenType_Enum_NEWLINE:
    return @"\n";
    case SMTokenType_Enum_BANG:
    return @"!";
    case SMTokenType_Enum_BANG_BANG:
    return @"!!";
    case SMTokenType_Enum_BANG_EQUAL:
    return @"!=";
    case SMTokenType_Enum_EQUAL:
    return @"=";
    case SMTokenType_Enum_EQUAL_EQUAL:
    return @"==";
    case SMTokenType_Enum_GREATER:
    return @">";
    case SMTokenType_Enum_GREATER_EQUAL:
    return @">=";
    case SMTokenType_Enum_LESS:
    return @"<";
    case SMTokenType_Enum_LESS_EQUAL:
    return @"<=";
    case SMTokenType_Enum_LESS_GREATER:
    return @"<>";
    case SMTokenType_Enum_PLUS:
    return @"+";
    case SMTokenType_Enum_PLUS_EQUAL:
    return @"+=";
    case SMTokenType_Enum_MINUS:
    return @"-";
    case SMTokenType_Enum_MINUS_EQUAL:
    return @"-=";
    case SMTokenType_Enum_STAR:
    return @"*";
    case SMTokenType_Enum_STAR_STAR:
    return @"**";
    case SMTokenType_Enum_STAR_EQUAL:
    return @"*=";
    case SMTokenType_Enum_SLASH:
    return @"/";
    case SMTokenType_Enum_SLASH_SLASH:
    return @"//";
    case SMTokenType_Enum_SLASH_EQUAL:
    return @"/=";
    case SMTokenType_Enum_MOD:
    return @"%";
    case SMTokenType_Enum_MOD_MOD:
    return @"%%";
    case SMTokenType_Enum_MOD_EQUAL:
    return @"%=";
    case SMTokenType_Enum_DOLLAR_LEFT_BRACKET:
    return @"$[";
    case SMTokenType_Enum_QUESTION:
    return @"?";
    case SMTokenType_Enum_QUESTION_QUESTION:
    return @"??";
    case SMTokenType_Enum_IDENTIFIER:
    case SMTokenType_Enum_STRING:
    case SMTokenType_Enum_NUMBER:
    case SMTokenType_Enum_EOF:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Shouldn't be used with toCode()");
    case SMTokenType_Enum_ISNOT:
    return @"is not";
    case SMTokenType_Enum_NOTIN:
    return @"not in";
    default:
    return [((NSString *) nil_chk([self description])) lowercaseString];
  }
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  if (ignoreFirst) {
    return [self toCode];
  }
  return JreStrcat("$$", SMCodifiable_getIndentationWithInt_(indentationLevel), [self toCode]);
}

+ (IOSObjectArray *)values {
  return SMTokenType_values();
}

+ (SMTokenType *)valueOfWithNSString:(NSString *)name {
  return SMTokenType_valueOfWithNSString_(name);
}

- (SMTokenType_Enum)toNSEnum {
  return (SMTokenType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LSMTokenType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMTokenType;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(toCode);
  methods[1].selector = @selector(toCodeWithInt:withBoolean:);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LEFT_PAREN", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RIGHT_PAREN", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "LEFT_BRACKET", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "RIGHT_BRACKET", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "COMMA", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "DOT", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "COLON", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "NEWLINE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "BANG", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "BANG_BANG", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "BANG_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "EQUAL_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "GREATER", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "GREATER_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "LESS", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "LESS_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "LESS_GREATER", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
    { "PLUS", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 22, -1, -1 },
    { "PLUS_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 23, -1, -1 },
    { "MINUS", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 24, -1, -1 },
    { "MINUS_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 25, -1, -1 },
    { "STAR", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 26, -1, -1 },
    { "STAR_STAR", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 27, -1, -1 },
    { "STAR_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 28, -1, -1 },
    { "SLASH", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 29, -1, -1 },
    { "SLASH_SLASH", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 30, -1, -1 },
    { "SLASH_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 31, -1, -1 },
    { "MOD", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 32, -1, -1 },
    { "MOD_MOD", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 33, -1, -1 },
    { "MOD_EQUAL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 34, -1, -1 },
    { "DOLLAR_LEFT_BRACKET", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 35, -1, -1 },
    { "QUESTION", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 36, -1, -1 },
    { "QUESTION_QUESTION", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 37, -1, -1 },
    { "IDENTIFIER", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 38, -1, -1 },
    { "STRING", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 39, -1, -1 },
    { "NUMBER", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 40, -1, -1 },
    { "AND", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 41, -1, -1 },
    { "BREAK", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 42, -1, -1 },
    { "CLASS", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 43, -1, -1 },
    { "CONTINUE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 44, -1, -1 },
    { "ELSE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 45, -1, -1 },
    { "FALSE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 46, -1, -1 },
    { "DEF", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 47, -1, -1 },
    { "FOR", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 48, -1, -1 },
    { "RESCUE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 49, -1, -1 },
    { "IF", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 50, -1, -1 },
    { "NIL", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 51, -1, -1 },
    { "OR", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 52, -1, -1 },
    { "PRINT", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 53, -1, -1 },
    { "RETURN", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 54, -1, -1 },
    { "SUPER", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 55, -1, -1 },
    { "SELF", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 56, -1, -1 },
    { "TRUE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 57, -1, -1 },
    { "WHILE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 58, -1, -1 },
    { "PASS", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 59, -1, -1 },
    { "IN", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 60, -1, -1 },
    { "IS", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 61, -1, -1 },
    { "NOT", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 62, -1, -1 },
    { "ELSIF", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 63, -1, -1 },
    { "END", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 64, -1, -1 },
    { "ISNOT", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 65, -1, -1 },
    { "NOTIN", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 66, -1, -1 },
    { "NATIVE", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 67, -1, -1 },
    { "IMPORT", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 68, -1, -1 },
    { "YIELD", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 69, -1, -1 },
    { "WHEN", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 70, -1, -1 },
    { "GU", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 71, -1, -1 },
    { "IVIC", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 72, -1, -1 },
    { "EOF", "LSMTokenType;", .constantValue.asLong = 0, 0x4019, -1, 73, -1, -1 },
  };
  static const void *ptrTable[] = { "toCode", "IZ", "valueOf", "LNSString;", &JreEnum(SMTokenType, LEFT_PAREN), &JreEnum(SMTokenType, RIGHT_PAREN), &JreEnum(SMTokenType, LEFT_BRACKET), &JreEnum(SMTokenType, RIGHT_BRACKET), &JreEnum(SMTokenType, COMMA), &JreEnum(SMTokenType, DOT), &JreEnum(SMTokenType, COLON), &JreEnum(SMTokenType, NEWLINE), &JreEnum(SMTokenType, BANG), &JreEnum(SMTokenType, BANG_BANG), &JreEnum(SMTokenType, BANG_EQUAL), &JreEnum(SMTokenType, EQUAL), &JreEnum(SMTokenType, EQUAL_EQUAL), &JreEnum(SMTokenType, GREATER), &JreEnum(SMTokenType, GREATER_EQUAL), &JreEnum(SMTokenType, LESS), &JreEnum(SMTokenType, LESS_EQUAL), &JreEnum(SMTokenType, LESS_GREATER), &JreEnum(SMTokenType, PLUS), &JreEnum(SMTokenType, PLUS_EQUAL), &JreEnum(SMTokenType, MINUS), &JreEnum(SMTokenType, MINUS_EQUAL), &JreEnum(SMTokenType, STAR), &JreEnum(SMTokenType, STAR_STAR), &JreEnum(SMTokenType, STAR_EQUAL), &JreEnum(SMTokenType, SLASH), &JreEnum(SMTokenType, SLASH_SLASH), &JreEnum(SMTokenType, SLASH_EQUAL), &JreEnum(SMTokenType, MOD), &JreEnum(SMTokenType, MOD_MOD), &JreEnum(SMTokenType, MOD_EQUAL), &JreEnum(SMTokenType, DOLLAR_LEFT_BRACKET), &JreEnum(SMTokenType, QUESTION), &JreEnum(SMTokenType, QUESTION_QUESTION), &JreEnum(SMTokenType, IDENTIFIER), &JreEnum(SMTokenType, STRING), &JreEnum(SMTokenType, NUMBER), &JreEnum(SMTokenType, AND), &JreEnum(SMTokenType, BREAK), &JreEnum(SMTokenType, CLASS), &JreEnum(SMTokenType, CONTINUE), &JreEnum(SMTokenType, ELSE), &JreEnum(SMTokenType, FALSE), &JreEnum(SMTokenType, DEF), &JreEnum(SMTokenType, FOR), &JreEnum(SMTokenType, RESCUE), &JreEnum(SMTokenType, IF), &JreEnum(SMTokenType, NIL), &JreEnum(SMTokenType, OR), &JreEnum(SMTokenType, PRINT), &JreEnum(SMTokenType, RETURN), &JreEnum(SMTokenType, SUPER), &JreEnum(SMTokenType, SELF), &JreEnum(SMTokenType, TRUE), &JreEnum(SMTokenType, WHILE), &JreEnum(SMTokenType, PASS), &JreEnum(SMTokenType, IN), &JreEnum(SMTokenType, IS), &JreEnum(SMTokenType, NOT), &JreEnum(SMTokenType, ELSIF), &JreEnum(SMTokenType, END), &JreEnum(SMTokenType, ISNOT), &JreEnum(SMTokenType, NOTIN), &JreEnum(SMTokenType, NATIVE), &JreEnum(SMTokenType, IMPORT), &JreEnum(SMTokenType, YIELD), &JreEnum(SMTokenType, WHEN), &JreEnum(SMTokenType, GU), &JreEnum(SMTokenType, IVIC), &JreEnum(SMTokenType, EOF), "Ljava/lang/Enum<LTokenType;>;LCodifiable;" };
  static const J2ObjcClassInfo _SMTokenType = { "TokenType", "net.globulus.simi", ptrTable, methods, fields, 7, 0x4010, 4, 70, -1, -1, -1, 74, -1 };
  return &_SMTokenType;
}

+ (void)initialize {
  if (self == [SMTokenType class]) {
    JreEnum(SMTokenType, LEFT_PAREN) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 0), 0);
    JreEnum(SMTokenType, RIGHT_PAREN) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 1), 1);
    JreEnum(SMTokenType, LEFT_BRACKET) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 2), 2);
    JreEnum(SMTokenType, RIGHT_BRACKET) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 3), 3);
    JreEnum(SMTokenType, COMMA) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 4), 4);
    JreEnum(SMTokenType, DOT) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 5), 5);
    JreEnum(SMTokenType, COLON) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 6), 6);
    JreEnum(SMTokenType, NEWLINE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 7), 7);
    JreEnum(SMTokenType, BANG) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 8), 8);
    JreEnum(SMTokenType, BANG_BANG) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 9), 9);
    JreEnum(SMTokenType, BANG_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 10), 10);
    JreEnum(SMTokenType, EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 11), 11);
    JreEnum(SMTokenType, EQUAL_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 12), 12);
    JreEnum(SMTokenType, GREATER) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 13), 13);
    JreEnum(SMTokenType, GREATER_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 14), 14);
    JreEnum(SMTokenType, LESS) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 15), 15);
    JreEnum(SMTokenType, LESS_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 16), 16);
    JreEnum(SMTokenType, LESS_GREATER) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 17), 17);
    JreEnum(SMTokenType, PLUS) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 18), 18);
    JreEnum(SMTokenType, PLUS_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 19), 19);
    JreEnum(SMTokenType, MINUS) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 20), 20);
    JreEnum(SMTokenType, MINUS_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 21), 21);
    JreEnum(SMTokenType, STAR) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 22), 22);
    JreEnum(SMTokenType, STAR_STAR) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 23), 23);
    JreEnum(SMTokenType, STAR_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 24), 24);
    JreEnum(SMTokenType, SLASH) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 25), 25);
    JreEnum(SMTokenType, SLASH_SLASH) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 26), 26);
    JreEnum(SMTokenType, SLASH_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 27), 27);
    JreEnum(SMTokenType, MOD) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 28), 28);
    JreEnum(SMTokenType, MOD_MOD) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 29), 29);
    JreEnum(SMTokenType, MOD_EQUAL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 30), 30);
    JreEnum(SMTokenType, DOLLAR_LEFT_BRACKET) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 31), 31);
    JreEnum(SMTokenType, QUESTION) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 32), 32);
    JreEnum(SMTokenType, QUESTION_QUESTION) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 33), 33);
    JreEnum(SMTokenType, IDENTIFIER) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 34), 34);
    JreEnum(SMTokenType, STRING) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 35), 35);
    JreEnum(SMTokenType, NUMBER) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 36), 36);
    JreEnum(SMTokenType, AND) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 37), 37);
    JreEnum(SMTokenType, BREAK) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 38), 38);
    JreEnum(SMTokenType, CLASS) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 39), 39);
    JreEnum(SMTokenType, CONTINUE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 40), 40);
    JreEnum(SMTokenType, ELSE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 41), 41);
    JreEnum(SMTokenType, FALSE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 42), 42);
    JreEnum(SMTokenType, DEF) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 43), 43);
    JreEnum(SMTokenType, FOR) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 44), 44);
    JreEnum(SMTokenType, RESCUE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 45), 45);
    JreEnum(SMTokenType, IF) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 46), 46);
    JreEnum(SMTokenType, NIL) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 47), 47);
    JreEnum(SMTokenType, OR) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 48), 48);
    JreEnum(SMTokenType, PRINT) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 49), 49);
    JreEnum(SMTokenType, RETURN) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 50), 50);
    JreEnum(SMTokenType, SUPER) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 51), 51);
    JreEnum(SMTokenType, SELF) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 52), 52);
    JreEnum(SMTokenType, TRUE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 53), 53);
    JreEnum(SMTokenType, WHILE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 54), 54);
    JreEnum(SMTokenType, PASS) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 55), 55);
    JreEnum(SMTokenType, IN) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 56), 56);
    JreEnum(SMTokenType, IS) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 57), 57);
    JreEnum(SMTokenType, NOT) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 58), 58);
    JreEnum(SMTokenType, ELSIF) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 59), 59);
    JreEnum(SMTokenType, END) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 60), 60);
    JreEnum(SMTokenType, ISNOT) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 61), 61);
    JreEnum(SMTokenType, NOTIN) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 62), 62);
    JreEnum(SMTokenType, NATIVE) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 63), 63);
    JreEnum(SMTokenType, IMPORT) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 64), 64);
    JreEnum(SMTokenType, YIELD) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 65), 65);
    JreEnum(SMTokenType, WHEN) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 66), 66);
    JreEnum(SMTokenType, GU) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 67), 67);
    JreEnum(SMTokenType, IVIC) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 68), 68);
    JreEnum(SMTokenType, EOF) = new_SMTokenType_initWithNSString_withInt_(JreEnumConstantName(SMTokenType_class_(), 69), 69);
    J2OBJC_SET_INITIALIZED(SMTokenType)
  }
}

@end

void SMTokenType_initWithNSString_withInt_(SMTokenType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

SMTokenType *new_SMTokenType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(SMTokenType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *SMTokenType_values() {
  SMTokenType_initialize();
  return [IOSObjectArray arrayWithObjects:SMTokenType_values_ count:70 type:SMTokenType_class_()];
}

SMTokenType *SMTokenType_valueOfWithNSString_(NSString *name) {
  SMTokenType_initialize();
  for (int i = 0; i < 70; i++) {
    SMTokenType *e = SMTokenType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

SMTokenType *SMTokenType_fromOrdinal(NSUInteger ordinal) {
  SMTokenType_initialize();
  if (ordinal >= 70) {
    return nil;
  }
  return SMTokenType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMTokenType)
