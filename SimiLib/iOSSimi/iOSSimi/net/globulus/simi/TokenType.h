//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/TokenType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiTokenType")
#ifdef RESTRICT_NetGlobulusSimiTokenType
#define INCLUDE_ALL_NetGlobulusSimiTokenType 0
#else
#define INCLUDE_ALL_NetGlobulusSimiTokenType 1
#endif
#undef RESTRICT_NetGlobulusSimiTokenType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMTokenType_) && (INCLUDE_ALL_NetGlobulusSimiTokenType || defined(INCLUDE_SMTokenType))
#define SMTokenType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_NetGlobulusSimiCodifiable 1
#define INCLUDE_SMCodifiable 1
#include "Codifiable.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, SMTokenType_Enum) {
  SMTokenType_Enum_LEFT_PAREN = 0,
  SMTokenType_Enum_RIGHT_PAREN = 1,
  SMTokenType_Enum_LEFT_BRACKET = 2,
  SMTokenType_Enum_RIGHT_BRACKET = 3,
  SMTokenType_Enum_COMMA = 4,
  SMTokenType_Enum_DOT = 5,
  SMTokenType_Enum_COLON = 6,
  SMTokenType_Enum_NEWLINE = 7,
  SMTokenType_Enum_BANG = 8,
  SMTokenType_Enum_BANG_BANG = 9,
  SMTokenType_Enum_BANG_EQUAL = 10,
  SMTokenType_Enum_EQUAL = 11,
  SMTokenType_Enum_EQUAL_EQUAL = 12,
  SMTokenType_Enum_GREATER = 13,
  SMTokenType_Enum_GREATER_EQUAL = 14,
  SMTokenType_Enum_LESS = 15,
  SMTokenType_Enum_LESS_EQUAL = 16,
  SMTokenType_Enum_LESS_GREATER = 17,
  SMTokenType_Enum_PLUS = 18,
  SMTokenType_Enum_PLUS_EQUAL = 19,
  SMTokenType_Enum_MINUS = 20,
  SMTokenType_Enum_MINUS_EQUAL = 21,
  SMTokenType_Enum_STAR = 22,
  SMTokenType_Enum_STAR_STAR = 23,
  SMTokenType_Enum_STAR_EQUAL = 24,
  SMTokenType_Enum_SLASH = 25,
  SMTokenType_Enum_SLASH_SLASH = 26,
  SMTokenType_Enum_SLASH_EQUAL = 27,
  SMTokenType_Enum_SLASH_SLASH_EQUAL = 28,
  SMTokenType_Enum_MOD = 29,
  SMTokenType_Enum_MOD_MOD = 30,
  SMTokenType_Enum_MOD_EQUAL = 31,
  SMTokenType_Enum_DOLLAR_LEFT_BRACKET = 32,
  SMTokenType_Enum_QUESTION = 33,
  SMTokenType_Enum_QUESTION_QUESTION = 34,
  SMTokenType_Enum_QUESTION_QUESTION_EQUAL = 35,
  SMTokenType_Enum_IDENTIFIER = 36,
  SMTokenType_Enum_STRING = 37,
  SMTokenType_Enum_NUMBER = 38,
  SMTokenType_Enum_AND = 39,
  SMTokenType_Enum_BREAK = 40,
  SMTokenType_Enum_CLASS = 41,
  SMTokenType_Enum_CLASS_FINAL = 42,
  SMTokenType_Enum_CLASS_OPEN = 43,
  SMTokenType_Enum_CONTINUE = 44,
  SMTokenType_Enum_ELSE = 45,
  SMTokenType_Enum_FALSE = 46,
  SMTokenType_Enum_DEF = 47,
  SMTokenType_Enum_FOR = 48,
  SMTokenType_Enum_RESCUE = 49,
  SMTokenType_Enum_IF = 50,
  SMTokenType_Enum_NIL = 51,
  SMTokenType_Enum_OR = 52,
  SMTokenType_Enum_PRINT = 53,
  SMTokenType_Enum_RETURN = 54,
  SMTokenType_Enum_SUPER = 55,
  SMTokenType_Enum_SELF = 56,
  SMTokenType_Enum_TRUE = 57,
  SMTokenType_Enum_WHILE = 58,
  SMTokenType_Enum_PASS = 59,
  SMTokenType_Enum_IN = 60,
  SMTokenType_Enum_IS = 61,
  SMTokenType_Enum_NOT = 62,
  SMTokenType_Enum_ELSIF = 63,
  SMTokenType_Enum_END = 64,
  SMTokenType_Enum_ISNOT = 65,
  SMTokenType_Enum_NOTIN = 66,
  SMTokenType_Enum_NATIVE = 67,
  SMTokenType_Enum_IMPORT = 68,
  SMTokenType_Enum_YIELD = 69,
  SMTokenType_Enum_WHEN = 70,
  SMTokenType_Enum_GU = 71,
  SMTokenType_Enum_IVIC = 72,
  SMTokenType_Enum_EOF = 73,
};

@interface SMTokenType : JavaLangEnum < SMCodifiable >

+ (SMTokenType * __nonnull)LEFT_PAREN;

+ (SMTokenType * __nonnull)RIGHT_PAREN;

+ (SMTokenType * __nonnull)LEFT_BRACKET;

+ (SMTokenType * __nonnull)RIGHT_BRACKET;

+ (SMTokenType * __nonnull)COMMA;

+ (SMTokenType * __nonnull)DOT;

+ (SMTokenType * __nonnull)COLON;

+ (SMTokenType * __nonnull)NEWLINE;

+ (SMTokenType * __nonnull)BANG;

+ (SMTokenType * __nonnull)BANG_BANG;

+ (SMTokenType * __nonnull)BANG_EQUAL;

+ (SMTokenType * __nonnull)EQUAL;

+ (SMTokenType * __nonnull)EQUAL_EQUAL;

+ (SMTokenType * __nonnull)GREATER;

+ (SMTokenType * __nonnull)GREATER_EQUAL;

+ (SMTokenType * __nonnull)LESS;

+ (SMTokenType * __nonnull)LESS_EQUAL;

+ (SMTokenType * __nonnull)LESS_GREATER;

+ (SMTokenType * __nonnull)PLUS;

+ (SMTokenType * __nonnull)PLUS_EQUAL;

+ (SMTokenType * __nonnull)MINUS;

+ (SMTokenType * __nonnull)MINUS_EQUAL;

+ (SMTokenType * __nonnull)STAR;

+ (SMTokenType * __nonnull)STAR_STAR;

+ (SMTokenType * __nonnull)STAR_EQUAL;

+ (SMTokenType * __nonnull)SLASH;

+ (SMTokenType * __nonnull)SLASH_SLASH;

+ (SMTokenType * __nonnull)SLASH_EQUAL;

+ (SMTokenType * __nonnull)SLASH_SLASH_EQUAL;

+ (SMTokenType * __nonnull)MOD;

+ (SMTokenType * __nonnull)MOD_MOD;

+ (SMTokenType * __nonnull)MOD_EQUAL;

+ (SMTokenType * __nonnull)DOLLAR_LEFT_BRACKET;

+ (SMTokenType * __nonnull)QUESTION;

+ (SMTokenType * __nonnull)QUESTION_QUESTION;

+ (SMTokenType * __nonnull)QUESTION_QUESTION_EQUAL;

+ (SMTokenType * __nonnull)IDENTIFIER;

+ (SMTokenType * __nonnull)STRING;

+ (SMTokenType * __nonnull)NUMBER;

+ (SMTokenType * __nonnull)AND;

+ (SMTokenType * __nonnull)BREAK;

+ (SMTokenType * __nonnull)CLASS;

+ (SMTokenType * __nonnull)CLASS_FINAL;

+ (SMTokenType * __nonnull)CLASS_OPEN;

+ (SMTokenType * __nonnull)CONTINUE;

+ (SMTokenType * __nonnull)ELSE;

+ (SMTokenType * __nonnull)FALSE_;

+ (SMTokenType * __nonnull)DEF;

+ (SMTokenType * __nonnull)FOR;

+ (SMTokenType * __nonnull)RESCUE;

+ (SMTokenType * __nonnull)IF;

+ (SMTokenType * __nonnull)NIL;

+ (SMTokenType * __nonnull)OR;

+ (SMTokenType * __nonnull)PRINT;

+ (SMTokenType * __nonnull)RETURN;

+ (SMTokenType * __nonnull)SUPER;

+ (SMTokenType * __nonnull)SELF;

+ (SMTokenType * __nonnull)TRUE_;

+ (SMTokenType * __nonnull)WHILE;

+ (SMTokenType * __nonnull)PASS;

+ (SMTokenType * __nonnull)IN;

+ (SMTokenType * __nonnull)IS;

+ (SMTokenType * __nonnull)NOT;

+ (SMTokenType * __nonnull)ELSIF;

+ (SMTokenType * __nonnull)END;

+ (SMTokenType * __nonnull)ISNOT;

+ (SMTokenType * __nonnull)NOTIN;

+ (SMTokenType * __nonnull)NATIVE;

+ (SMTokenType * __nonnull)IMPORT;

+ (SMTokenType * __nonnull)YIELD;

+ (SMTokenType * __nonnull)WHEN;

+ (SMTokenType * __nonnull)GU;

+ (SMTokenType * __nonnull)IVIC;

+ (SMTokenType * __nonnull)EOF_;

#pragma mark Public

- (NSString *)toCode;

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst;

+ (SMTokenType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (SMTokenType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SMTokenType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SMTokenType *SMTokenType_values_[];

inline SMTokenType *SMTokenType_get_LEFT_PAREN(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, LEFT_PAREN)

inline SMTokenType *SMTokenType_get_RIGHT_PAREN(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, RIGHT_PAREN)

inline SMTokenType *SMTokenType_get_LEFT_BRACKET(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, LEFT_BRACKET)

inline SMTokenType *SMTokenType_get_RIGHT_BRACKET(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, RIGHT_BRACKET)

inline SMTokenType *SMTokenType_get_COMMA(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, COMMA)

inline SMTokenType *SMTokenType_get_DOT(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, DOT)

inline SMTokenType *SMTokenType_get_COLON(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, COLON)

inline SMTokenType *SMTokenType_get_NEWLINE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, NEWLINE)

inline SMTokenType *SMTokenType_get_BANG(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, BANG)

inline SMTokenType *SMTokenType_get_BANG_BANG(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, BANG_BANG)

inline SMTokenType *SMTokenType_get_BANG_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, BANG_EQUAL)

inline SMTokenType *SMTokenType_get_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, EQUAL)

inline SMTokenType *SMTokenType_get_EQUAL_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, EQUAL_EQUAL)

inline SMTokenType *SMTokenType_get_GREATER(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, GREATER)

inline SMTokenType *SMTokenType_get_GREATER_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, GREATER_EQUAL)

inline SMTokenType *SMTokenType_get_LESS(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, LESS)

inline SMTokenType *SMTokenType_get_LESS_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, LESS_EQUAL)

inline SMTokenType *SMTokenType_get_LESS_GREATER(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, LESS_GREATER)

inline SMTokenType *SMTokenType_get_PLUS(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, PLUS)

inline SMTokenType *SMTokenType_get_PLUS_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, PLUS_EQUAL)

inline SMTokenType *SMTokenType_get_MINUS(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, MINUS)

inline SMTokenType *SMTokenType_get_MINUS_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, MINUS_EQUAL)

inline SMTokenType *SMTokenType_get_STAR(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, STAR)

inline SMTokenType *SMTokenType_get_STAR_STAR(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, STAR_STAR)

inline SMTokenType *SMTokenType_get_STAR_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, STAR_EQUAL)

inline SMTokenType *SMTokenType_get_SLASH(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, SLASH)

inline SMTokenType *SMTokenType_get_SLASH_SLASH(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, SLASH_SLASH)

inline SMTokenType *SMTokenType_get_SLASH_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, SLASH_EQUAL)

inline SMTokenType *SMTokenType_get_SLASH_SLASH_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, SLASH_SLASH_EQUAL)

inline SMTokenType *SMTokenType_get_MOD(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, MOD)

inline SMTokenType *SMTokenType_get_MOD_MOD(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, MOD_MOD)

inline SMTokenType *SMTokenType_get_MOD_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, MOD_EQUAL)

inline SMTokenType *SMTokenType_get_DOLLAR_LEFT_BRACKET(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, DOLLAR_LEFT_BRACKET)

inline SMTokenType *SMTokenType_get_QUESTION(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, QUESTION)

inline SMTokenType *SMTokenType_get_QUESTION_QUESTION(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, QUESTION_QUESTION)

inline SMTokenType *SMTokenType_get_QUESTION_QUESTION_EQUAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, QUESTION_QUESTION_EQUAL)

inline SMTokenType *SMTokenType_get_IDENTIFIER(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, IDENTIFIER)

inline SMTokenType *SMTokenType_get_STRING(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, STRING)

inline SMTokenType *SMTokenType_get_NUMBER(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, NUMBER)

inline SMTokenType *SMTokenType_get_AND(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, AND)

inline SMTokenType *SMTokenType_get_BREAK(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, BREAK)

inline SMTokenType *SMTokenType_get_CLASS(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, CLASS)

inline SMTokenType *SMTokenType_get_CLASS_FINAL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, CLASS_FINAL)

inline SMTokenType *SMTokenType_get_CLASS_OPEN(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, CLASS_OPEN)

inline SMTokenType *SMTokenType_get_CONTINUE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, CONTINUE)

inline SMTokenType *SMTokenType_get_ELSE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, ELSE)

inline SMTokenType *SMTokenType_get_FALSE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, FALSE)

inline SMTokenType *SMTokenType_get_DEF(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, DEF)

inline SMTokenType *SMTokenType_get_FOR(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, FOR)

inline SMTokenType *SMTokenType_get_RESCUE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, RESCUE)

inline SMTokenType *SMTokenType_get_IF(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, IF)

inline SMTokenType *SMTokenType_get_NIL(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, NIL)

inline SMTokenType *SMTokenType_get_OR(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, OR)

inline SMTokenType *SMTokenType_get_PRINT(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, PRINT)

inline SMTokenType *SMTokenType_get_RETURN(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, RETURN)

inline SMTokenType *SMTokenType_get_SUPER(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, SUPER)

inline SMTokenType *SMTokenType_get_SELF(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, SELF)

inline SMTokenType *SMTokenType_get_TRUE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, TRUE)

inline SMTokenType *SMTokenType_get_WHILE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, WHILE)

inline SMTokenType *SMTokenType_get_PASS(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, PASS)

inline SMTokenType *SMTokenType_get_IN(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, IN)

inline SMTokenType *SMTokenType_get_IS(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, IS)

inline SMTokenType *SMTokenType_get_NOT(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, NOT)

inline SMTokenType *SMTokenType_get_ELSIF(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, ELSIF)

inline SMTokenType *SMTokenType_get_END(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, END)

inline SMTokenType *SMTokenType_get_ISNOT(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, ISNOT)

inline SMTokenType *SMTokenType_get_NOTIN(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, NOTIN)

inline SMTokenType *SMTokenType_get_NATIVE(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, NATIVE)

inline SMTokenType *SMTokenType_get_IMPORT(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, IMPORT)

inline SMTokenType *SMTokenType_get_YIELD(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, YIELD)

inline SMTokenType *SMTokenType_get_WHEN(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, WHEN)

inline SMTokenType *SMTokenType_get_GU(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, GU)

inline SMTokenType *SMTokenType_get_IVIC(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, IVIC)

inline SMTokenType *SMTokenType_get_EOF(void);
J2OBJC_ENUM_CONSTANT(SMTokenType, EOF)

FOUNDATION_EXPORT IOSObjectArray *SMTokenType_values(void);

FOUNDATION_EXPORT SMTokenType *SMTokenType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SMTokenType *SMTokenType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SMTokenType)

@compatibility_alias NetGlobulusSimiTokenType SMTokenType;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiTokenType")
