//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SimiClassImpl.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Optional.h"
#include "java/util/Set.h"
#include "java/util/function/BiFunction.h"
#include "java/util/function/BinaryOperator.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/function/Supplier.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"
#include "BlockInterpreter.h"
#include "Constants.h"
#include "Environment.h"
#include "Interpreter.h"
#include "NativeModulesManager.h"
#include "OverloadableFunction.h"
#include "SimiClassImpl.h"
#include "SimiFunction.h"
#include "SimiMethod.h"
#include "SimiObject.h"
#include "SimiObjectImpl.h"
#include "SimiProperty.h"
#include "SimiPropertyImpl.h"
#include "SimiValue.h"
#include "Stmt.h"
#include "Token.h"
#include "TokenType.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface SMSimiClassImpl ()

- (instancetype __nonnull)initWithSMSimiClassImpl_Type:(SMSimiClassImpl_Type *)type
                                          withNSString:(NSString *)name;

- (SMSimiMethod *)findClosestVarargMethodWithSMSimiObjectImpl:(SMSimiObjectImpl *)instance
                                                 withNSString:(NSString *)name
                                                      withInt:(jint)arity;

@end

inline SMSimiClassImpl *SMSimiClassImpl_get_CLASS(void);
static SMSimiClassImpl *SMSimiClassImpl_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl, CLASS, SMSimiClassImpl *)

__attribute__((unused)) static void SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(SMSimiClassImpl *self, SMSimiClassImpl_Type *type, NSString *name);

__attribute__((unused)) static SMSimiClassImpl *new_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(SMSimiClassImpl_Type *type, NSString *name) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl *create_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(SMSimiClassImpl_Type *type, NSString *name);

__attribute__((unused)) static SMSimiMethod *SMSimiClassImpl_findClosestVarargMethodWithSMSimiObjectImpl_withNSString_withInt_(SMSimiClassImpl *self, SMSimiObjectImpl *instance, NSString *name, jint arity);

__attribute__((unused)) static void SMSimiClassImpl_Type_initWithSMTokenType_withNSString_withInt_(SMSimiClassImpl_Type *self, SMTokenType *tokenType, NSString *__name, jint __ordinal);

__attribute__((unused)) static SMSimiClassImpl_Type *new_SMSimiClassImpl_Type_initWithSMTokenType_withNSString_withInt_(SMTokenType *tokenType, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface SMSimiClassImpl_$Lambda$1 : NSObject < JavaUtilFunctionPredicate > {
 @public
  NSString *val$name_;
}

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e;

@end

J2OBJC_EMPTY_STATIC_INIT(SMSimiClassImpl_$Lambda$1)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$1_initWithNSString_(SMSimiClassImpl_$Lambda$1 *self, NSString *capture$0);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$1 *new_SMSimiClassImpl_$Lambda$1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$1 *create_SMSimiClassImpl_$Lambda$1_initWithNSString_(NSString *capture$0);

@interface SMSimiClassImpl_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<JavaUtilMap_Entry>)a;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$2)

inline SMSimiClassImpl_$Lambda$2 *SMSimiClassImpl_$Lambda$2_get_instance(void);
static SMSimiClassImpl_$Lambda$2 *SMSimiClassImpl_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$2, instance, SMSimiClassImpl_$Lambda$2 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$2_init(SMSimiClassImpl_$Lambda$2 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$2 *new_SMSimiClassImpl_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$2 *create_SMSimiClassImpl_$Lambda$2_init(void);

@interface SMSimiClassImpl_$Lambda$3 : NSObject < JavaUtilFunctionPredicate > {
 @public
  NSString *val$name_;
  jint val$arity_;
}

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e;

@end

J2OBJC_EMPTY_STATIC_INIT(SMSimiClassImpl_$Lambda$3)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$3_initWithNSString_withInt_(SMSimiClassImpl_$Lambda$3 *self, NSString *capture$0, jint capture$1);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$3 *new_SMSimiClassImpl_$Lambda$3_initWithNSString_withInt_(NSString *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$3 *create_SMSimiClassImpl_$Lambda$3_initWithNSString_withInt_(NSString *capture$0, jint capture$1);

@interface SMSimiClassImpl_$Lambda$4 : NSObject < JavaUtilFunctionToIntFunction > {
 @public
  jint val$arity_;
}

- (jint)applyAsIntWithId:(id<JavaUtilMap_Entry>)l;

@end

J2OBJC_EMPTY_STATIC_INIT(SMSimiClassImpl_$Lambda$4)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$4_initWithInt_(SMSimiClassImpl_$Lambda$4 *self, jint capture$0);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$4 *new_SMSimiClassImpl_$Lambda$4_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$4 *create_SMSimiClassImpl_$Lambda$4_initWithInt_(jint capture$0);

@interface SMSimiClassImpl_$Lambda$5 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<JavaUtilMap_Entry>)a;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$5)

inline SMSimiClassImpl_$Lambda$5 *SMSimiClassImpl_$Lambda$5_get_instance(void);
static SMSimiClassImpl_$Lambda$5 *SMSimiClassImpl_$Lambda$5_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$5, instance, SMSimiClassImpl_$Lambda$5 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$5_init(SMSimiClassImpl_$Lambda$5 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$5 *new_SMSimiClassImpl_$Lambda$5_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$5 *create_SMSimiClassImpl_$Lambda$5_init(void);

@interface SMSimiClassImpl_$Lambda$6 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(SMSimiClassImpl *)c;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$6)

inline SMSimiClassImpl_$Lambda$6 *SMSimiClassImpl_$Lambda$6_get_instance(void);
static SMSimiClassImpl_$Lambda$6 *SMSimiClassImpl_$Lambda$6_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$6, instance, SMSimiClassImpl_$Lambda$6 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$6_init(SMSimiClassImpl_$Lambda$6 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$6 *new_SMSimiClassImpl_$Lambda$6_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$6 *create_SMSimiClassImpl_$Lambda$6_init(void);

@interface SMSimiClassImpl_$Lambda$7 : NSObject < JavaUtilFunctionBinaryOperator >

- (id)applyWithId:(NSString *)l
           withId:(NSString *)r;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$7)

inline SMSimiClassImpl_$Lambda$7 *SMSimiClassImpl_$Lambda$7_get_instance(void);
static SMSimiClassImpl_$Lambda$7 *SMSimiClassImpl_$Lambda$7_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$7, instance, SMSimiClassImpl_$Lambda$7 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$7_init(SMSimiClassImpl_$Lambda$7 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$7 *new_SMSimiClassImpl_$Lambda$7_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$7 *create_SMSimiClassImpl_$Lambda$7_init(void);

@interface SMSimiClassImpl_$Lambda$8 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$8)

inline SMSimiClassImpl_$Lambda$8 *SMSimiClassImpl_$Lambda$8_get_instance(void);
static SMSimiClassImpl_$Lambda$8 *SMSimiClassImpl_$Lambda$8_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$8, instance, SMSimiClassImpl_$Lambda$8 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$8_init(SMSimiClassImpl_$Lambda$8 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$8 *new_SMSimiClassImpl_$Lambda$8_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$8 *create_SMSimiClassImpl_$Lambda$8_init(void);

@interface SMSimiClassImpl_$Lambda$9 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<JavaUtilMap_Entry>)a;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$9)

inline SMSimiClassImpl_$Lambda$9 *SMSimiClassImpl_$Lambda$9_get_instance(void);
static SMSimiClassImpl_$Lambda$9 *SMSimiClassImpl_$Lambda$9_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$9, instance, SMSimiClassImpl_$Lambda$9 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$9_init(SMSimiClassImpl_$Lambda$9 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$9 *new_SMSimiClassImpl_$Lambda$9_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$9 *create_SMSimiClassImpl_$Lambda$9_init(void);

@interface SMSimiClassImpl_$Lambda$10 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(NSString *)a;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$10)

inline SMSimiClassImpl_$Lambda$10 *SMSimiClassImpl_$Lambda$10_get_instance(void);
static SMSimiClassImpl_$Lambda$10 *SMSimiClassImpl_$Lambda$10_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$10, instance, SMSimiClassImpl_$Lambda$10 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$10_init(SMSimiClassImpl_$Lambda$10 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$10 *new_SMSimiClassImpl_$Lambda$10_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$10 *create_SMSimiClassImpl_$Lambda$10_init(void);

@interface SMSimiClassImpl_$Lambda$11 : NSObject < JavaUtilFunctionSupplier >

- (id)get;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_$Lambda$11)

inline SMSimiClassImpl_$Lambda$11 *SMSimiClassImpl_$Lambda$11_get_instance(void);
static SMSimiClassImpl_$Lambda$11 *SMSimiClassImpl_$Lambda$11_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimiClassImpl_$Lambda$11, instance, SMSimiClassImpl_$Lambda$11 *)

__attribute__((unused)) static void SMSimiClassImpl_$Lambda$11_init(SMSimiClassImpl_$Lambda$11 *self);

__attribute__((unused)) static SMSimiClassImpl_$Lambda$11 *new_SMSimiClassImpl_$Lambda$11_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimiClassImpl_$Lambda$11 *create_SMSimiClassImpl_$Lambda$11_init(void);

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl)

@implementation SMSimiClassImpl

- (instancetype __nonnull)initWithSMSimiClassImpl_Type:(SMSimiClassImpl_Type *)type
                                          withNSString:(NSString *)name {
  SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(self, type, name);
  return self;
}

- (instancetype __nonnull)initWithSMSimiClassImpl_Type:(SMSimiClassImpl_Type *)type
                                          withNSString:(NSString *)name
                                      withJavaUtilList:(id<JavaUtilList>)superclasses
                                       withJavaUtilMap:(id<JavaUtilMap>)constants
                                       withJavaUtilMap:(id<JavaUtilMap>)methods
                                      withSMStmt_Class:(SMStmt_Class *)stmt {
  SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(self, type, name, superclasses, constants, methods, stmt);
  return self;
}

- (id<SMSimiProperty>)getWithSMToken:(SMToken *)name
                 withJavaLangInteger:(JavaLangInteger *)arity
                   withSMEnvironment:(SMEnvironment *)environment {
  id<SMSimiProperty> prop = [super getWithSMToken:name withJavaLangInteger:arity withSMEnvironment:environment];
  if (prop != nil) {
    return prop;
  }
  SMSimiMethod *method = [self findMethodWithSMSimiObjectImpl:nil withNSString:((SMToken *) nil_chk(name))->lexeme_ withJavaLangInteger:arity];
  if (method != nil) {
    return new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_(new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(method, name->lexeme_, self), ((SMSimiFunction *) nil_chk(method->function_))->annotations_);
  }
  if (superclasses_ != nil && ![((NSString *) nil_chk(name->lexeme_)) java_hasPrefix:SMConstants_PRIVATE]) {
    for (SMSimiClassImpl * __strong superclass_ in superclasses_) {
      id<SMSimiProperty> superclassProp = [((SMSimiClassImpl *) nil_chk(superclass_)) getWithSMToken:name withJavaLangInteger:arity withSMEnvironment:environment];
      if (superclassProp != nil) {
        return superclassProp;
      }
    }
  }
  return nil;
}

- (SMSimiMethod *)findMethodWithSMSimiObjectImpl:(SMSimiObjectImpl *)instance
                                    withNSString:(NSString *)name
                             withJavaLangInteger:(JavaLangInteger *)arity {
  SMSimiObjectImpl *binder = (instance != nil) ? instance : self;
  if (arity == nil) {
    JavaUtilOptional *candidate = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(methods_)) entrySet])) stream])) filterWithJavaUtilFunctionPredicate:new_SMSimiClassImpl_$Lambda$1_initWithNSString_(name)])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiClassImpl_$Lambda$2, instance)])) findFirst];
    if ([((JavaUtilOptional *) nil_chk(candidate)) isPresent]) {
      return new_SMSimiMethod_initWithSMSimiClassImpl_withSMSimiFunction_(self, [candidate get]);
    }
  }
  else {
    SMOverloadableFunction *of = new_SMOverloadableFunction_initWithNSString_withInt_(name, [arity intValue]);
    if ([((id<JavaUtilMap>) nil_chk(methods_)) containsKeyWithId:of]) {
      return new_SMSimiMethod_initWithSMSimiClassImpl_withSMSimiFunction_(self, [((SMSimiFunction *) nil_chk([methods_ getWithId:of])) bindWithSMSimiObjectImpl:binder]);
    }
  }
  if (superclasses_ != nil && ![((NSString *) nil_chk(name)) java_hasPrefix:SMConstants_PRIVATE]) {
    for (SMSimiClassImpl * __strong superclass_ in superclasses_) {
      SMSimiMethod *method = [((SMSimiClassImpl *) nil_chk(superclass_)) findMethodWithSMSimiObjectImpl:instance withNSString:name withJavaLangInteger:arity];
      if (method != nil) {
        return method;
      }
    }
  }
  if (arity == nil) {
    return nil;
  }
  else {
    return SMSimiClassImpl_findClosestVarargMethodWithSMSimiObjectImpl_withNSString_withInt_(self, instance, name, [arity intValue]);
  }
}

- (SMSimiMethod *)findClosestVarargMethodWithSMSimiObjectImpl:(SMSimiObjectImpl *)instance
                                                 withNSString:(NSString *)name
                                                      withInt:(jint)arity {
  return SMSimiClassImpl_findClosestVarargMethodWithSMSimiObjectImpl_withNSString_withInt_(self, instance, name, arity);
}

- (id<SMSimiProperty>)init__WithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter
                                  withJavaUtilList:(id<JavaUtilList>)arguments {
  SMSimiObjectImpl *instance = SMSimiObjectImpl_instanceWithSMSimiClassImpl_withJavaUtilLinkedHashMap_(self, nil);
  SMSimiMethod *initializer = [self findMethodWithSMSimiObjectImpl:instance withNSString:SMConstants_INIT withJavaLangInteger:JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(arguments)) size])];
  if (initializer == nil) {
    initializer = [self findMethodWithSMSimiObjectImpl:instance withNSString:JreStrcat("$$", SMConstants_PRIVATE, SMConstants_INIT) withJavaLangInteger:JavaLangInteger_valueOfWithInt_([arguments size])];
  }
  if (initializer != nil) {
    if (((SMSimiFunction *) nil_chk(initializer->function_))->isNative_) {
      SMInterpreter *in = (SMInterpreter *) cast_chk(interpreter, [SMInterpreter class]);
      for (id<SMNativeModulesManager> __strong manager in nil_chk(((SMInterpreter *) nil_chk(in))->nativeModulesManagers_)) {
        @try {
          id<SMSimiProperty> inst = [((id<SMNativeModulesManager>) nil_chk(manager)) callWithNSString:name_ withNSString:SMConstants_INIT withSMSimiObject:self withSMInterpreter:in withJavaUtilList:arguments];
          if (inst != nil) {
            instance = (SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk([inst getValue])) getObject], [SMSimiObjectImpl class]);
            if (instance != nil) {
              break;
            }
          }
        }
        @catch (JavaLangIllegalArgumentException *ignored) {
        }
      }
    }
    else {
      (void) [initializer->function_ callWithSMBlockInterpreter:interpreter withSMSimiEnvironment:nil withJavaUtilList:arguments withBoolean:false];
    }
  }
  return new_SMSimiValue_Object_initWithSMSimiObject_(instance);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:name_];
  if (superclasses_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"("])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([superclasses_ stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiClassImpl_$Lambda$6, instance)])) reduceWithId:@"" withJavaUtilFunctionBinaryOperator:JreLoadStatic(SMSimiClassImpl_$Lambda$7, instance)]])) appendWithNSString:@")"];
  }
  (void) [sb appendWithNSString:@" = [\n"];
  for (SMOverloadableFunction * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(methods_)) keySet])) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:((SMOverloadableFunction *) nil_chk(key))->name_])) appendWithNSString:@"("])) appendWithInt:key->arity_])) appendWithNSString:@")"])) appendWithNSString:@" = "])) appendWithId:[methods_ getWithId:key]])) appendWithNSString:@"\n"];
  }
  (void) [sb appendWithNSString:[self printFields]];
  (void) [sb appendWithNSString:@"]"];
  return [sb description];
}

- (id<JavaUtilSet>)getConstructors {
  id<JavaUtilSet> constructors = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(methods_)) entrySet])) stream])) filterWithJavaUtilFunctionPredicate:JreLoadStatic(SMSimiClassImpl_$Lambda$8, instance)])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiClassImpl_$Lambda$9, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toSet()];
  if (superclasses_ != nil) {
    for (SMSimiClassImpl * __strong superclass_ in superclasses_) {
      [((id<JavaUtilSet>) nil_chk(constructors)) addAllWithJavaUtilCollection:[((SMSimiClassImpl *) nil_chk(superclass_)) getConstructors]];
    }
  }
  return constructors;
}

- (SMSimiObjectImpl *)enumerateWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass {
  JavaUtilArrayList *values = [self getEnumeratedValuesWithSMSimiClassImpl:objectClass];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(methods_)) entrySet])) {
    [((JavaUtilArrayList *) nil_chk(values)) addWithId:new_SMSimiValue_Object_initWithSMSimiObject_(SMSimiObjectImpl_decomposedPairWithSMSimiClassImpl_withSMSimiValue_withSMSimiProperty_(objectClass, new_SMSimiValue_String_initWithNSString_(((SMOverloadableFunction *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]))->name_), new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_([entry_ getValue], ((SMOverloadableFunction *) nil_chk([entry_ getKey]))->name_, self)))];
  }
  return SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(objectClass, true, values);
}

- (id<JavaUtilSet>)allKeys {
  id<JavaUtilSet> keys = new_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(fields_)) keySet]);
  if (superclasses_ != nil) {
    for (SMSimiClassImpl * __strong superclass_ in superclasses_) {
      [keys addAllWithJavaUtilCollection:[((SMSimiClassImpl *) nil_chk(superclass_)) allKeys]];
    }
  }
  return keys;
}

- (JavaUtilArrayList *)keys {
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilSet>) nil_chk([self allKeys])) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiClassImpl_$Lambda$10, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toCollectionWithJavaUtilFunctionSupplier_(JreLoadStatic(SMSimiClassImpl_$Lambda$11, instance))];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  if (stmt_ != nil) {
    return [stmt_ toCodeWithInt:indentationLevel withBoolean:ignoreFirst];
  }
  return [super toCodeWithInt:indentationLevel withBoolean:ignoreFirst];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LSMSimiMethod;", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "LSMSimiMethod;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, -1, -1, -1, 13, -1, -1 },
    { NULL, "LSMSimiObjectImpl;", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, -1, -1, -1, 16, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiClassImpl_Type:withNSString:);
  methods[1].selector = @selector(initWithSMSimiClassImpl_Type:withNSString:withJavaUtilList:withJavaUtilMap:withJavaUtilMap:withSMStmt_Class:);
  methods[2].selector = @selector(getWithSMToken:withJavaLangInteger:withSMEnvironment:);
  methods[3].selector = @selector(findMethodWithSMSimiObjectImpl:withNSString:withJavaLangInteger:);
  methods[4].selector = @selector(findClosestVarargMethodWithSMSimiObjectImpl:withNSString:withInt:);
  methods[5].selector = @selector(init__WithSMBlockInterpreter:withJavaUtilList:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(getConstructors);
  methods[8].selector = @selector(enumerateWithSMSimiClassImpl:);
  methods[9].selector = @selector(allKeys);
  methods[10].selector = @selector(keys);
  methods[11].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LSMSimiClassImpl_Type;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "superclasses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "stmt_", "LSMStmt_Class;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "methods_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "CLASS", "LSMSimiClassImpl;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiClassImpl_Type;LNSString;", "LSMSimiClassImpl_Type;LNSString;LJavaUtilList;LJavaUtilMap;LJavaUtilMap;LSMStmt_Class;", "(LSimiClassImpl$Type;Ljava/lang/String;Ljava/util/List<LSimiClassImpl;>;Ljava/util/Map<Ljava/lang/String;LSimiProperty;>;Ljava/util/Map<LOverloadableFunction;LSimiFunction;>;LStmt$Class;)V", "get", "LSMToken;LJavaLangInteger;LSMEnvironment;", "findMethod", "LSMSimiObjectImpl;LNSString;LJavaLangInteger;", "findClosestVarargMethod", "LSMSimiObjectImpl;LNSString;I", "init", "LSMBlockInterpreter;LJavaUtilList;", "(LBlockInterpreter;Ljava/util/List<LSimiProperty;>;)LSimiProperty;", "toString", "()Ljava/util/Set<LSimiFunction;>;", "enumerate", "LSMSimiClassImpl;", "()Ljava/util/Set<Ljava/lang/String;>;", "()Ljava/util/ArrayList<LSimiValue;>;", "toCode", "IZ", "Ljava/util/List<LSimiClassImpl;>;", "Ljava/util/Map<LOverloadableFunction;LSimiFunction;>;", &SMSimiClassImpl_CLASS, "LSMSimiClassImpl_SuperClassesList;LSMSimiClassImpl_Type;" };
  static const J2ObjcClassInfo _SMSimiClassImpl = { "SimiClassImpl", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 12, 6, -1, 23, -1, -1, -1 };
  return &_SMSimiClassImpl;
}

+ (void)initialize {
  if (self == [SMSimiClassImpl class]) {
    SMSimiClassImpl_CLASS = new_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(JreLoadEnum(SMSimiClassImpl_Type, REGULAR), SMConstants_CLASS_CLASS);
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl)
  }
}

@end

void SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(SMSimiClassImpl *self, SMSimiClassImpl_Type *type, NSString *name) {
  SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_withJavaUtilArrayList_(self, nil, true, new_JavaUtilLinkedHashMap_init(), nil);
  self->type_ = type;
  self->name_ = name;
  self->superclasses_ = nil;
  self->methods_ = new_JavaUtilHashMap_init();
  self->stmt_ = nil;
}

SMSimiClassImpl *new_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(SMSimiClassImpl_Type *type, NSString *name) {
  J2OBJC_NEW_IMPL(SMSimiClassImpl, initWithSMSimiClassImpl_Type_withNSString_, type, name)
}

SMSimiClassImpl *create_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_(SMSimiClassImpl_Type *type, NSString *name) {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl, initWithSMSimiClassImpl_Type_withNSString_, type, name)
}

void SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(SMSimiClassImpl *self, SMSimiClassImpl_Type *type, NSString *name, id<JavaUtilList> superclasses, id<JavaUtilMap> constants, id<JavaUtilMap> methods, SMStmt_Class *stmt) {
  SMSimiObjectImpl_initWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_withJavaUtilArrayList_(self, SMSimiClassImpl_CLASS, type != JreLoadEnum(SMSimiClassImpl_Type, OPEN), new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(constants), nil);
  self->type_ = type;
  self->superclasses_ = superclasses;
  self->name_ = name;
  self->methods_ = methods;
  self->stmt_ = stmt;
}

SMSimiClassImpl *new_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(SMSimiClassImpl_Type *type, NSString *name, id<JavaUtilList> superclasses, id<JavaUtilMap> constants, id<JavaUtilMap> methods, SMStmt_Class *stmt) {
  J2OBJC_NEW_IMPL(SMSimiClassImpl, initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_, type, name, superclasses, constants, methods, stmt)
}

SMSimiClassImpl *create_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(SMSimiClassImpl_Type *type, NSString *name, id<JavaUtilList> superclasses, id<JavaUtilMap> constants, id<JavaUtilMap> methods, SMStmt_Class *stmt) {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl, initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_, type, name, superclasses, constants, methods, stmt)
}

SMSimiMethod *SMSimiClassImpl_findClosestVarargMethodWithSMSimiObjectImpl_withNSString_withInt_(SMSimiClassImpl *self, SMSimiObjectImpl *instance, NSString *name, jint arity) {
  JavaUtilOptional *candidate = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->methods_)) entrySet])) stream])) filterWithJavaUtilFunctionPredicate:new_SMSimiClassImpl_$Lambda$3_initWithNSString_withInt_(name, arity)])) sortedWithJavaUtilComparator:JavaUtilComparator_comparingIntWithJavaUtilFunctionToIntFunction_(new_SMSimiClassImpl_$Lambda$4_initWithInt_(arity))])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMSimiClassImpl_$Lambda$5, instance)])) findFirst];
  if ([((JavaUtilOptional *) nil_chk(candidate)) isPresent]) {
    return new_SMSimiMethod_initWithSMSimiClassImpl_withSMSimiFunction_(self, [((SMSimiFunction *) nil_chk([candidate get])) bindWithSMSimiObjectImpl:(instance != nil) ? instance : self]);
  }
  if (self->superclasses_ != nil) {
    for (SMSimiClassImpl * __strong superclass_ in self->superclasses_) {
      SMSimiMethod *method = SMSimiClassImpl_findClosestVarargMethodWithSMSimiObjectImpl_withNSString_withInt_(nil_chk(superclass_), instance, name, arity);
      if (method != nil) {
        return method;
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiClassImpl)

@implementation SMSimiClassImpl_SuperClassesList

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)value {
  SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(self, value);
  return self;
}

- (SMSimiValue *)copy__ {
  return new_SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(value_);
}

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_ {
  return [self copy__];
}

- (jint)compareToWithId:(SMSimiValue *)o {
  (void) cast_chk(o, [SMSimiValue class]);
  @throw new_JavaLangAssertionError_init();
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(copy__);
  methods[2].selector = @selector(cloneWithBoolean:);
  methods[3].selector = @selector(compareToWithId:);
  methods[4].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LJavaUtilList;", .constantValue.asLong = 0, 0x11, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<LSimiClassImpl;>;)V", "copy", "clone", "Z", "compareTo", "LSMSimiValue;", "toCode", "IZ", "Ljava/util/List<LSimiClassImpl;>;", "LSMSimiClassImpl;" };
  static const J2ObjcClassInfo _SMSimiClassImpl_SuperClassesList = { "SuperClassesList", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 5, 1, 10, -1, -1, -1, -1 };
  return &_SMSimiClassImpl_SuperClassesList;
}

@end

void SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(SMSimiClassImpl_SuperClassesList *self, id<JavaUtilList> value) {
  SMSimiValue_init(self);
  self->value_ = value;
}

SMSimiClassImpl_SuperClassesList *new_SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(id<JavaUtilList> value) {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_SuperClassesList, initWithJavaUtilList_, value)
}

SMSimiClassImpl_SuperClassesList *create_SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(id<JavaUtilList> value) {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_SuperClassesList, initWithJavaUtilList_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiClassImpl_SuperClassesList)

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_Type)

SMSimiClassImpl_Type *SMSimiClassImpl_Type_values_[3];

@implementation SMSimiClassImpl_Type

+ (SMSimiClassImpl_Type *)REGULAR {
  return JreEnum(SMSimiClassImpl_Type, REGULAR);
}

+ (SMSimiClassImpl_Type *)FINAL {
  return JreEnum(SMSimiClassImpl_Type, FINAL);
}

+ (SMSimiClassImpl_Type *)OPEN {
  return JreEnum(SMSimiClassImpl_Type, OPEN);
}

+ (SMSimiClassImpl_Type *)fromWithSMTokenType:(SMTokenType *)tokenType {
  return SMSimiClassImpl_Type_fromWithSMTokenType_(tokenType);
}

+ (IOSObjectArray *)values {
  return SMSimiClassImpl_Type_values();
}

+ (SMSimiClassImpl_Type *)valueOfWithNSString:(NSString *)name {
  return SMSimiClassImpl_Type_valueOfWithNSString_(name);
}

- (SMSimiClassImpl_Type_Enum)toNSEnum {
  return (SMSimiClassImpl_Type_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LSMSimiClassImpl_Type;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LSMSimiClassImpl_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiClassImpl_Type;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(fromWithSMTokenType:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REGULAR", "LSMSimiClassImpl_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "FINAL", "LSMSimiClassImpl_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "OPEN", "LSMSimiClassImpl_Type;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "tokenType_", "LSMTokenType;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "from", "LSMTokenType;", "valueOf", "LNSString;", &JreEnum(SMSimiClassImpl_Type, REGULAR), &JreEnum(SMSimiClassImpl_Type, FINAL), &JreEnum(SMSimiClassImpl_Type, OPEN), "LSMSimiClassImpl;", "Ljava/lang/Enum<LSimiClassImpl$Type;>;" };
  static const J2ObjcClassInfo _SMSimiClassImpl_Type = { "Type", "net.globulus.simi", ptrTable, methods, fields, 7, 0x4018, 3, 4, 7, -1, -1, 8, -1 };
  return &_SMSimiClassImpl_Type;
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_Type class]) {
    JreEnum(SMSimiClassImpl_Type, REGULAR) = new_SMSimiClassImpl_Type_initWithSMTokenType_withNSString_withInt_(JreLoadEnum(SMTokenType, CLASS), JreEnumConstantName(SMSimiClassImpl_Type_class_(), 0), 0);
    JreEnum(SMSimiClassImpl_Type, FINAL) = new_SMSimiClassImpl_Type_initWithSMTokenType_withNSString_withInt_(JreLoadEnum(SMTokenType, CLASS_FINAL), JreEnumConstantName(SMSimiClassImpl_Type_class_(), 1), 1);
    JreEnum(SMSimiClassImpl_Type, OPEN) = new_SMSimiClassImpl_Type_initWithSMTokenType_withNSString_withInt_(JreLoadEnum(SMTokenType, CLASS_OPEN), JreEnumConstantName(SMSimiClassImpl_Type_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_Type)
  }
}

@end

void SMSimiClassImpl_Type_initWithSMTokenType_withNSString_withInt_(SMSimiClassImpl_Type *self, SMTokenType *tokenType, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->tokenType_ = tokenType;
}

SMSimiClassImpl_Type *new_SMSimiClassImpl_Type_initWithSMTokenType_withNSString_withInt_(SMTokenType *tokenType, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_Type, initWithSMTokenType_withNSString_withInt_, tokenType, __name, __ordinal)
}

SMSimiClassImpl_Type *SMSimiClassImpl_Type_fromWithSMTokenType_(SMTokenType *tokenType) {
  SMSimiClassImpl_Type_initialize();
  {
    IOSObjectArray *a__ = SMSimiClassImpl_Type_values();
    SMSimiClassImpl_Type * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    SMSimiClassImpl_Type * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      SMSimiClassImpl_Type *type = *b__++;
      if (((SMSimiClassImpl_Type *) nil_chk(type))->tokenType_ == tokenType) {
        return type;
      }
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Illegal token type: ", tokenType));
}

IOSObjectArray *SMSimiClassImpl_Type_values() {
  SMSimiClassImpl_Type_initialize();
  return [IOSObjectArray arrayWithObjects:SMSimiClassImpl_Type_values_ count:3 type:SMSimiClassImpl_Type_class_()];
}

SMSimiClassImpl_Type *SMSimiClassImpl_Type_valueOfWithNSString_(NSString *name) {
  SMSimiClassImpl_Type_initialize();
  for (int i = 0; i < 3; i++) {
    SMSimiClassImpl_Type *e = SMSimiClassImpl_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

SMSimiClassImpl_Type *SMSimiClassImpl_Type_fromOrdinal(NSUInteger ordinal) {
  SMSimiClassImpl_Type_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return SMSimiClassImpl_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiClassImpl_Type)

@implementation SMSimiClassImpl_$Lambda$1

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e {
  return [((NSString *) nil_chk(((SMOverloadableFunction *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]))->name_)) isEqual:val$name_];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

@end

void SMSimiClassImpl_$Lambda$1_initWithNSString_(SMSimiClassImpl_$Lambda$1 *self, NSString *capture$0) {
  self->val$name_ = capture$0;
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$1 *new_SMSimiClassImpl_$Lambda$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$1, initWithNSString_, capture$0)
}

SMSimiClassImpl_$Lambda$1 *create_SMSimiClassImpl_$Lambda$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$1, initWithNSString_, capture$0)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$2)

@implementation SMSimiClassImpl_$Lambda$2

- (id)applyWithId:(id<JavaUtilMap_Entry>)a {
  return [((id<JavaUtilMap_Entry>) nil_chk(a)) getValue];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$2 class]) {
    SMSimiClassImpl_$Lambda$2_instance = new_SMSimiClassImpl_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$2)
  }
}

@end

void SMSimiClassImpl_$Lambda$2_init(SMSimiClassImpl_$Lambda$2 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$2 *new_SMSimiClassImpl_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$2, init)
}

SMSimiClassImpl_$Lambda$2 *create_SMSimiClassImpl_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$2, init)
}

@implementation SMSimiClassImpl_$Lambda$3

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e {
  return [((NSString *) nil_chk(((SMOverloadableFunction *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]))->name_)) isEqual:val$name_] && ((SMOverloadableFunction *) nil_chk([e getKey]))->arity_ <= val$arity_;
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

@end

void SMSimiClassImpl_$Lambda$3_initWithNSString_withInt_(SMSimiClassImpl_$Lambda$3 *self, NSString *capture$0, jint capture$1) {
  self->val$name_ = capture$0;
  self->val$arity_ = capture$1;
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$3 *new_SMSimiClassImpl_$Lambda$3_initWithNSString_withInt_(NSString *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$3, initWithNSString_withInt_, capture$0, capture$1)
}

SMSimiClassImpl_$Lambda$3 *create_SMSimiClassImpl_$Lambda$3_initWithNSString_withInt_(NSString *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$3, initWithNSString_withInt_, capture$0, capture$1)
}

@implementation SMSimiClassImpl_$Lambda$4

- (jint)applyAsIntWithId:(id<JavaUtilMap_Entry>)l {
  return JavaLangMath_absWithInt_(((SMOverloadableFunction *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(l)) getKey]))->arity_ - val$arity_);
}

@end

void SMSimiClassImpl_$Lambda$4_initWithInt_(SMSimiClassImpl_$Lambda$4 *self, jint capture$0) {
  self->val$arity_ = capture$0;
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$4 *new_SMSimiClassImpl_$Lambda$4_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$4, initWithInt_, capture$0)
}

SMSimiClassImpl_$Lambda$4 *create_SMSimiClassImpl_$Lambda$4_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$4, initWithInt_, capture$0)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$5)

@implementation SMSimiClassImpl_$Lambda$5

- (id)applyWithId:(id<JavaUtilMap_Entry>)a {
  return [((id<JavaUtilMap_Entry>) nil_chk(a)) getValue];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$5 class]) {
    SMSimiClassImpl_$Lambda$5_instance = new_SMSimiClassImpl_$Lambda$5_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$5)
  }
}

@end

void SMSimiClassImpl_$Lambda$5_init(SMSimiClassImpl_$Lambda$5 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$5 *new_SMSimiClassImpl_$Lambda$5_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$5, init)
}

SMSimiClassImpl_$Lambda$5 *create_SMSimiClassImpl_$Lambda$5_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$5, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$6)

@implementation SMSimiClassImpl_$Lambda$6

- (id)applyWithId:(SMSimiClassImpl *)c {
  return ((SMSimiClassImpl *) nil_chk(c))->name_;
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$6 class]) {
    SMSimiClassImpl_$Lambda$6_instance = new_SMSimiClassImpl_$Lambda$6_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$6)
  }
}

@end

void SMSimiClassImpl_$Lambda$6_init(SMSimiClassImpl_$Lambda$6 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$6 *new_SMSimiClassImpl_$Lambda$6_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$6, init)
}

SMSimiClassImpl_$Lambda$6 *create_SMSimiClassImpl_$Lambda$6_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$6, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$7)

@implementation SMSimiClassImpl_$Lambda$7

- (id)applyWithId:(NSString *)l
           withId:(NSString *)r {
  return JreStrcat("$$$", l, @", ", r);
}

- (id<JavaUtilFunctionBiFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionBiFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$7 class]) {
    SMSimiClassImpl_$Lambda$7_instance = new_SMSimiClassImpl_$Lambda$7_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$7)
  }
}

@end

void SMSimiClassImpl_$Lambda$7_init(SMSimiClassImpl_$Lambda$7 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$7 *new_SMSimiClassImpl_$Lambda$7_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$7, init)
}

SMSimiClassImpl_$Lambda$7 *create_SMSimiClassImpl_$Lambda$7_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$7, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$8)

@implementation SMSimiClassImpl_$Lambda$8

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e {
  return [((NSString *) nil_chk(((SMOverloadableFunction *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]))->name_)) isEqual:SMConstants_INIT] || [((SMOverloadableFunction *) nil_chk([e getKey]))->name_ isEqual:JreStrcat("$$", SMConstants_PRIVATE, SMConstants_INIT)];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$8 class]) {
    SMSimiClassImpl_$Lambda$8_instance = new_SMSimiClassImpl_$Lambda$8_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$8)
  }
}

@end

void SMSimiClassImpl_$Lambda$8_init(SMSimiClassImpl_$Lambda$8 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$8 *new_SMSimiClassImpl_$Lambda$8_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$8, init)
}

SMSimiClassImpl_$Lambda$8 *create_SMSimiClassImpl_$Lambda$8_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$8, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$9)

@implementation SMSimiClassImpl_$Lambda$9

- (id)applyWithId:(id<JavaUtilMap_Entry>)a {
  return [((id<JavaUtilMap_Entry>) nil_chk(a)) getValue];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$9 class]) {
    SMSimiClassImpl_$Lambda$9_instance = new_SMSimiClassImpl_$Lambda$9_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$9)
  }
}

@end

void SMSimiClassImpl_$Lambda$9_init(SMSimiClassImpl_$Lambda$9 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$9 *new_SMSimiClassImpl_$Lambda$9_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$9, init)
}

SMSimiClassImpl_$Lambda$9 *create_SMSimiClassImpl_$Lambda$9_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$9, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$10)

@implementation SMSimiClassImpl_$Lambda$10

- (id)applyWithId:(NSString *)a {
  return new_SMSimiValue_String_initWithNSString_(a);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$10 class]) {
    SMSimiClassImpl_$Lambda$10_instance = new_SMSimiClassImpl_$Lambda$10_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$10)
  }
}

@end

void SMSimiClassImpl_$Lambda$10_init(SMSimiClassImpl_$Lambda$10 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$10 *new_SMSimiClassImpl_$Lambda$10_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$10, init)
}

SMSimiClassImpl_$Lambda$10 *create_SMSimiClassImpl_$Lambda$10_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$10, init)
}

J2OBJC_INITIALIZED_DEFN(SMSimiClassImpl_$Lambda$11)

@implementation SMSimiClassImpl_$Lambda$11

- (id)get {
  return new_JavaUtilArrayList_init();
}

+ (void)initialize {
  if (self == [SMSimiClassImpl_$Lambda$11 class]) {
    SMSimiClassImpl_$Lambda$11_instance = new_SMSimiClassImpl_$Lambda$11_init();
    J2OBJC_SET_INITIALIZED(SMSimiClassImpl_$Lambda$11)
  }
}

@end

void SMSimiClassImpl_$Lambda$11_init(SMSimiClassImpl_$Lambda$11 *self) {
  NSObject_init(self);
}

SMSimiClassImpl_$Lambda$11 *new_SMSimiClassImpl_$Lambda$11_init() {
  J2OBJC_NEW_IMPL(SMSimiClassImpl_$Lambda$11, init)
}

SMSimiClassImpl_$Lambda$11 *create_SMSimiClassImpl_$Lambda$11_init() {
  J2OBJC_CREATE_IMPL(SMSimiClassImpl_$Lambda$11, init)
}
