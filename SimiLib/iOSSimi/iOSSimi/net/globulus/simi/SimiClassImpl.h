//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SimiClassImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiSimiClassImpl")
#ifdef RESTRICT_NetGlobulusSimiSimiClassImpl
#define INCLUDE_ALL_NetGlobulusSimiSimiClassImpl 0
#else
#define INCLUDE_ALL_NetGlobulusSimiSimiClassImpl 1
#endif
#undef RESTRICT_NetGlobulusSimiSimiClassImpl

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMSimiClassImpl_) && (INCLUDE_ALL_NetGlobulusSimiSimiClassImpl || defined(INCLUDE_SMSimiClassImpl))
#define SMSimiClassImpl_

#define RESTRICT_NetGlobulusSimiSimiObjectImpl 1
#define INCLUDE_SMSimiObjectImpl 1
#include "SimiObjectImpl.h"

#define RESTRICT_NetGlobulusSimiSimiClass 1
#define INCLUDE_SMSimiClass 1
#include "SimiClass.h"

@class JavaLangInteger;
@class JavaUtilArrayList;
@class JavaUtilLinkedHashMap;
@class SMEnvironment;
@class SMSimiClassImpl_Type;
@class SMSimiMethod;
@class SMStmt_Class;
@class SMToken;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol SMBlockInterpreter;
@protocol SMSimiProperty;

@interface SMSimiClassImpl : SMSimiObjectImpl < SMSimiClass > {
 @public
  SMSimiClassImpl_Type *type_;
  NSString *name_;
  id<JavaUtilList> superclasses_;
  SMStmt_Class *stmt_;
  id<JavaUtilMap> methods_;
}

#pragma mark Public

- (id<SMSimiProperty>)init__WithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter
                                  withJavaUtilList:(id<JavaUtilList>)arguments OBJC_METHOD_FAMILY_NONE;

- (JavaUtilArrayList *)keys;

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst;

- (NSString *)description;

- (JavaUtilArrayList *)values;

#pragma mark Package-Private

- (instancetype __nonnull)initWithSMSimiClassImpl_Type:(SMSimiClassImpl_Type *)type
                                          withNSString:(NSString *)name
                                      withJavaUtilList:(id<JavaUtilList>)superclasses
                                       withJavaUtilMap:(id<JavaUtilMap>)constants
                                       withJavaUtilMap:(id<JavaUtilMap>)methods
                                      withSMStmt_Class:(SMStmt_Class *)stmt;

- (id<JavaUtilSet>)allKeys;

- (SMSimiObjectImpl *)enumerateWithSMSimiClassImpl:(SMSimiClassImpl *)objectClass;

- (SMSimiMethod *)findMethodWithSMSimiObjectImpl:(SMSimiObjectImpl *)instance
                                    withNSString:(NSString *)name
                             withJavaLangInteger:(JavaLangInteger *)arity;

- (id<SMSimiProperty>)getWithSMToken:(SMToken *)name
                 withJavaLangInteger:(JavaLangInteger *)arity
                   withSMEnvironment:(SMEnvironment *)environment;

- (id<JavaUtilSet>)getConstructors;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)arg0
                                      withBoolean:(jboolean)arg1
                        withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)arg2
                            withJavaUtilArrayList:(JavaUtilArrayList *)arg3 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl)

J2OBJC_FIELD_SETTER(SMSimiClassImpl, type_, SMSimiClassImpl_Type *)
J2OBJC_FIELD_SETTER(SMSimiClassImpl, name_, NSString *)
J2OBJC_FIELD_SETTER(SMSimiClassImpl, superclasses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(SMSimiClassImpl, stmt_, SMStmt_Class *)
J2OBJC_FIELD_SETTER(SMSimiClassImpl, methods_, id<JavaUtilMap>)

FOUNDATION_EXPORT void SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(SMSimiClassImpl *self, SMSimiClassImpl_Type *type, NSString *name, id<JavaUtilList> superclasses, id<JavaUtilMap> constants, id<JavaUtilMap> methods, SMStmt_Class *stmt);

FOUNDATION_EXPORT SMSimiClassImpl *new_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(SMSimiClassImpl_Type *type, NSString *name, id<JavaUtilList> superclasses, id<JavaUtilMap> constants, id<JavaUtilMap> methods, SMStmt_Class *stmt) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMSimiClassImpl *create_SMSimiClassImpl_initWithSMSimiClassImpl_Type_withNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(SMSimiClassImpl_Type *type, NSString *name, id<JavaUtilList> superclasses, id<JavaUtilMap> constants, id<JavaUtilMap> methods, SMStmt_Class *stmt);

J2OBJC_TYPE_LITERAL_HEADER(SMSimiClassImpl)

@compatibility_alias NetGlobulusSimiSimiClassImpl SMSimiClassImpl;

#endif

#if !defined (SMSimiClassImpl_SuperClassesList_) && (INCLUDE_ALL_NetGlobulusSimiSimiClassImpl || defined(INCLUDE_SMSimiClassImpl_SuperClassesList))
#define SMSimiClassImpl_SuperClassesList_

#define RESTRICT_NetGlobulusSimiSimiValue 1
#define INCLUDE_SMSimiValue 1
#include "SimiValue.h"

@protocol JavaUtilList;

@interface SMSimiClassImpl_SuperClassesList : SMSimiValue {
 @public
  id<JavaUtilList> value_;
}

#pragma mark Public

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_;

- (jint)compareToWithId:(SMSimiValue *)o;

- (SMSimiValue *)copy__ OBJC_METHOD_FAMILY_NONE;

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SMSimiClassImpl_SuperClassesList)

J2OBJC_FIELD_SETTER(SMSimiClassImpl_SuperClassesList, value_, id<JavaUtilList>)

FOUNDATION_EXPORT void SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(SMSimiClassImpl_SuperClassesList *self, id<JavaUtilList> value);

FOUNDATION_EXPORT SMSimiClassImpl_SuperClassesList *new_SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(id<JavaUtilList> value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMSimiClassImpl_SuperClassesList *create_SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(id<JavaUtilList> value);

J2OBJC_TYPE_LITERAL_HEADER(SMSimiClassImpl_SuperClassesList)

#endif

#if !defined (SMSimiClassImpl_Type_) && (INCLUDE_ALL_NetGlobulusSimiSimiClassImpl || defined(INCLUDE_SMSimiClassImpl_Type))
#define SMSimiClassImpl_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class SMTokenType;

typedef NS_ENUM(NSUInteger, SMSimiClassImpl_Type_Enum) {
  SMSimiClassImpl_Type_Enum_REGULAR = 0,
  SMSimiClassImpl_Type_Enum_FINAL = 1,
  SMSimiClassImpl_Type_Enum_OPEN = 2,
};

@interface SMSimiClassImpl_Type : JavaLangEnum {
 @public
  SMTokenType *tokenType_;
}

+ (SMSimiClassImpl_Type * __nonnull)REGULAR;

+ (SMSimiClassImpl_Type * __nonnull)FINAL;

+ (SMSimiClassImpl_Type * __nonnull)OPEN;

#pragma mark Public

+ (SMSimiClassImpl_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

+ (SMSimiClassImpl_Type *)fromWithSMTokenType:(SMTokenType *)tokenType;

- (SMSimiClassImpl_Type_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SMSimiClassImpl_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SMSimiClassImpl_Type *SMSimiClassImpl_Type_values_[];

inline SMSimiClassImpl_Type *SMSimiClassImpl_Type_get_REGULAR(void);
J2OBJC_ENUM_CONSTANT(SMSimiClassImpl_Type, REGULAR)

inline SMSimiClassImpl_Type *SMSimiClassImpl_Type_get_FINAL(void);
J2OBJC_ENUM_CONSTANT(SMSimiClassImpl_Type, FINAL)

inline SMSimiClassImpl_Type *SMSimiClassImpl_Type_get_OPEN(void);
J2OBJC_ENUM_CONSTANT(SMSimiClassImpl_Type, OPEN)

J2OBJC_FIELD_SETTER(SMSimiClassImpl_Type, tokenType_, SMTokenType *)

FOUNDATION_EXPORT SMSimiClassImpl_Type *SMSimiClassImpl_Type_fromWithSMTokenType_(SMTokenType *tokenType);

FOUNDATION_EXPORT IOSObjectArray *SMSimiClassImpl_Type_values(void);

FOUNDATION_EXPORT SMSimiClassImpl_Type *SMSimiClassImpl_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SMSimiClassImpl_Type *SMSimiClassImpl_Type_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SMSimiClassImpl_Type)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiSimiClassImpl")
