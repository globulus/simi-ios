//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Simi.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "Debugger.h"
#include "ErrorHub.h"
#include "ErrorWatcher.h"
#include "Interpreter.h"
#include "JavaNativeModulesManager.h"
#include "NativeModulesManager.h"
#include "Parser.h"
#include "Resolver.h"
#include "RuntimeError.h"
#include "Scanner.h"
#include "Simi.h"
#include "SimiProperty.h"
#include "SimiValue.h"
#include "Token.h"
#include "TokenType.h"

@interface SMSimi ()

+ (NSString *)readFileWithNSString:(NSString *)path
                       withBoolean:(jboolean)prepend;

+ (void)runFileWithNSString:(NSString *)path;

+ (void)runPrompt;

+ (void)runWithNSString:(NSString *)source;

+ (id<JavaUtilList>)scanImportsWithJavaUtilList:(id<JavaUtilList>)input
                               withJavaUtilList:(id<JavaUtilList>)imports
                     withSMNativeModulesManager:(id<SMNativeModulesManager>)nativeModulesManager;

@end

inline NSString *SMSimi_get_FILE_SIMI(void);
static NSString *SMSimi_FILE_SIMI = @"Simi";
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimi, FILE_SIMI, NSString *)

inline SMInterpreter *SMSimi_get_interpreter(void);
inline SMInterpreter *SMSimi_set_interpreter(SMInterpreter *value);
static SMInterpreter *SMSimi_interpreter;
J2OBJC_STATIC_FIELD_OBJ(SMSimi, interpreter, SMInterpreter *)

inline SMDebugger *SMSimi_get_debugger(void);
inline SMDebugger *SMSimi_set_debugger(SMDebugger *value);
static SMDebugger *SMSimi_debugger;
J2OBJC_STATIC_FIELD_OBJ(SMSimi, debugger, SMDebugger *)

inline id<SMErrorWatcher> SMSimi_get_WATCHER(void);
static id<SMErrorWatcher> SMSimi_WATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMSimi, WATCHER, id<SMErrorWatcher>)

__attribute__((unused)) static NSString *SMSimi_readFileWithNSString_withBoolean_(NSString *path, jboolean prepend);

__attribute__((unused)) static void SMSimi_runFileWithNSString_(NSString *path);

__attribute__((unused)) static void SMSimi_runPrompt(void);

__attribute__((unused)) static void SMSimi_runWithNSString_(NSString *source);

__attribute__((unused)) static id<JavaUtilList> SMSimi_scanImportsWithJavaUtilList_withJavaUtilList_withSMNativeModulesManager_(id<JavaUtilList> input, id<JavaUtilList> imports, id<SMNativeModulesManager> nativeModulesManager);

@interface SMSimi_1 : NSObject < SMErrorWatcher >

- (instancetype __nonnull)init;

- (void)reportWithNSString:(NSString *)file
                   withInt:(jint)line
              withNSString:(NSString *)where
              withNSString:(NSString *)message;

- (void)runtimeErrorWithSMRuntimeError:(SMRuntimeError *)error;

@end

J2OBJC_EMPTY_STATIC_INIT(SMSimi_1)

__attribute__((unused)) static void SMSimi_1_init(SMSimi_1 *self);

__attribute__((unused)) static SMSimi_1 *new_SMSimi_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMSimi_1 *create_SMSimi_1_init(void);

J2OBJC_INITIALIZED_DEFN(SMSimi)

jboolean SMSimi_hadError = false;
jboolean SMSimi_hadRuntimeError = false;

@implementation SMSimi

+ (jboolean)hadError {
  return SMSimi_hadError;
}

+ (void)setHadError:(jboolean)value {
  SMSimi_hadError = value;
}

+ (jboolean)hadRuntimeError {
  return SMSimi_hadRuntimeError;
}

+ (void)setHadRuntimeError:(jboolean)value {
  SMSimi_hadRuntimeError = value;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMSimi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  SMSimi_mainWithNSStringArray_(args);
}

+ (NSString *)readFileWithNSString:(NSString *)path
                       withBoolean:(jboolean)prepend {
  return SMSimi_readFileWithNSString_withBoolean_(path, prepend);
}

+ (void)runFileWithNSString:(NSString *)path {
  SMSimi_runFileWithNSString_(path);
}

+ (void)runPrompt {
  SMSimi_runPrompt();
}

+ (void)runWithNSString:(NSString *)source {
  SMSimi_runWithNSString_(source);
}

+ (id<JavaUtilList>)scanImportsWithJavaUtilList:(id<JavaUtilList>)input
                               withJavaUtilList:(id<JavaUtilList>)imports
                     withSMNativeModulesManager:(id<SMNativeModulesManager>)nativeModulesManager {
  return SMSimi_scanImportsWithJavaUtilList_withJavaUtilList_withSMNativeModulesManager_(input, imports, nativeModulesManager);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, 2, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 6, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 8, 9, 2, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(readFileWithNSString:withBoolean:);
  methods[3].selector = @selector(runFileWithNSString:);
  methods[4].selector = @selector(runPrompt);
  methods[5].selector = @selector(runWithNSString:);
  methods[6].selector = @selector(scanImportsWithJavaUtilList:withJavaUtilList:withSMNativeModulesManager:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FILE_SIMI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "interpreter", "LSMInterpreter;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "debugger", "LSMDebugger;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "hadError", "Z", .constantValue.asLong = 0, 0x8, -1, 14, -1, -1 },
    { "hadRuntimeError", "Z", .constantValue.asLong = 0, 0x8, -1, 15, -1, -1 },
    { "WATCHER", "LSMErrorWatcher;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaIoIOException;", "readFile", "LNSString;Z", "runFile", "LNSString;", "run", "scanImports", "LJavaUtilList;LJavaUtilList;LSMNativeModulesManager;", "(Ljava/util/List<LToken;>;Ljava/util/List<Ljava/lang/String;>;LNativeModulesManager;)Ljava/util/List<LToken;>;", &SMSimi_FILE_SIMI, &SMSimi_interpreter, &SMSimi_debugger, &SMSimi_hadError, &SMSimi_hadRuntimeError, &SMSimi_WATCHER };
  static const J2ObjcClassInfo _SMSimi = { "Simi", "net.globulus.simi", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_SMSimi;
}

+ (void)initialize {
  if (self == [SMSimi class]) {
    SMSimi_debugger = new_SMDebugger_initWithSMDebugger_DebuggerInterface_(new_SMDebugger_ConsoleInterface_init());
    SMSimi_WATCHER = new_SMSimi_1_init();
    J2OBJC_SET_INITIALIZED(SMSimi)
  }
}

@end

void SMSimi_init(SMSimi *self) {
  NSObject_init(self);
}

SMSimi *new_SMSimi_init() {
  J2OBJC_NEW_IMPL(SMSimi, init)
}

SMSimi *create_SMSimi_init() {
  J2OBJC_CREATE_IMPL(SMSimi, init)
}

void SMSimi_mainWithNSStringArray_(IOSObjectArray *args) {
  SMSimi_initialize();
  [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) addWatcherWithSMErrorWatcher:SMSimi_WATCHER];
  if (((IOSObjectArray *) nil_chk(args))->size_ > 1) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: simi [script]"];
  }
  else if (args->size_ == 1) {
    SMSimi_runFileWithNSString_(IOSObjectArray_Get(args, 0));
  }
  else {
    SMSimi_runPrompt();
  }
  [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) removeWatcherWithSMErrorWatcher:SMSimi_WATCHER];
}

NSString *SMSimi_readFileWithNSString_withBoolean_(NSString *path, jboolean prepend) {
  SMSimi_initialize();
  return nil;
}

void SMSimi_runFileWithNSString_(NSString *path) {
  SMSimi_initialize();
  SMSimi_runWithNSString_(SMSimi_readFileWithNSString_withBoolean_(path, true));
  if (SMSimi_hadError) JavaLangSystem_exitWithInt_(65);
  if (SMSimi_hadRuntimeError) JavaLangSystem_exitWithInt_(70);
}

void SMSimi_runPrompt() {
  SMSimi_initialize();
  JavaIoInputStreamReader *input = new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in));
  JavaIoBufferedReader *reader = new_JavaIoBufferedReader_initWithJavaIoReader_(input);
  for (; ; ) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"> "];
    SMSimi_runWithNSString_([reader readLine]);
    SMSimi_hadError = false;
  }
}

void SMSimi_runWithNSString_(NSString *source) {
  SMSimi_initialize();
  id<SMNativeModulesManager> nativeModulesManager = new_SMJavaNativeModulesManager_init();
  id<JavaUtilList> imports = new_JavaUtilArrayList_init();
  jlong time = JavaLangSystem_currentTimeMillis();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"Scanning and resolving imports..."];
  SMScanner *scanner = new_SMScanner_initWithNSString_withNSString_withSMDebugger_(SMSimi_FILE_SIMI, source, SMSimi_debugger);
  id<JavaUtilList> tokens = SMSimi_scanImportsWithJavaUtilList_withJavaUtilList_withSMNativeModulesManager_([scanner scanTokensWithBoolean:true], imports, nativeModulesManager);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("CJ$", ' ', (JavaLangSystem_currentTimeMillis() - time), @" ms")];
  time = JavaLangSystem_currentTimeMillis();
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"Parsing..."];
  SMSimi_interpreter = new_SMInterpreter_initWithJavaUtilCollection_withSMDebugger_(JavaUtilCollections_singletonListWithId_(nativeModulesManager), SMSimi_debugger);
  [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) setInterpreterWithSMBlockInterpreter:SMSimi_interpreter];
  SMParser *parser = new_SMParser_initWithJavaUtilList_withSMDebugger_(tokens, SMSimi_debugger);
  id<JavaUtilList> statements = [parser parse];
  if (SMSimi_hadError) return;
  SMResolver *resolver = new_SMResolver_initWithSMInterpreter_(SMSimi_interpreter);
  [resolver resolveWithJavaUtilList:statements];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("CJ$", ' ', (JavaLangSystem_currentTimeMillis() - time), @" ms")];
  time = JavaLangSystem_currentTimeMillis();
  if (SMSimi_hadError) return;
  (void) [((SMInterpreter *) nil_chk(SMSimi_interpreter)) interpretWithJavaUtilList:statements];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$J$", @"Interpreting... ", (JavaLangSystem_currentTimeMillis() - time), @" ms")];
}

id<JavaUtilList> SMSimi_scanImportsWithJavaUtilList_withJavaUtilList_withSMNativeModulesManager_(id<JavaUtilList> input, id<JavaUtilList> imports, id<SMNativeModulesManager> nativeModulesManager) {
  SMSimi_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  jint len = [((id<JavaUtilList>) nil_chk(input)) size];
  for (jint i = 0; i < len; i++) {
    SMToken *token = [input getWithInt:i];
    if (((SMToken *) nil_chk(token))->type_ != JreLoadEnum(SMTokenType, IMPORT)) {
      continue;
    }
    i++;
    SMToken *nextToken = [input getWithInt:i];
    if (((SMToken *) nil_chk(nextToken))->type_ != JreLoadEnum(SMTokenType, STRING)) {
      continue;
    }
    NSString *location = [((SMSimiValue *) nil_chk(nextToken->literal_)) getString];
    if ([((id<JavaUtilList>) nil_chk(imports)) containsWithId:location]) {
      continue;
    }
    NSString *pathString = @"";
    if ([pathString java_hasSuffix:@".jar"]) {
      [((id<SMNativeModulesManager>) nil_chk(nativeModulesManager)) load__WithNSString:pathString withBoolean:true];
    }
    else if ([pathString java_hasSuffix:@".simi"]) {
      id<JavaUtilList> tokens = [new_SMScanner_initWithNSString_withNSString_withSMDebugger_(pathString, SMSimi_readFileWithNSString_withBoolean_(location, false), SMSimi_debugger) scanTokensWithBoolean:false];
      [result addAllWithJavaUtilCollection:SMSimi_scanImportsWithJavaUtilList_withJavaUtilList_withSMNativeModulesManager_(tokens, imports, nativeModulesManager)];
    }
  }
  [result addAllWithJavaUtilCollection:input];
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimi)

@implementation SMSimi_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMSimi_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reportWithNSString:(NSString *)file
                   withInt:(jint)line
              withNSString:(NSString *)where
              withNSString:(NSString *)message {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$I$$$$", @"[\"", file, @"\" line ", line, @"] Error", where, @": ", message)];
  *JreLoadStaticRef(SMSimi, hadError) = true;
}

- (void)runtimeErrorWithSMRuntimeError:(SMRuntimeError *)error {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$IC", [((SMRuntimeError *) nil_chk(error)) getMessage], @"\n[\"", ((SMToken *) nil_chk(error->token_))->file_, @"\" line ", error->token_->line_, ']')];
  *JreLoadStaticRef(SMSimi, hadRuntimeError) = true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reportWithNSString:withInt:withNSString:withNSString:);
  methods[2].selector = @selector(runtimeErrorWithSMRuntimeError:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "report", "LNSString;ILNSString;LNSString;", "runtimeError", "LSMRuntimeError;", "LSMSimi;" };
  static const J2ObjcClassInfo _SMSimi_1 = { "", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 4, -1, -1, -1, -1 };
  return &_SMSimi_1;
}

@end

void SMSimi_1_init(SMSimi_1 *self) {
  NSObject_init(self);
}

SMSimi_1 *new_SMSimi_1_init() {
  J2OBJC_NEW_IMPL(SMSimi_1, init)
}

SMSimi_1 *create_SMSimi_1_init() {
  J2OBJC_CREATE_IMPL(SMSimi_1, init)
}
