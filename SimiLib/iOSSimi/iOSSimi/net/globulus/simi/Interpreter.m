//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Interpreter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Stack.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/function/Supplier.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"
#include "BaseClassesNativeImpl.h"
#include "BlockImpl.h"
#include "BlockInterpreter.h"
#include "Break.h"
#include "Constants.h"
#include "Continue.h"
#include "Environment.h"
#include "ErrorHub.h"
#include "Expr.h"
#include "Interpreter.h"
#include "NativeModulesManager.h"
#include "OverloadableFunction.h"
#include "Parser.h"
#include "Return.h"
#include "RuntimeError.h"
#include "Scanner.h"
#include "SimiBlock.h"
#include "SimiCallable.h"
#include "SimiClass.h"
#include "SimiClassImpl.h"
#include "SimiEnvironment.h"
#include "SimiException.h"
#include "SimiFunction.h"
#include "SimiMethod.h"
#include "SimiObject.h"
#include "SimiObjectImpl.h"
#include "SimiProperty.h"
#include "SimiPropertyImpl.h"
#include "SimiStatement.h"
#include "SimiValue.h"
#include "SparseArray.h"
#include "Stmt.h"
#include "TempNull.h"
#include "Token.h"
#include "TokenType.h"
#include "Yield.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface SMInterpreter () {
 @public
  SMEnvironment *globals_;
  SMEnvironment *environment_;
  id<JavaUtilMap> locals_;
  SMBaseClassesNativeImpl *baseClassesNativeImpl_;
  JavaUtilStack *loopBlocks_;
  JavaUtilStack *raisedExceptions_;
  id<JavaUtilMap> yieldedStmts_;
  id<JavaUtilMap> annotations_;
  id<JavaUtilList> annotationsBuffer_;
}

- (id<SMSimiProperty>)evaluateWithSMExpr:(SMExpr *)expr;

- (id<SMSimiProperty>)evaluateWithSMExpr:(SMExpr *)expr
                       withNSObjectArray:(IOSObjectArray *)params;

- (id<SMSimiProperty>)executeWithSMStmt:(SMStmt *)stmt;

- (id<SMSimiProperty>)callWithSMSimiProperty:(id<SMSimiProperty>)prop
                            withJavaUtilList:(id<JavaUtilList>)args
                                 withSMToken:(SMToken *)paren;

- (id<SMSimiProperty>)callWithSMSimiValue:(SMSimiValue *)callee
                         withJavaUtilList:(id<JavaUtilList>)args
                              withSMToken:(SMToken *)paren;

- (id<SMSimiProperty>)callWithSMSimiValue:(SMSimiValue *)callee
                              withSMToken:(SMToken *)paren
                         withJavaUtilList:(id<JavaUtilList>)arguments;

- (SMToken *)evaluateGetSetNameWithSMToken:(SMToken *)origin
                                withSMExpr:(SMExpr *)name;

- (void)executeRescueBlockWithSMStmt_Rescue:(SMStmt_Rescue *)rescue
                        withSMSimiException:(SMSimiException *)e;

- (id<SMSimiProperty>)lookUpVariableWithSMToken:(SMToken *)name
                                     withSMExpr:(SMExpr *)expr;

- (void)checkNumberOperandWithSMToken:(SMToken *)operator_
                      withSMSimiValue:(SMSimiValue *)operand;

- (void)checkNumberOperandsWithSMToken:(SMToken *)operator_
                       withSMSimiValue:(SMSimiValue *)left
                       withSMSimiValue:(SMSimiValue *)right;

- (jboolean)isEqualWithSMSimiValue:(SMSimiValue *)a
                   withSMSimiValue:(SMSimiValue *)b
                 withSMExpr_Binary:(SMExpr_Binary *)expr;

- (SMSimiValue *)compareWithSMSimiValue:(SMSimiValue *)a
                        withSMSimiValue:(SMSimiValue *)b
                      withSMExpr_Binary:(SMExpr_Binary *)expr;

- (jboolean)isInstanceWithSMSimiValue:(SMSimiValue *)a
                      withSMSimiValue:(SMSimiValue *)b
                    withSMExpr_Binary:(SMExpr_Binary *)expr;

- (jboolean)isInWithSMSimiValue:(SMSimiValue *)a
                withSMSimiValue:(SMSimiValue *)b
              withSMExpr_Binary:(SMExpr_Binary *)expr;

- (NSString *)stringifyWithSMSimiProperty:(id<SMSimiProperty>)object;

- (jboolean)isBaseClassWithNSString:(NSString *)className_;

- (SMSimiClassImpl *)getObjectClass;

- (void)putBlockWithSMStmt_BlockStmt:(id<SMStmt_BlockStmt>)stmt
                     withSMBlockImpl:(SMBlockImpl *)block;

- (void)applyAnnotationsWithId:(id)key;

- (id<JavaUtilList>)getAnnotationsWithId:(id)key;

@end

J2OBJC_FIELD_SETTER(SMInterpreter, globals_, SMEnvironment *)
J2OBJC_FIELD_SETTER(SMInterpreter, environment_, SMEnvironment *)
J2OBJC_FIELD_SETTER(SMInterpreter, locals_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(SMInterpreter, baseClassesNativeImpl_, SMBaseClassesNativeImpl *)
J2OBJC_FIELD_SETTER(SMInterpreter, loopBlocks_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(SMInterpreter, raisedExceptions_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(SMInterpreter, yieldedStmts_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(SMInterpreter, annotations_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(SMInterpreter, annotationsBuffer_, id<JavaUtilList>)

__attribute__((unused)) static id<SMSimiProperty> SMInterpreter_evaluateWithSMExpr_(SMInterpreter *self, SMExpr *expr);

__attribute__((unused)) static id<SMSimiProperty> SMInterpreter_evaluateWithSMExpr_withNSObjectArray_(SMInterpreter *self, SMExpr *expr, IOSObjectArray *params);

__attribute__((unused)) static id<SMSimiProperty> SMInterpreter_executeWithSMStmt_(SMInterpreter *self, SMStmt *stmt);

__attribute__((unused)) static id<SMSimiProperty> SMInterpreter_callWithSMSimiProperty_withJavaUtilList_withSMToken_(SMInterpreter *self, id<SMSimiProperty> prop, id<JavaUtilList> args, SMToken *paren);

__attribute__((unused)) static id<SMSimiProperty> SMInterpreter_callWithSMSimiValue_withJavaUtilList_withSMToken_(SMInterpreter *self, SMSimiValue *callee, id<JavaUtilList> args, SMToken *paren);

__attribute__((unused)) static id<SMSimiProperty> SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(SMInterpreter *self, SMSimiValue *callee, SMToken *paren, id<JavaUtilList> arguments);

__attribute__((unused)) static SMToken *SMInterpreter_evaluateGetSetNameWithSMToken_withSMExpr_(SMInterpreter *self, SMToken *origin, SMExpr *name);

__attribute__((unused)) static void SMInterpreter_executeRescueBlockWithSMStmt_Rescue_withSMSimiException_(SMInterpreter *self, SMStmt_Rescue *rescue, SMSimiException *e);

__attribute__((unused)) static id<SMSimiProperty> SMInterpreter_lookUpVariableWithSMToken_withSMExpr_(SMInterpreter *self, SMToken *name, SMExpr *expr);

__attribute__((unused)) static void SMInterpreter_checkNumberOperandWithSMToken_withSMSimiValue_(SMInterpreter *self, SMToken *operator_, SMSimiValue *operand);

__attribute__((unused)) static void SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(SMInterpreter *self, SMToken *operator_, SMSimiValue *left, SMSimiValue *right);

__attribute__((unused)) static jboolean SMInterpreter_isEqualWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr);

__attribute__((unused)) static SMSimiValue *SMInterpreter_compareWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr);

__attribute__((unused)) static jboolean SMInterpreter_isInstanceWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr);

__attribute__((unused)) static jboolean SMInterpreter_isInWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr);

__attribute__((unused)) static NSString *SMInterpreter_stringifyWithSMSimiProperty_(SMInterpreter *self, id<SMSimiProperty> object);

__attribute__((unused)) static jboolean SMInterpreter_isBaseClassWithNSString_(SMInterpreter *self, NSString *className_);

__attribute__((unused)) static SMSimiClassImpl *SMInterpreter_getObjectClass(SMInterpreter *self);

__attribute__((unused)) static void SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(SMInterpreter *self, id<SMStmt_BlockStmt> stmt, SMBlockImpl *block);

__attribute__((unused)) static void SMInterpreter_applyAnnotationsWithId_(SMInterpreter *self, id key);

__attribute__((unused)) static id<JavaUtilList> SMInterpreter_getAnnotationsWithId_(SMInterpreter *self, id key);

@interface SMInterpreter_1 : NSObject < SMSimiCallable >

- (instancetype __nonnull)init;

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst;

- (jint)arity;

- (id<SMSimiProperty>)callWithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter
                                withJavaUtilList:(id<JavaUtilList>)arguments
                                     withBoolean:(jboolean)rethrow;

@end

J2OBJC_EMPTY_STATIC_INIT(SMInterpreter_1)

__attribute__((unused)) static void SMInterpreter_1_init(SMInterpreter_1 *self);

__attribute__((unused)) static SMInterpreter_1 *new_SMInterpreter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMInterpreter_1 *create_SMInterpreter_1_init(void);

@interface SMInterpreter_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiObject>)a;

@end

J2OBJC_STATIC_INIT(SMInterpreter_$Lambda$1)

inline SMInterpreter_$Lambda$1 *SMInterpreter_$Lambda$1_get_instance(void);
static SMInterpreter_$Lambda$1 *SMInterpreter_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMInterpreter_$Lambda$1, instance, SMInterpreter_$Lambda$1 *)

__attribute__((unused)) static void SMInterpreter_$Lambda$1_init(SMInterpreter_$Lambda$1 *self);

__attribute__((unused)) static SMInterpreter_$Lambda$1 *new_SMInterpreter_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMInterpreter_$Lambda$1 *create_SMInterpreter_$Lambda$1_init(void);

@interface SMInterpreter_$Lambda$2 : NSObject < JavaUtilFunctionSupplier >

- (id)get;

@end

J2OBJC_STATIC_INIT(SMInterpreter_$Lambda$2)

inline SMInterpreter_$Lambda$2 *SMInterpreter_$Lambda$2_get_instance(void);
static SMInterpreter_$Lambda$2 *SMInterpreter_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMInterpreter_$Lambda$2, instance, SMInterpreter_$Lambda$2 *)

__attribute__((unused)) static void SMInterpreter_$Lambda$2_init(SMInterpreter_$Lambda$2 *self);

__attribute__((unused)) static SMInterpreter_$Lambda$2 *new_SMInterpreter_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMInterpreter_$Lambda$2 *create_SMInterpreter_$Lambda$2_init(void);

@interface SMInterpreter_$Lambda$3 : NSObject < JavaUtilFunctionPredicate > {
 @public
  SMExpr_Super *val$expr_;
}

- (jboolean)testWithId:(SMSimiClassImpl *)superclass_;

@end

J2OBJC_EMPTY_STATIC_INIT(SMInterpreter_$Lambda$3)

__attribute__((unused)) static void SMInterpreter_$Lambda$3_initWithSMExpr_Super_(SMInterpreter_$Lambda$3 *self, SMExpr_Super *capture$0);

__attribute__((unused)) static SMInterpreter_$Lambda$3 *new_SMInterpreter_$Lambda$3_initWithSMExpr_Super_(SMExpr_Super *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMInterpreter_$Lambda$3 *create_SMInterpreter_$Lambda$3_initWithSMExpr_Super_(SMExpr_Super *capture$0);

SMInterpreter *SMInterpreter_sharedInstance;

@implementation SMInterpreter

+ (SMInterpreter *)sharedInstance {
  return SMInterpreter_sharedInstance;
}

+ (void)setSharedInstance:(SMInterpreter *)value {
  SMInterpreter_sharedInstance = value;
}

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)nativeModulesManagers {
  SMInterpreter_initWithJavaUtilCollection_(self, nativeModulesManagers);
  return self;
}

- (id<SMSimiProperty>)interpretWithJavaUtilList:(id<JavaUtilList>)statements {
  id<SMSimiProperty> result = nil;
  @try {
    for (SMStmt * __strong statement in nil_chk(statements)) {
      if ([((JavaUtilStack *) nil_chk(raisedExceptions_)) isEmpty]) {
        result = SMInterpreter_executeWithSMStmt_(self, statement);
      }
      else {
        @throw nil_chk([raisedExceptions_ peek]);
      }
    }
  }
  @catch (SMRuntimeError *error) {
    [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) runtimeErrorWithSMRuntimeError:error];
  }
  return result;
}

- (id<SMSimiProperty>)evaluateWithSMExpr:(SMExpr *)expr {
  return SMInterpreter_evaluateWithSMExpr_(self, expr);
}

- (id<SMSimiProperty>)evaluateWithSMExpr:(SMExpr *)expr
                       withNSObjectArray:(IOSObjectArray *)params {
  return SMInterpreter_evaluateWithSMExpr_withNSObjectArray_(self, expr, params);
}

- (id<SMSimiProperty>)executeWithSMStmt:(SMStmt *)stmt {
  return SMInterpreter_executeWithSMStmt_(self, stmt);
}

- (void)resolveWithSMExpr:(SMExpr *)expr
                  withInt:(jint)depth {
  (void) [((id<JavaUtilMap>) nil_chk(locals_)) putWithId:expr withId:JavaLangInteger_valueOfWithInt_(depth)];
}

- (void)executeBlockWithSMSimiBlock:(id<SMSimiBlock>)block
              withSMSimiEnvironment:(id<SMSimiEnvironment>)environment
                            withInt:(jint)startAt {
  SMEnvironment *previous = self->environment_;
  @try {
    self->environment_ = (SMEnvironment *) cast_chk(environment, [SMEnvironment class]);
    id<JavaUtilList> statements = [((id<SMSimiBlock>) nil_chk(block)) getStatements];
    jint size = [((id<JavaUtilList>) nil_chk(statements)) size];
    for (jint i = startAt < size ? startAt : 0; i < size; i++) {
      @try {
        if ([((JavaUtilStack *) nil_chk(raisedExceptions_)) isEmpty]) {
          SMStmt *statement = (SMStmt *) cast_chk([statements getWithInt:i], [SMStmt class]);
          (void) SMInterpreter_executeWithSMStmt_(self, statement);
        }
        else {
          SMStmt_Rescue *rescue = nil;
          for (; i < size; i++) {
            SMStmt *statement = (SMStmt *) cast_chk([statements getWithInt:i], [SMStmt class]);
            if ([statement isKindOfClass:[SMStmt_Rescue class]]) {
              rescue = (SMStmt_Rescue *) cast_chk(statement, [SMStmt_Rescue class]);
              break;
            }
          }
          if (rescue != nil) {
            SMSimiException *e = [raisedExceptions_ pop];
            SMInterpreter_executeRescueBlockWithSMStmt_Rescue_withSMSimiException_(self, rescue, e);
          }
          else if ([block canReturn]) {
            @throw new_SMReturn_initWithSMSimiProperty_(nil);
          }
          else {
            @throw new_SMBreak_init();
          }
        }
      }
      @catch (SMYield *yield) {
        [block yieldWithInt:i + (yield->rethrown_ ? 0 : 1)];
        @throw yield;
      }
    }
  }
  @finally {
    self->environment_ = previous;
  }
}

- (id<SMSimiProperty>)getGlobalWithNSString:(NSString *)name {
  return [((SMEnvironment *) nil_chk(globals_)) getAtWithInt:0 withNSString:name];
}

- (id<SMSimiEnvironment>)getEnvironment {
  return environment_;
}

- (void)raiseExceptionWithSMSimiException:(SMSimiException *)e {
  (void) [((JavaUtilStack *) nil_chk(raisedExceptions_)) pushWithId:e];
}

- (id<SMSimiObject>)newObjectWithBoolean:(jboolean)immutable
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)props {
  return SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(SMInterpreter_getObjectClass(self), immutable, props);
}

- (id<SMSimiObject>)newArrayWithBoolean:(jboolean)immutable
                  withJavaUtilArrayList:(JavaUtilArrayList *)props {
  return SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(SMInterpreter_getObjectClass(self), immutable, props);
}

- (id<SMSimiObject>)newInstanceWithSMSimiClass:(id<SMSimiClass>)clazz
                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)props {
  return SMSimiObjectImpl_instanceWithSMSimiClassImpl_withJavaUtilLinkedHashMap_((SMSimiClassImpl *) cast_chk(clazz, [SMSimiClassImpl class]), props);
}

- (SMSimiValue *)visitBlockExprWithSMExpr_Block:(SMExpr_Block *)stmt
                                    withBoolean:(jboolean)newScope
                                    withBoolean:(jboolean)execute {
  if (execute) {
    [self executeBlockWithSMSimiBlock:stmt withSMSimiEnvironment:new_SMEnvironment_initWithSMEnvironment_(environment_) withInt:0];
    return nil;
  }
  return new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(new_SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_(stmt, environment_), nil, nil);
}

- (id<SMSimiProperty>)visitAnnotationStmtWithSMStmt_Annotation:(SMStmt_Annotation *)stmt {
  id<SMSimiObject> object = SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_([((id<SMSimiProperty>) nil_chk(SMInterpreter_evaluateWithSMExpr_(self, ((SMStmt_Annotation *) nil_chk(stmt))->expr_))) getValue], self);
  [((id<JavaUtilList>) nil_chk(annotationsBuffer_)) addWithId:object];
  return nil;
}

- (id<SMSimiProperty>)visitBreakStmtWithSMStmt_Break:(SMStmt_Break *)stmt {
  if ([((JavaUtilStack *) nil_chk(loopBlocks_)) isEmpty]) {
    [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) errorWithSMToken:((SMStmt_Break *) nil_chk(stmt))->name_ withNSString:@"Break outside a loop!"];
  }
  @throw new_SMBreak_init();
}

- (id<SMSimiProperty>)visitClassStmtWithSMStmt_Class:(SMStmt_Class *)stmt
                                         withBoolean:(jboolean)addToEnv {
  SMInterpreter_applyAnnotationsWithId_(self, stmt);
  NSString *className_ = ((SMToken *) nil_chk(((SMStmt_Class *) nil_chk(stmt))->name_))->lexeme_;
  jboolean isBaseClass = SMInterpreter_isBaseClassWithNSString_(self, className_);
  if (isBaseClass) {
    [((SMEnvironment *) nil_chk(globals_)) defineWithNSString:className_ withSMSimiProperty:nil];
  }
  else {
    [((SMEnvironment *) nil_chk(environment_)) defineWithNSString:className_ withSMSimiProperty:nil];
  }
  id<JavaUtilList> superclasses = nil;
  if (stmt->superclasses_ != nil) {
    superclasses = new_JavaUtilArrayList_init();
    for (SMExpr * __strong superclass_ in stmt->superclasses_) {
      id<SMSimiObject> clazz = [((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(SMInterpreter_evaluateWithSMExpr_(self, superclass_))) getValue])) getObject];
      if (!([clazz isKindOfClass:[SMSimiClassImpl class]])) {
        @throw new_SMRuntimeError_initWithSMToken_withNSString_(stmt->name_, @"Superclass must be a class.");
      }
      [superclasses addWithId:(SMSimiClassImpl *) cast_chk(clazz, [SMSimiClassImpl class])];
    }
  }
  else if (!isBaseClass) {
    superclasses = JavaUtilCollections_singletonListWithId_(SMInterpreter_getObjectClass(self));
  }
  environment_ = new_SMEnvironment_initWithSMEnvironment_(environment_);
  [environment_ defineWithNSString:SMConstants_SUPER withSMSimiProperty:new_SMSimiClassImpl_SuperClassesList_initWithJavaUtilList_(superclasses)];
  id<JavaUtilMap> constants = new_JavaUtilHashMap_init();
  for (SMExpr_Assign * __strong constant in nil_chk(stmt->constants_)) {
    if (((SMExpr_Assign *) nil_chk(constant))->annotations_ != nil) {
      for (SMStmt_Annotation * __strong annotation in constant->annotations_) {
        (void) [self visitAnnotationStmtWithSMStmt_Annotation:annotation];
      }
      SMInterpreter_applyAnnotationsWithId_(self, constant);
    }
    NSString *key = ((SMToken *) nil_chk(constant->name_))->lexeme_;
    id<SMSimiProperty> prop = SMInterpreter_evaluateWithSMExpr_(self, constant->value_);
    id<JavaUtilList> annotations = SMInterpreter_getAnnotationsWithId_(self, constant);
    if (prop != nil) {
      (void) [constants putWithId:key withId:new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_([prop getValue], annotations)];
    }
  }
  for (SMStmt_Class * __strong innerClass in nil_chk(stmt->innerClasses_)) {
    if (((SMStmt_Class *) nil_chk(innerClass))->annotations_ != nil) {
      for (SMStmt_Annotation * __strong annotation in innerClass->annotations_) {
        (void) [self visitAnnotationStmtWithSMStmt_Annotation:annotation];
      }
      SMInterpreter_applyAnnotationsWithId_(self, innerClass);
    }
    NSString *key = innerClass->name_->lexeme_;
    id<SMSimiProperty> prop = [self visitClassStmtWithSMStmt_Class:innerClass withBoolean:false];
    id<JavaUtilList> annotations = SMInterpreter_getAnnotationsWithId_(self, innerClass);
    if (prop != nil) {
      (void) [constants putWithId:key withId:new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_([prop getValue], annotations)];
    }
  }
  id<JavaUtilMap> methods = new_JavaUtilHashMap_init();
  for (SMStmt_Function * __strong method in nil_chk(stmt->methods_)) {
    if (((SMStmt_Function *) nil_chk(method))->annotations_ != nil) {
      for (SMStmt_Annotation * __strong annotation in method->annotations_) {
        (void) [self visitAnnotationStmtWithSMStmt_Annotation:annotation];
      }
      SMInterpreter_applyAnnotationsWithId_(self, method);
    }
    NSString *name = ((SMToken *) nil_chk(method->name_))->lexeme_;
    SMSimiFunction *function = new_SMSimiFunction_initWithSMStmt_Function_withSMEnvironment_withBoolean_withBoolean_withJavaUtilList_(method, environment_, [((NSString *) nil_chk(name)) isEqual:SMConstants_INIT], [((SMExpr_Block *) nil_chk(method->block_)) isNative], SMInterpreter_getAnnotationsWithId_(self, method));
    (void) [methods putWithId:new_SMOverloadableFunction_initWithNSString_withInt_(name, [function arity]) withId:function];
  }
  SMSimiClassImpl *klass = new_SMSimiClassImpl_initWithNSString_withJavaUtilList_withJavaUtilMap_withJavaUtilMap_withSMStmt_Class_(className_, superclasses, constants, methods, stmt);
  SMSimiValue *classValue = new_SMSimiValue_Object_initWithSMSimiObject_(klass);
  id<SMSimiProperty> classProp = new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_(classValue, SMInterpreter_getAnnotationsWithId_(self, stmt));
  if (isBaseClass) {
    [((SMEnvironment *) nil_chk(globals_)) assignWithSMToken:stmt->name_ withSMSimiProperty:classProp withBoolean:false];
  }
  else if (addToEnv) {
    [((SMEnvironment *) nil_chk(environment_)) assignWithSMToken:stmt->name_ withSMSimiProperty:classProp withBoolean:false];
  }
  return classProp;
}

- (id<SMSimiProperty>)visitContinueStmtWithSMStmt_Continue:(SMStmt_Continue *)stmt {
  if ([((JavaUtilStack *) nil_chk(loopBlocks_)) isEmpty]) {
    [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) errorWithSMToken:((SMStmt_Continue *) nil_chk(stmt))->name_ withNSString:@"Continue outside a loop!"];
  }
  @throw new_SMContinue_init();
}

- (id<SMSimiProperty>)visitExpressionStmtWithSMStmt_Expression:(SMStmt_Expression *)stmt {
  return SMInterpreter_evaluateWithSMExpr_(self, ((SMStmt_Expression *) nil_chk(stmt))->expression_);
}

- (SMSimiValue *)visitFunctionStmtWithSMStmt_Function:(SMStmt_Function *)stmt {
  SMInterpreter_applyAnnotationsWithId_(self, stmt);
  SMSimiFunction *function = new_SMSimiFunction_initWithSMStmt_Function_withSMEnvironment_withBoolean_withBoolean_withJavaUtilList_(stmt, environment_, false, [((SMExpr_Block *) nil_chk(((SMStmt_Function *) nil_chk(stmt))->block_)) isNative], SMInterpreter_getAnnotationsWithId_(self, stmt));
  SMSimiValue *value = new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(function, ((SMToken *) nil_chk(stmt->name_))->lexeme_, nil);
  [((SMEnvironment *) nil_chk(environment_)) defineWithNSString:stmt->name_->lexeme_ withSMSimiProperty:new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_(value, function->annotations_)];
  return value;
}

- (id<SMSimiProperty>)visitElsifStmtWithSMStmt_Elsif:(SMStmt_Elsif *)stmt {
  if (SMInterpreter_isTruthyWithSMSimiProperty_(SMInterpreter_evaluateWithSMExpr_(self, ((SMStmt_Elsif *) nil_chk(stmt))->condition_))) {
    SMBlockImpl *block = [((SMEnvironment *) nil_chk(self->environment_)) getOrAssignBlockWithSMStmt_BlockStmt:stmt withSMExpr_Block:stmt->thenBranch_ withJavaUtilMap:yieldedStmts_];
    @try {
      (void) [((SMBlockImpl *) nil_chk(block)) callWithSMBlockInterpreter:self withJavaUtilList:nil withBoolean:true];
    }
    @catch (SMReturn *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, block);
      }
      @throw returnYield;
    }
    @catch (SMYield *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, block);
      }
      @throw returnYield;
    }
    [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
    return new_SMSimiValue_Number_initWithBoolean_(true);
  }
  return new_SMSimiValue_Number_initWithBoolean_(false);
}

- (id<SMSimiProperty>)visitIfStmtWithSMStmt_If:(SMStmt_If *)stmt {
  if ([((JavaLangDouble *) nil_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([self visitElsifStmtWithSMStmt_Elsif:((SMStmt_If *) nil_chk(stmt))->ifstmt_])) getValue])) getNumber])) doubleValue] != 0) {
    return nil;
  }
  for (SMStmt_Elsif * __strong elsif in nil_chk(stmt->elsifs_)) {
    if ([((JavaLangDouble *) nil_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([self visitElsifStmtWithSMStmt_Elsif:elsif])) getValue])) getNumber])) doubleValue] != 0) {
      return nil;
    }
  }
  if (stmt->elseBranch_ != nil) {
    SMBlockImpl *elseBlock = [((SMEnvironment *) nil_chk(self->environment_)) getOrAssignBlockWithSMStmt_BlockStmt:stmt withSMExpr_Block:stmt->elseBranch_ withJavaUtilMap:yieldedStmts_];
    @try {
      (void) [((SMBlockImpl *) nil_chk(elseBlock)) callWithSMBlockInterpreter:self withJavaUtilList:nil withBoolean:true];
    }
    @catch (SMReturn *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, elseBlock);
      }
      @throw returnYield;
    }
    @catch (SMYield *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, elseBlock);
      }
      @throw returnYield;
    }
    [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
  }
  return nil;
}

- (id<SMSimiProperty>)visitPrintStmtWithSMStmt_Print:(SMStmt_Print *)stmt {
  id<SMSimiProperty> prop = SMInterpreter_evaluateWithSMExpr_(self, ((SMStmt_Print *) nil_chk(stmt))->expression_);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:SMInterpreter_stringifyWithSMSimiProperty_(self, prop)];
  return prop;
}

- (id<SMSimiProperty>)visitRescueStmtWithSMStmt_Rescue:(SMStmt_Rescue *)stmt {
  SMInterpreter_executeRescueBlockWithSMStmt_Rescue_withSMSimiException_(self, stmt, nil);
  return nil;
}

- (id<SMSimiProperty>)visitReturnStmtWithSMStmt_Return:(SMStmt_Return *)stmt {
  id<SMSimiProperty> prop = nil;
  if (((SMStmt_Return *) nil_chk(stmt))->value_ != nil) {
    prop = SMInterpreter_evaluateWithSMExpr_(self, stmt->value_);
  }
  @throw new_SMReturn_initWithSMSimiProperty_(prop);
}

- (id<SMSimiProperty>)visitYieldStmtWithSMStmt_Yield:(SMStmt_Yield *)stmt {
  id<SMSimiProperty> prop = nil;
  if (((SMStmt_Yield *) nil_chk(stmt))->value_ != nil) {
    prop = SMInterpreter_evaluateWithSMExpr_(self, stmt->value_);
  }
  @throw new_SMYield_initWithSMSimiProperty_withBoolean_(prop, false);
}

- (id<SMSimiProperty>)visitWhileStmtWithSMStmt_While:(SMStmt_While *)stmt {
  (void) [((JavaUtilStack *) nil_chk(loopBlocks_)) pushWithId:((SMStmt_While *) nil_chk(stmt))->body_];
  SMBlockImpl *block = [((SMEnvironment *) nil_chk(self->environment_)) getOrAssignBlockWithSMStmt_BlockStmt:stmt withSMExpr_Block:stmt->body_ withJavaUtilMap:yieldedStmts_];
  while (SMInterpreter_isTruthyWithSMSimiProperty_([((id<SMSimiProperty>) nil_chk(SMInterpreter_evaluateWithSMExpr_(self, stmt->condition_))) getValue])) {
    @try {
      (void) [((SMBlockImpl *) nil_chk(block)) callWithSMBlockInterpreter:self withJavaUtilList:nil withBoolean:true];
    }
    @catch (SMReturn *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, block);
      }
      (void) [loopBlocks_ pop];
      @throw returnYield;
    }
    @catch (SMYield *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, block);
      }
      (void) [loopBlocks_ pop];
      @throw returnYield;
    }
    @catch (SMBreak *b) {
      break;
    }
    @catch (SMContinue *ignored) {
    }
  }
  [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
  (void) [loopBlocks_ pop];
  return nil;
}

- (id<SMSimiProperty>)visitForStmtWithSMStmt_For:(SMStmt_For *)stmt {
  SMBlockImpl *block = [((SMEnvironment *) nil_chk(self->environment_)) getOrAssignBlockWithSMStmt_BlockStmt:stmt withSMExpr_Block:((SMStmt_For *) nil_chk(stmt))->body_ withJavaUtilMap:yieldedStmts_];
  id<JavaUtilList> emptyArgs = new_JavaUtilArrayList_init();
  SMToken *nextToken = new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, IDENTIFIER), SMConstants_NEXT, nil, ((SMToken *) nil_chk(((SMExpr_Variable *) nil_chk(stmt->var_))->name_))->line_);
  NSString *nextMethodName = JreStrcat("$I", @"#next", ((SMEnvironment *) nil_chk(((SMBlockImpl *) nil_chk(block))->closure_))->depth_);
  id<SMSimiProperty> nextMethod = [block->closure_ tryGetWithNSString:nextMethodName];
  if (nextMethod == nil) {
    SMSimiObjectImpl *iterable = (SMSimiObjectImpl *) cast_chk(SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_(SMInterpreter_evaluateWithSMExpr_(self, stmt->iterable_), self), [SMSimiObjectImpl class]);
    if (iterable == nil) {
      return nil;
    }
    nextMethod = [iterable getWithSMToken:nextToken withJavaLangInteger:JavaLangInteger_valueOfWithInt_(0) withSMEnvironment:environment_];
    if (nextMethod == nil) {
      SMToken *iterateToken = new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, IDENTIFIER), SMConstants_ITERATE, nil, stmt->var_->name_->line_);
      SMSimiObjectImpl *iterator = (SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(SMInterpreter_callWithSMSimiProperty_withJavaUtilList_withSMToken_(self, [iterable getWithSMToken:iterateToken withJavaLangInteger:JavaLangInteger_valueOfWithInt_(0) withSMEnvironment:environment_], emptyArgs, iterateToken))) getValue])) getObject], [SMSimiObjectImpl class]);
      nextMethod = [((SMSimiObjectImpl *) nil_chk(iterator)) getWithSMToken:nextToken withJavaLangInteger:JavaLangInteger_valueOfWithInt_(0) withSMEnvironment:environment_];
    }
  }
  [block->closure_ assignWithSMToken:SMToken_namedWithNSString_(JreStrcat("$I", @"#next", block->closure_->depth_)) withSMSimiProperty:nextMethod withBoolean:true];
  (void) [((JavaUtilStack *) nil_chk(loopBlocks_)) pushWithId:block];
  while (true) {
    id<SMSimiProperty> var = SMInterpreter_callWithSMSimiValue_withJavaUtilList_withSMToken_(self, [((id<SMSimiProperty>) nil_chk(nextMethod)) getValue], emptyArgs, nextToken);
    if (var == nil) {
      [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      break;
    }
    [block->closure_ assignWithSMToken:stmt->var_->name_ withSMSimiProperty:var withBoolean:true];
    @try {
      (void) [block callWithSMBlockInterpreter:self withJavaUtilList:nil withBoolean:true];
    }
    @catch (SMReturn *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, block);
      }
      (void) [loopBlocks_ pop];
      @throw returnYield;
    }
    @catch (SMYield *returnYield) {
      if ([returnYield isKindOfClass:[SMReturn class]]) {
        [((SMEnvironment *) nil_chk(self->environment_)) endBlockWithSMStmt_BlockStmt:stmt withJavaUtilMap:yieldedStmts_];
      }
      else {
        SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, block);
      }
      (void) [loopBlocks_ pop];
      @throw returnYield;
    }
    @catch (SMBreak *b) {
      break;
    }
    @catch (SMContinue *ignored) {
    }
  }
  (void) [loopBlocks_ pop];
  [block->closure_ defineWithNSString:nextMethodName withSMSimiProperty:nil];
  return nil;
}

- (SMSimiValue *)visitAnnotationsExprWithSMExpr_Annotations:(SMExpr_Annotations *)expr {
  id<SMSimiProperty> object = [((SMEnvironment *) nil_chk(environment_)) tryGetWithNSString:((SMToken *) nil_chk([((id<JavaUtilList>) nil_chk(((SMExpr_Annotations *) nil_chk(expr))->tokens_)) getWithInt:0]))->lexeme_];
  for (jint i = 1; i < [expr->tokens_ size]; i++) {
    object = [((id<SMSimiObject>) nil_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(object)) getValue])) getObject])) getWithNSString:((SMToken *) nil_chk([expr->tokens_ getWithInt:i]))->lexeme_ withSMSimiEnvironment:environment_];
  }
  if (object == nil || [object getAnnotations] == nil) {
    return nil;
  }
  JavaUtilArrayList *annotations = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk([object getAnnotations])) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMInterpreter_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toCollectionWithJavaUtilFunctionSupplier_(JreLoadStatic(SMInterpreter_$Lambda$2, instance))];
  return new_SMSimiValue_Object_initWithSMSimiObject_(SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(SMInterpreter_getObjectClass(self), true, annotations));
}

- (id<SMSimiProperty>)visitAssignExprWithSMExpr_Assign:(SMExpr_Assign *)expr {
  if ([((SMExpr_Assign *) nil_chk(expr))->value_ isKindOfClass:[SMExpr_Block class]]) {
    return [self visitFunctionStmtWithSMStmt_Function:new_SMStmt_Function_initWithSMToken_withSMExpr_Block_withJavaUtilList_(expr->name_, (SMExpr_Block *) cast_chk(expr->value_, [SMExpr_Block class]), nil)];
  }
  SMInterpreter_applyAnnotationsWithId_(self, expr);
  id<SMSimiProperty> prop = SMInterpreter_evaluateWithSMExpr_(self, expr->value_);
  SMSimiValue *value;
  if (prop == nil || [prop isKindOfClass:[SMTempNull class]] || [[prop getValue] isKindOfClass:[SMTempNull class]]) {
    value = nil;
  }
  else if ([prop isKindOfClass:[SMSimiValue_String class]] || [prop isKindOfClass:[SMSimiValue_Number class]]) {
    value = [((SMSimiValue *) nil_chk([prop getValue])) copy__];
  }
  else {
    value = [prop getValue];
  }
  id<JavaUtilList> assignAnnotations = SMInterpreter_getAnnotationsWithId_(self, expr);
  if (assignAnnotations == nil && prop != nil && [prop getAnnotations] != nil) {
    assignAnnotations = [prop getAnnotations];
  }
  id<SMSimiProperty> newProp = new_SMSimiPropertyImpl_initWithSMSimiValue_withJavaUtilList_(value, assignAnnotations);
  if ([((NSString *) nil_chk(((SMToken *) nil_chk(expr->name_))->lexeme_)) java_hasPrefix:SMConstants_MUTABLE]) {
    JavaLangInteger *distance = [((id<JavaUtilMap>) nil_chk(locals_)) getWithId:expr];
    if (distance != nil) {
      [((SMEnvironment *) nil_chk(environment_)) assignAtWithInt:[distance intValue] withSMToken:expr->name_ withSMSimiProperty:newProp];
    }
    else {
      [((SMEnvironment *) nil_chk(globals_)) assignWithSMToken:expr->name_ withSMSimiProperty:newProp withBoolean:false];
    }
  }
  else {
    [((SMEnvironment *) nil_chk(environment_)) assignAtWithInt:0 withSMToken:expr->name_ withSMSimiProperty:newProp];
  }
  return newProp;
}

- (SMSimiValue *)visitBinaryExprWithSMExpr_Binary:(SMExpr_Binary *)expr {
  id<SMSimiProperty> leftProp = SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Binary *) nil_chk(expr))->left_);
  id<SMSimiProperty> rightProp = SMInterpreter_evaluateWithSMExpr_(self, expr->right_);
  SMSimiValue *left = (leftProp != nil) ? [((id<SMSimiProperty>) nil_chk(leftProp)) getValue] : nil;
  SMSimiValue *right = (rightProp != nil) ? [((id<SMSimiProperty>) nil_chk(rightProp)) getValue] : nil;
  switch ([((SMToken *) nil_chk(expr->operator__))->type_ ordinal]) {
    case SMTokenType_Enum_BANG_EQUAL:
    return new_SMSimiValue_Number_initWithBoolean_(!SMInterpreter_isEqualWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, left, right, expr));
    case SMTokenType_Enum_EQUAL_EQUAL:
    return new_SMSimiValue_Number_initWithBoolean_(SMInterpreter_isEqualWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, left, right, expr));
    case SMTokenType_Enum_LESS_GREATER:
    return SMInterpreter_compareWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, left, right, expr);
    case SMTokenType_Enum_IS:
    return new_SMSimiValue_Number_initWithBoolean_(SMInterpreter_isInstanceWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, left, right, expr));
    case SMTokenType_Enum_ISNOT:
    return new_SMSimiValue_Number_initWithBoolean_(!SMInterpreter_isInstanceWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, left, right, expr));
    case SMTokenType_Enum_IN:
    return new_SMSimiValue_Number_initWithBoolean_(SMInterpreter_isInWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, left, right, expr));
    case SMTokenType_Enum_NOTIN:
    return new_SMSimiValue_Number_initWithBoolean_(!SMInterpreter_isInWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, left, right, expr));
    case SMTokenType_Enum_GREATER:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithBoolean_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] > [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_GREATER_EQUAL:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithBoolean_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] >= [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_LESS:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithBoolean_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] < [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_LESS_EQUAL:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithBoolean_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] <= [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_MINUS:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithDouble_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] - [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_PLUS:
    {
      if ([left isKindOfClass:[SMSimiValue_Number class]] && [right isKindOfClass:[SMSimiValue_Number class]]) {
        return new_SMSimiValue_Number_initWithDouble_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] + [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
      }
      NSString *leftStr = (left != nil) ? [left description] : @"nil";
      NSString *rightStr = (right != nil) ? [right description] : @"nil";
      return new_SMSimiValue_String_initWithNSString_(JreStrcat("$$", leftStr, rightStr));
    }
    case SMTokenType_Enum_SLASH:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithDouble_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] / [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_SLASH_SLASH:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithDouble_([((JavaLangDouble *) nil_chk([left getNumber])) longLongValue] / [((JavaLangDouble *) nil_chk([right getNumber])) longLongValue]);
    case SMTokenType_Enum_STAR:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithDouble_([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue] * [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_MOD:
    SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, expr->operator__, left, right);
    return new_SMSimiValue_Number_initWithDouble_(fmod([((JavaLangDouble *) nil_chk([left getNumber])) doubleValue], [((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]));
    case SMTokenType_Enum_QUESTION_QUESTION:
    return (left != nil) ? left : right;
  }
  return nil;
}

- (id<SMSimiProperty>)visitCallExprWithSMExpr_Call:(SMExpr_Call *)expr {
  id<SMSimiProperty> callee = SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Call *) nil_chk(expr))->callee_);
  return SMInterpreter_callWithSMSimiProperty_withJavaUtilList_withSMToken_(self, callee, expr->arguments_, expr->paren_);
}

- (id<SMSimiProperty>)callWithSMSimiProperty:(id<SMSimiProperty>)prop
                            withJavaUtilList:(id<JavaUtilList>)args
                                 withSMToken:(SMToken *)paren {
  return SMInterpreter_callWithSMSimiProperty_withJavaUtilList_withSMToken_(self, prop, args, paren);
}

- (id<SMSimiProperty>)callWithSMSimiValue:(SMSimiValue *)callee
                         withJavaUtilList:(id<JavaUtilList>)args
                              withSMToken:(SMToken *)paren {
  return SMInterpreter_callWithSMSimiValue_withJavaUtilList_withSMToken_(self, callee, args, paren);
}

- (id<SMSimiProperty>)callWithSMSimiValue:(SMSimiValue *)callee
                              withSMToken:(SMToken *)paren
                         withJavaUtilList:(id<JavaUtilList>)arguments {
  return SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(self, callee, paren, arguments);
}

- (id<SMSimiProperty>)visitGetExprWithSMExpr_Get:(SMExpr_Get *)expr {
  id<SMSimiProperty> object = SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Get *) nil_chk(expr))->object_);
  SMToken *name = SMInterpreter_evaluateGetSetNameWithSMToken_withSMExpr_(self, expr->origin_, expr->name_);
  if ([object isKindOfClass:[SMTempNull class]]) {
    return JreLoadStatic(SMTempNull, INSTANCE);
  }
  @try {
    id<SMSimiObject> simiObject = SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_(object, self);
    if (simiObject == nil) {
      return nil;
    }
    id<SMSimiProperty> prop;
    if ([simiObject isKindOfClass:[SMSimiObjectImpl class]]) {
      prop = [((SMSimiObjectImpl *) cast_chk(simiObject, [SMSimiObjectImpl class])) getWithSMToken:name withJavaLangInteger:expr->arity_ withSMEnvironment:environment_];
    }
    else {
      prop = [simiObject getWithNSString:((SMToken *) nil_chk(name))->lexeme_ withSMSimiEnvironment:environment_];
    }
    return prop;
  }
  @catch (SMSimiValue_IncompatibleValuesException *e) {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(expr->origin_, @"Only instances have properties.");
  }
}

- (SMToken *)evaluateGetSetNameWithSMToken:(SMToken *)origin
                                withSMExpr:(SMExpr *)name {
  return SMInterpreter_evaluateGetSetNameWithSMToken_withSMExpr_(self, origin, name);
}

- (id<SMSimiProperty>)visitGroupingExprWithSMExpr_Grouping:(SMExpr_Grouping *)expr {
  if ([((SMExpr_Grouping *) nil_chk(expr))->expression_ isKindOfClass:[SMExpr_Block class]]) {
    return SMInterpreter_evaluateWithSMExpr_withNSObjectArray_(self, expr->expression_, [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(false) } count:2 type:NSObject_class_()]);
  }
  return SMInterpreter_evaluateWithSMExpr_(self, expr->expression_);
}

- (id<SMSimiProperty>)visitGuExprWithSMExpr_Gu:(SMExpr_Gu *)expr {
  NSString *string = [((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Gu *) nil_chk(expr))->expr_))) getValue])) getString];
  SMScanner *scanner = new_SMScanner_initWithNSString_(JreStrcat("$C", string, 0x000a));
  SMParser *parser = new_SMParser_initWithJavaUtilList_([scanner scanTokensWithBoolean:true]);
  SMStmt *stmt = [((id<JavaUtilList>) nil_chk([parser parse])) getWithInt:0];
  if ([stmt isKindOfClass:[SMStmt_Class class]]) {
    return [self visitClassStmtWithSMStmt_Class:(SMStmt_Class *) cast_chk(stmt, [SMStmt_Class class]) withBoolean:false];
  }
  else if ([stmt isKindOfClass:[SMStmt_Expression class]]) {
    return SMInterpreter_evaluateWithSMExpr_(self, ((SMStmt_Expression *) nil_chk(((SMStmt_Expression *) cast_chk(stmt, [SMStmt_Expression class]))))->expression_);
  }
  else {
    [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) errorWithInt:0 withNSString:@"Invalid GU expression!"];
    return nil;
  }
}

- (id<SMSimiProperty>)visitIvicExprWithSMExpr_Ivic:(SMExpr_Ivic *)expr {
  SMSimiValue *value = [((id<SMSimiProperty>) nil_chk(SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Ivic *) nil_chk(expr))->expr_))) getValue];
  return new_SMSimiValue_String_initWithNSString_([((SMSimiValue *) nil_chk(value)) toCodeWithInt:0 withBoolean:false]);
}

- (SMSimiValue *)visitLiteralExprWithSMExpr_Literal:(SMExpr_Literal *)expr {
  return ((SMExpr_Literal *) nil_chk(expr))->value_;
}

- (id<SMSimiProperty>)visitLogicalExprWithSMExpr_Logical:(SMExpr_Logical *)expr {
  id<SMSimiProperty> leftProp = SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Logical *) nil_chk(expr))->left_);
  SMSimiValue *left = (leftProp != nil) ? [((id<SMSimiProperty>) nil_chk(leftProp)) getValue] : nil;
  if (((SMToken *) nil_chk(expr->operator__))->type_ == JreLoadEnum(SMTokenType, OR)) {
    if (SMInterpreter_isTruthyWithSMSimiProperty_(left)) return left;
  }
  else {
    if (!SMInterpreter_isTruthyWithSMSimiProperty_(left)) return left;
  }
  return SMInterpreter_evaluateWithSMExpr_(self, expr->right_);
}

- (id<SMSimiProperty>)visitSetExprWithSMExpr_Set:(SMExpr_Set *)expr {
  id<SMSimiProperty> object = SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Set *) nil_chk(expr))->object_);
  if (!(object != nil && [[object getValue] isKindOfClass:[SMSimiValue_Object class]]) && !([object isKindOfClass:[SMSimiValue_Object class]])) {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(expr->origin_, @"Only objects have fields.");
  }
  SMToken *name = SMInterpreter_evaluateGetSetNameWithSMToken_withSMExpr_(self, expr->origin_, expr->name_);
  id<SMSimiProperty> prop;
  if ([expr->value_ isKindOfClass:[SMExpr_Block class]]) {
    prop = new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(new_SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_((SMExpr_Block *) cast_chk(expr->value_, [SMExpr_Block class]), environment_), ((SMToken *) nil_chk(name))->lexeme_, [((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(object)) getValue])) getObject]);
  }
  else {
    prop = SMInterpreter_evaluateWithSMExpr_(self, expr->value_);
  }
  [((SMSimiObjectImpl *) nil_chk(((SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(object)) getValue])) getObject], [SMSimiObjectImpl class])))) setWithSMToken:name withSMSimiProperty:prop withSMEnvironment:environment_];
  return prop;
}

- (SMSimiValue *)visitSuperExprWithSMExpr_Super:(SMExpr_Super *)expr {
  jint distance = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(locals_)) getWithId:expr])) intValue];
  SMSimiMethod *method = nil;
  id<JavaUtilList> superclasses = ((SMSimiClassImpl_SuperClassesList *) nil_chk(((SMSimiClassImpl_SuperClassesList *) cast_chk([((id<SMSimiProperty>) nil_chk([((SMEnvironment *) nil_chk(environment_)) getAtWithInt:distance withNSString:SMConstants_SUPER])) getValue], [SMSimiClassImpl_SuperClassesList class]))))->value_;
  if (((SMExpr_Super *) nil_chk(expr))->superclass__ != nil) {
    superclasses = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(superclasses)) stream])) filterWithJavaUtilFunctionPredicate:new_SMInterpreter_$Lambda$3_initWithSMExpr_Super_(expr)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()];
    if ([((id<JavaUtilList>) nil_chk(superclasses)) isEmpty]) {
      @throw new_SMRuntimeError_initWithSMToken_withNSString_(expr->superclass__, @"Invalid superclass specified!");
    }
  }
  SMSimiObjectImpl *object = (SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([((SMEnvironment *) nil_chk(environment_)) getAtWithInt:distance - 1 withNSString:SMConstants_SELF])) getValue])) getObject], [SMSimiObjectImpl class]);
  for (SMSimiClassImpl * __strong superclass_ in nil_chk(superclasses)) {
    method = [((SMSimiClassImpl *) nil_chk(superclass_)) findMethodWithSMSimiObjectImpl:object withNSString:((SMToken *) nil_chk(expr->method_))->lexeme_ withJavaLangInteger:expr->arity_];
    if (method != nil) {
      break;
    }
  }
  if (method == nil) {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(expr->method_, JreStrcat("$$$", @"Undefined property '", ((SMToken *) nil_chk(expr->method_))->lexeme_, @"'."));
  }
  return new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(method, ((SMToken *) nil_chk(expr->method_))->lexeme_, object);
}

- (id<SMSimiProperty>)visitSelfExprWithSMExpr_Self:(SMExpr_Self *)expr {
  return SMInterpreter_lookUpVariableWithSMToken_withSMExpr_(self, ((SMExpr_Self *) nil_chk(expr))->keyword_, expr);
}

- (SMSimiValue *)visitUnaryExprWithSMExpr_Unary:(SMExpr_Unary *)expr {
  id<SMSimiProperty> rightProp = SMInterpreter_evaluateWithSMExpr_(self, ((SMExpr_Unary *) nil_chk(expr))->right_);
  SMSimiValue *right = (rightProp != nil) ? [((id<SMSimiProperty>) nil_chk(rightProp)) getValue] : nil;
  switch ([((SMToken *) nil_chk(expr->operator__))->type_ ordinal]) {
    case SMTokenType_Enum_NOT:
    return new_SMSimiValue_Number_initWithBoolean_(!SMInterpreter_isTruthyWithSMSimiProperty_(right));
    case SMTokenType_Enum_MINUS:
    SMInterpreter_checkNumberOperandWithSMToken_withSMSimiValue_(self, expr->operator__, right);
    return new_SMSimiValue_Number_initWithDouble_(-[((JavaLangDouble *) nil_chk([right getNumber])) doubleValue]);
    case SMTokenType_Enum_QUESTION:
    return (right == nil) ? JreLoadStatic(SMTempNull, INSTANCE) : right;
  }
  return nil;
}

- (id<SMSimiProperty>)visitVariableExprWithSMExpr_Variable:(SMExpr_Variable *)expr {
  return SMInterpreter_lookUpVariableWithSMToken_withSMExpr_(self, ((SMExpr_Variable *) nil_chk(expr))->name_, expr);
}

- (SMSimiValue *)visitObjectLiteralExprWithSMExpr_ObjectLiteral:(SMExpr_ObjectLiteral *)expr {
  jboolean immutable = ((SMToken *) nil_chk(((SMExpr_ObjectLiteral *) nil_chk(expr))->opener_))->type_ == JreLoadEnum(SMTokenType, LEFT_BRACKET);
  SMSimiClassImpl *objectClass = SMInterpreter_getObjectClass(self);
  SMSimiObjectImpl *object;
  if ([((id<JavaUtilList>) nil_chk(expr->props_)) isEmpty]) {
    object = SMSimiObjectImpl_emptyWithSMSimiClassImpl_withBoolean_(objectClass, immutable);
  }
  else {
    JavaUtilLinkedHashMap *mapFields = new_JavaUtilLinkedHashMap_init();
    JavaUtilArrayList *arrayFields = new_JavaUtilArrayList_init();
    jint count = 0;
    for (SMExpr * __strong propExpr in expr->props_) {
      NSString *key;
      SMExpr *valueExpr;
      if (expr->isDictionary_) {
        SMExpr_Assign *assign = (SMExpr_Assign *) cast_chk(propExpr, [SMExpr_Assign class]);
        key = ((SMToken *) nil_chk(((SMExpr_Assign *) nil_chk(assign))->name_))->lexeme_;
        if (key == nil) {
          key = [((SMSimiValue *) nil_chk(assign->name_->literal_)) getString];
        }
        valueExpr = assign->value_;
      }
      else {
        key = JreStrcat("$I", SMConstants_IMPLICIT, count);
        valueExpr = propExpr;
      }
      id<SMSimiProperty> prop;
      if ([valueExpr isKindOfClass:[SMExpr_Block class]]) {
        prop = new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(new_SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_((SMExpr_Block *) cast_chk(valueExpr, [SMExpr_Block class]), environment_), key, nil);
      }
      else {
        prop = SMInterpreter_evaluateWithSMExpr_(self, valueExpr);
      }
      if ([((NSString *) nil_chk(key)) isEqual:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, CLASS))) toCode]] && [[((id<SMSimiProperty>) nil_chk(prop)) getValue] isKindOfClass:[SMSimiValue_Object class]] && [[((SMSimiValue *) nil_chk([prop getValue])) getObject] isKindOfClass:[SMSimiClassImpl class]]) {
        objectClass = (SMSimiClassImpl *) cast_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(prop)) getValue])) getObject], [SMSimiClassImpl class]);
      }
      else {
        if (expr->isDictionary_) {
          (void) [mapFields putWithId:key withId:prop];
        }
        else {
          [arrayFields addWithId:prop];
        }
        count++;
      }
    }
    if (expr->isDictionary_) {
      object = SMSimiObjectImpl_fromMapWithSMSimiClassImpl_withBoolean_withJavaUtilLinkedHashMap_(objectClass, immutable, mapFields);
    }
    else {
      object = SMSimiObjectImpl_fromArrayWithSMSimiClassImpl_withBoolean_withJavaUtilArrayList_(objectClass, immutable, arrayFields);
    }
    for (SMSimiValue * __strong value in nil_chk([((SMSimiObjectImpl *) nil_chk(object)) values])) {
      if ([value isKindOfClass:[SMSimiValue_Callable class]]) {
        [((SMSimiValue_Callable *) nil_chk(((SMSimiValue_Callable *) cast_chk(value, [SMSimiValue_Callable class])))) bindWithSMSimiObject:object];
      }
    }
  }
  return new_SMSimiValue_Object_initWithSMSimiObject_(object);
}

- (void)executeRescueBlockWithSMStmt_Rescue:(SMStmt_Rescue *)rescue
                        withSMSimiException:(SMSimiException *)e {
  SMInterpreter_executeRescueBlockWithSMStmt_Rescue_withSMSimiException_(self, rescue, e);
}

- (id<SMSimiProperty>)lookUpVariableWithSMToken:(SMToken *)name
                                     withSMExpr:(SMExpr *)expr {
  return SMInterpreter_lookUpVariableWithSMToken_withSMExpr_(self, name, expr);
}

- (void)checkNumberOperandWithSMToken:(SMToken *)operator_
                      withSMSimiValue:(SMSimiValue *)operand {
  SMInterpreter_checkNumberOperandWithSMToken_withSMSimiValue_(self, operator_, operand);
}

- (void)checkNumberOperandsWithSMToken:(SMToken *)operator_
                       withSMSimiValue:(SMSimiValue *)left
                       withSMSimiValue:(SMSimiValue *)right {
  SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(self, operator_, left, right);
}

+ (jboolean)isTruthyWithSMSimiProperty:(id<SMSimiProperty>)object {
  return SMInterpreter_isTruthyWithSMSimiProperty_(object);
}

- (jboolean)isEqualWithSMSimiValue:(SMSimiValue *)a
                   withSMSimiValue:(SMSimiValue *)b
                 withSMExpr_Binary:(SMExpr_Binary *)expr {
  return SMInterpreter_isEqualWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, a, b, expr);
}

- (SMSimiValue *)compareWithSMSimiValue:(SMSimiValue *)a
                        withSMSimiValue:(SMSimiValue *)b
                      withSMExpr_Binary:(SMExpr_Binary *)expr {
  return SMInterpreter_compareWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, a, b, expr);
}

- (jboolean)isInstanceWithSMSimiValue:(SMSimiValue *)a
                      withSMSimiValue:(SMSimiValue *)b
                    withSMExpr_Binary:(SMExpr_Binary *)expr {
  return SMInterpreter_isInstanceWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, a, b, expr);
}

- (jboolean)isInWithSMSimiValue:(SMSimiValue *)a
                withSMSimiValue:(SMSimiValue *)b
              withSMExpr_Binary:(SMExpr_Binary *)expr {
  return SMInterpreter_isInWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(self, a, b, expr);
}

- (NSString *)stringifyWithSMSimiProperty:(id<SMSimiProperty>)object {
  return SMInterpreter_stringifyWithSMSimiProperty_(self, object);
}

- (jboolean)isBaseClassWithNSString:(NSString *)className_ {
  return SMInterpreter_isBaseClassWithNSString_(self, className_);
}

- (SMSimiClassImpl *)getObjectClass {
  return SMInterpreter_getObjectClass(self);
}

- (void)putBlockWithSMStmt_BlockStmt:(id<SMStmt_BlockStmt>)stmt
                     withSMBlockImpl:(SMBlockImpl *)block {
  SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(self, stmt, block);
}

- (void)applyAnnotationsWithId:(id)key {
  SMInterpreter_applyAnnotationsWithId_(self, key);
}

- (id<JavaUtilList>)getAnnotationsWithId:(id)key {
  return SMInterpreter_getAnnotationsWithId_(self, key);
}

- (id<JavaUtilList>)defineTempVarsWithSMSimiPropertyArray:(IOSObjectArray *)vars {
  jlong timestamp = JavaLangSystem_currentTimeMillis();
  NSString *prefix = @"_tempvar_";
  id<JavaUtilList> names = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(vars))->size_);
  jint count = 0;
  {
    IOSObjectArray *a__ = vars;
    id<SMSimiProperty> const *b__ = a__->buffer_;
    id<SMSimiProperty> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<SMSimiProperty> var = *b__++;
      NSString *name = JreStrcat("$J", prefix, (timestamp + count));
      count++;
      [names addWithId:name];
      [((SMEnvironment *) nil_chk(environment_)) defineWithNSString:name withSMSimiProperty:var];
    }
  }
  return names;
}

- (void)undefineTempVarsWithJavaUtilList:(id<JavaUtilList>)names {
  for (NSString * __strong name in nil_chk(names)) {
    [((SMEnvironment *) nil_chk(environment_)) defineWithNSString:name withSMSimiProperty:nil];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x82, 5, 7, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LSMSimiEnvironment;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x2, 65, 66, -1, 67, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x2, 65, 68, -1, 69, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x2, 65, 70, -1, 71, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "LSMToken;", 0x2, 74, 75, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 76, 77, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 78, 79, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 80, 81, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 82, 83, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 84, 85, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 86, 87, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 88, 89, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 90, 91, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 92, 93, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 94, 95, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 96, 97, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 98, 99, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x2, 100, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 102, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 104, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 105, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 107, 108, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x2, 109, 108, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 110, 108, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 111, 108, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 112, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 113, 15, -1, -1, -1, -1 },
    { NULL, "LSMSimiClassImpl;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 114, 115, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 116, 117, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 118, 117, -1, 119, -1, -1 },
    { NULL, "LJavaUtilList;", 0x81, 120, 121, -1, 122, -1, -1 },
    { NULL, "V", 0x1, 123, 3, -1, 124, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCollection:);
  methods[1].selector = @selector(interpretWithJavaUtilList:);
  methods[2].selector = @selector(evaluateWithSMExpr:);
  methods[3].selector = @selector(evaluateWithSMExpr:withNSObjectArray:);
  methods[4].selector = @selector(executeWithSMStmt:);
  methods[5].selector = @selector(resolveWithSMExpr:withInt:);
  methods[6].selector = @selector(executeBlockWithSMSimiBlock:withSMSimiEnvironment:withInt:);
  methods[7].selector = @selector(getGlobalWithNSString:);
  methods[8].selector = @selector(getEnvironment);
  methods[9].selector = @selector(raiseExceptionWithSMSimiException:);
  methods[10].selector = @selector(newObjectWithBoolean:withJavaUtilLinkedHashMap:);
  methods[11].selector = @selector(newArrayWithBoolean:withJavaUtilArrayList:);
  methods[12].selector = @selector(newInstanceWithSMSimiClass:withJavaUtilLinkedHashMap:);
  methods[13].selector = @selector(visitBlockExprWithSMExpr_Block:withBoolean:withBoolean:);
  methods[14].selector = @selector(visitAnnotationStmtWithSMStmt_Annotation:);
  methods[15].selector = @selector(visitBreakStmtWithSMStmt_Break:);
  methods[16].selector = @selector(visitClassStmtWithSMStmt_Class:withBoolean:);
  methods[17].selector = @selector(visitContinueStmtWithSMStmt_Continue:);
  methods[18].selector = @selector(visitExpressionStmtWithSMStmt_Expression:);
  methods[19].selector = @selector(visitFunctionStmtWithSMStmt_Function:);
  methods[20].selector = @selector(visitElsifStmtWithSMStmt_Elsif:);
  methods[21].selector = @selector(visitIfStmtWithSMStmt_If:);
  methods[22].selector = @selector(visitPrintStmtWithSMStmt_Print:);
  methods[23].selector = @selector(visitRescueStmtWithSMStmt_Rescue:);
  methods[24].selector = @selector(visitReturnStmtWithSMStmt_Return:);
  methods[25].selector = @selector(visitYieldStmtWithSMStmt_Yield:);
  methods[26].selector = @selector(visitWhileStmtWithSMStmt_While:);
  methods[27].selector = @selector(visitForStmtWithSMStmt_For:);
  methods[28].selector = @selector(visitAnnotationsExprWithSMExpr_Annotations:);
  methods[29].selector = @selector(visitAssignExprWithSMExpr_Assign:);
  methods[30].selector = @selector(visitBinaryExprWithSMExpr_Binary:);
  methods[31].selector = @selector(visitCallExprWithSMExpr_Call:);
  methods[32].selector = @selector(callWithSMSimiProperty:withJavaUtilList:withSMToken:);
  methods[33].selector = @selector(callWithSMSimiValue:withJavaUtilList:withSMToken:);
  methods[34].selector = @selector(callWithSMSimiValue:withSMToken:withJavaUtilList:);
  methods[35].selector = @selector(visitGetExprWithSMExpr_Get:);
  methods[36].selector = @selector(evaluateGetSetNameWithSMToken:withSMExpr:);
  methods[37].selector = @selector(visitGroupingExprWithSMExpr_Grouping:);
  methods[38].selector = @selector(visitGuExprWithSMExpr_Gu:);
  methods[39].selector = @selector(visitIvicExprWithSMExpr_Ivic:);
  methods[40].selector = @selector(visitLiteralExprWithSMExpr_Literal:);
  methods[41].selector = @selector(visitLogicalExprWithSMExpr_Logical:);
  methods[42].selector = @selector(visitSetExprWithSMExpr_Set:);
  methods[43].selector = @selector(visitSuperExprWithSMExpr_Super:);
  methods[44].selector = @selector(visitSelfExprWithSMExpr_Self:);
  methods[45].selector = @selector(visitUnaryExprWithSMExpr_Unary:);
  methods[46].selector = @selector(visitVariableExprWithSMExpr_Variable:);
  methods[47].selector = @selector(visitObjectLiteralExprWithSMExpr_ObjectLiteral:);
  methods[48].selector = @selector(executeRescueBlockWithSMStmt_Rescue:withSMSimiException:);
  methods[49].selector = @selector(lookUpVariableWithSMToken:withSMExpr:);
  methods[50].selector = @selector(checkNumberOperandWithSMToken:withSMSimiValue:);
  methods[51].selector = @selector(checkNumberOperandsWithSMToken:withSMSimiValue:withSMSimiValue:);
  methods[52].selector = @selector(isTruthyWithSMSimiProperty:);
  methods[53].selector = @selector(isEqualWithSMSimiValue:withSMSimiValue:withSMExpr_Binary:);
  methods[54].selector = @selector(compareWithSMSimiValue:withSMSimiValue:withSMExpr_Binary:);
  methods[55].selector = @selector(isInstanceWithSMSimiValue:withSMSimiValue:withSMExpr_Binary:);
  methods[56].selector = @selector(isInWithSMSimiValue:withSMSimiValue:withSMExpr_Binary:);
  methods[57].selector = @selector(stringifyWithSMSimiProperty:);
  methods[58].selector = @selector(isBaseClassWithNSString:);
  methods[59].selector = @selector(getObjectClass);
  methods[60].selector = @selector(putBlockWithSMStmt_BlockStmt:withSMBlockImpl:);
  methods[61].selector = @selector(applyAnnotationsWithId:);
  methods[62].selector = @selector(getAnnotationsWithId:);
  methods[63].selector = @selector(defineTempVarsWithSMSimiPropertyArray:);
  methods[64].selector = @selector(undefineTempVarsWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nativeModulesManagers_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x10, -1, -1, 125, -1 },
    { "globals_", "LSMEnvironment;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "environment_", "LSMEnvironment;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "locals_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 126, -1 },
    { "baseClassesNativeImpl_", "LSMBaseClassesNativeImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "loopBlocks_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, 127, -1 },
    { "raisedExceptions_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, 128, -1 },
    { "yieldedStmts_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 129, -1 },
    { "annotations_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 130, -1 },
    { "annotationsBuffer_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 131, -1 },
    { "sharedInstance", "LSMInterpreter;", .constantValue.asLong = 0, 0x8, -1, 132, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(Ljava/util/Collection<LNativeModulesManager;>;)V", "interpret", "LJavaUtilList;", "(Ljava/util/List<LStmt;>;)LSimiProperty;", "evaluate", "LSMExpr;", "LSMExpr;[LNSObject;", "execute", "LSMStmt;", "resolve", "LSMExpr;I", "executeBlock", "LSMSimiBlock;LSMSimiEnvironment;I", "getGlobal", "LNSString;", "raiseException", "LSMSimiException;", "newObject", "ZLJavaUtilLinkedHashMap;", "(ZLjava/util/LinkedHashMap<Ljava/lang/String;LSimiProperty;>;)LSimiObject;", "newArray", "ZLJavaUtilArrayList;", "(ZLjava/util/ArrayList<LSimiValue;>;)LSimiObject;", "newInstance", "LSMSimiClass;LJavaUtilLinkedHashMap;", "(LSimiClass;Ljava/util/LinkedHashMap<Ljava/lang/String;LSimiProperty;>;)LSimiObject;", "visitBlockExpr", "LSMExpr_Block;ZZ", "visitAnnotationStmt", "LSMStmt_Annotation;", "visitBreakStmt", "LSMStmt_Break;", "visitClassStmt", "LSMStmt_Class;Z", "visitContinueStmt", "LSMStmt_Continue;", "visitExpressionStmt", "LSMStmt_Expression;", "visitFunctionStmt", "LSMStmt_Function;", "visitElsifStmt", "LSMStmt_Elsif;", "visitIfStmt", "LSMStmt_If;", "visitPrintStmt", "LSMStmt_Print;", "visitRescueStmt", "LSMStmt_Rescue;", "visitReturnStmt", "LSMStmt_Return;", "visitYieldStmt", "LSMStmt_Yield;", "visitWhileStmt", "LSMStmt_While;", "visitForStmt", "LSMStmt_For;", "visitAnnotationsExpr", "LSMExpr_Annotations;", "visitAssignExpr", "LSMExpr_Assign;", "visitBinaryExpr", "LSMExpr_Binary;", "visitCallExpr", "LSMExpr_Call;", "call", "LSMSimiProperty;LJavaUtilList;LSMToken;", "(LSimiProperty;Ljava/util/List<LExpr;>;LToken;)LSimiProperty;", "LSMSimiValue;LJavaUtilList;LSMToken;", "(LSimiValue;Ljava/util/List<LExpr;>;LToken;)LSimiProperty;", "LSMSimiValue;LSMToken;LJavaUtilList;", "(LSimiValue;LToken;Ljava/util/List<LSimiProperty;>;)LSimiProperty;", "visitGetExpr", "LSMExpr_Get;", "evaluateGetSetName", "LSMToken;LSMExpr;", "visitGroupingExpr", "LSMExpr_Grouping;", "visitGuExpr", "LSMExpr_Gu;", "visitIvicExpr", "LSMExpr_Ivic;", "visitLiteralExpr", "LSMExpr_Literal;", "visitLogicalExpr", "LSMExpr_Logical;", "visitSetExpr", "LSMExpr_Set;", "visitSuperExpr", "LSMExpr_Super;", "visitSelfExpr", "LSMExpr_Self;", "visitUnaryExpr", "LSMExpr_Unary;", "visitVariableExpr", "LSMExpr_Variable;", "visitObjectLiteralExpr", "LSMExpr_ObjectLiteral;", "executeRescueBlock", "LSMStmt_Rescue;LSMSimiException;", "lookUpVariable", "checkNumberOperand", "LSMToken;LSMSimiValue;", "checkNumberOperands", "LSMToken;LSMSimiValue;LSMSimiValue;", "isTruthy", "LSMSimiProperty;", "isEqual", "LSMSimiValue;LSMSimiValue;LSMExpr_Binary;", "compare", "isInstance", "isIn", "stringify", "isBaseClass", "putBlock", "LSMStmt_BlockStmt;LSMBlockImpl;", "applyAnnotations", "LNSObject;", "getAnnotations", "(Ljava/lang/Object;)Ljava/util/List<LSimiObject;>;", "defineTempVars", "[LSMSimiProperty;", "([LSimiProperty;)Ljava/util/List<Ljava/lang/String;>;", "undefineTempVars", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/Collection<LNativeModulesManager;>;", "Ljava/util/Map<LExpr;Ljava/lang/Integer;>;", "Ljava/util/Stack<LSimiBlock;>;", "Ljava/util/Stack<LSimiException;>;", "Ljava/util/Map<LStmt$BlockStmt;LSparseArray<LBlockImpl;>;>;", "Ljava/util/Map<Ljava/lang/Object;Ljava/util/List<LSimiObject;>;>;", "Ljava/util/List<LSimiObject;>;", &SMInterpreter_sharedInstance, "Ljava/lang/Object;LBlockInterpreter;LExpr$Visitor<LSimiProperty;>;LStmt$Visitor<LSimiProperty;>;" };
  static const J2ObjcClassInfo _SMInterpreter = { "Interpreter", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 65, 11, -1, -1, -1, 133, -1 };
  return &_SMInterpreter;
}

@end

void SMInterpreter_initWithJavaUtilCollection_(SMInterpreter *self, id<JavaUtilCollection> nativeModulesManagers) {
  NSObject_init(self);
  self->globals_ = new_SMEnvironment_init();
  self->environment_ = self->globals_;
  self->locals_ = new_JavaUtilHashMap_init();
  self->baseClassesNativeImpl_ = new_SMBaseClassesNativeImpl_init();
  self->loopBlocks_ = new_JavaUtilStack_init();
  self->raisedExceptions_ = new_JavaUtilStack_init();
  self->yieldedStmts_ = new_JavaUtilHashMap_init();
  self->annotations_ = new_JavaUtilHashMap_init();
  self->annotationsBuffer_ = new_JavaUtilArrayList_init();
  SMInterpreter_sharedInstance = self;
  self->nativeModulesManagers_ = nativeModulesManagers;
  [self->globals_ defineWithNSString:@"clock" withSMSimiProperty:new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(new_SMInterpreter_1_init(), @"clock", nil)];
}

SMInterpreter *new_SMInterpreter_initWithJavaUtilCollection_(id<JavaUtilCollection> nativeModulesManagers) {
  J2OBJC_NEW_IMPL(SMInterpreter, initWithJavaUtilCollection_, nativeModulesManagers)
}

SMInterpreter *create_SMInterpreter_initWithJavaUtilCollection_(id<JavaUtilCollection> nativeModulesManagers) {
  J2OBJC_CREATE_IMPL(SMInterpreter, initWithJavaUtilCollection_, nativeModulesManagers)
}

id<SMSimiProperty> SMInterpreter_evaluateWithSMExpr_(SMInterpreter *self, SMExpr *expr) {
  return [((SMExpr *) nil_chk(expr)) acceptWithSMExpr_Visitor:self withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
}

id<SMSimiProperty> SMInterpreter_evaluateWithSMExpr_withNSObjectArray_(SMInterpreter *self, SMExpr *expr, IOSObjectArray *params) {
  return [((SMExpr *) nil_chk(expr)) acceptWithSMExpr_Visitor:self withNSObjectArray:params];
}

id<SMSimiProperty> SMInterpreter_executeWithSMStmt_(SMInterpreter *self, SMStmt *stmt) {
  return [((SMStmt *) nil_chk(stmt)) acceptWithSMStmt_Visitor:self withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
}

id<SMSimiProperty> SMInterpreter_callWithSMSimiProperty_withJavaUtilList_withSMToken_(SMInterpreter *self, id<SMSimiProperty> prop, id<JavaUtilList> args, SMToken *paren) {
  SMSimiValue *callee = (prop != nil) ? [((id<SMSimiProperty>) nil_chk(prop)) getValue] : nil;
  return SMInterpreter_callWithSMSimiValue_withJavaUtilList_withSMToken_(self, callee, args, paren);
}

id<SMSimiProperty> SMInterpreter_callWithSMSimiValue_withJavaUtilList_withSMToken_(SMInterpreter *self, SMSimiValue *callee, id<JavaUtilList> args, SMToken *paren) {
  id<JavaUtilList> arguments = new_JavaUtilArrayList_init();
  for (SMExpr * __strong arg in nil_chk(args)) {
    id<SMSimiProperty> prop;
    if ([arg isKindOfClass:[SMExpr_Block class]]) {
      prop = new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(new_SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_((SMExpr_Block *) cast_chk(arg, [SMExpr_Block class]), self->environment_), nil, nil);
    }
    else {
      prop = SMInterpreter_evaluateWithSMExpr_(self, arg);
    }
    [arguments addWithId:prop];
  }
  return SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(self, callee, paren, arguments);
}

id<SMSimiProperty> SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(SMInterpreter *self, SMSimiValue *callee, SMToken *paren, id<JavaUtilList> arguments) {
  id<SMSimiCallable> callable;
  NSString *methodName;
  id<SMSimiObject> instance;
  if ([callee isKindOfClass:[SMSimiValue_Object class]]) {
    id<SMSimiObject> value = [((SMSimiValue *) nil_chk(callee)) getObject];
    if (!([value isKindOfClass:[SMSimiClassImpl class]])) {
      @throw new_SMRuntimeError_initWithSMToken_withNSString_(paren, @"Can only call functions and classes.");
    }
    return [((SMSimiClassImpl *) nil_chk(((SMSimiClassImpl *) cast_chk(value, [SMSimiClassImpl class])))) init__WithSMBlockInterpreter:self withJavaUtilList:arguments];
  }
  else if ([callee isKindOfClass:[SMSimiValue_Callable class]]) {
    callable = [((SMSimiValue *) nil_chk(callee)) getCallable];
    methodName = ((SMSimiValue_Callable *) cast_chk(callee, [SMSimiValue_Callable class]))->name_;
    instance = [((SMSimiValue_Callable *) cast_chk(callee, [SMSimiValue_Callable class])) getInstance];
  }
  else {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(paren, @"Can only call functions and classes.");
  }
  if ([((id<JavaUtilList>) nil_chk(arguments)) size] != [((id<SMSimiCallable>) nil_chk(callable)) arity]) {
    @throw new_SMRuntimeError_initWithSMToken_withNSString_(paren, JreStrcat("$I$IC", @"Expected ", [callable arity], @" arguments but got ", [arguments size], '.'));
  }
  jboolean isNative = ([callable isKindOfClass:[SMSimiFunction class]] && ((SMSimiFunction *) cast_chk(callable, [SMSimiFunction class]))->isNative_) || ([callable isKindOfClass:[SMSimiMethod class]] && ((SMSimiFunction *) nil_chk(((SMSimiMethod *) cast_chk(callable, [SMSimiMethod class]))->function_))->isNative_) || ([callable isKindOfClass:[SMBlockImpl class]] && [((SMBlockImpl *) cast_chk(callable, [SMBlockImpl class])) isNative]);
  if (isNative) {
    if (instance != nil) {
      SMSimiClassImpl *clazz;
      if ([callable isKindOfClass:[SMSimiMethod class]]) {
        clazz = ((SMSimiMethod *) cast_chk(callable, [SMSimiMethod class]))->clazz_;
      }
      else {
        if ([instance isKindOfClass:[SMSimiClassImpl class]]) {
          clazz = (SMSimiClassImpl *) cast_chk(instance, [SMSimiClassImpl class]);
        }
        else {
          clazz = (SMSimiClassImpl *) cast_chk([instance getSimiClass], [SMSimiClassImpl class]);
        }
      }
      jboolean isBaseClass = SMInterpreter_isBaseClassWithNSString_(self, ((SMSimiClassImpl *) nil_chk(clazz))->name_);
      if (!isBaseClass) {
        for (id<SMNativeModulesManager> __strong manager in nil_chk(self->nativeModulesManagers_)) {
          @try {
            return [((id<SMNativeModulesManager>) nil_chk(manager)) callWithNSString:clazz->name_ withNSString:methodName withSMSimiObject:instance withSMInterpreter:self withJavaUtilList:arguments];
          }
          @catch (JavaLangIllegalArgumentException *ignored) {
          }
        }
      }
      NSString *className_ = isBaseClass ? clazz->name_ : SMConstants_CLASS_OBJECT;
      id<SMSimiCallable> nativeMethod = [((SMBaseClassesNativeImpl *) nil_chk(self->baseClassesNativeImpl_)) getWithNSString:className_ withNSString:methodName withInt:[callable arity]];
      if (nativeMethod == nil) {
        nativeMethod = [self->baseClassesNativeImpl_ getWithNSString:SMConstants_CLASS_GLOBALS withNSString:methodName withInt:[callable arity]];
      }
      id<JavaUtilList> nativeArgs = new_JavaUtilArrayList_init();
      [nativeArgs addWithId:new_SMSimiValue_Object_initWithSMSimiObject_(instance)];
      [nativeArgs addAllWithJavaUtilCollection:arguments];
      return [((id<SMSimiCallable>) nil_chk(nativeMethod)) callWithSMBlockInterpreter:self withJavaUtilList:nativeArgs withBoolean:false];
    }
    else {
      for (id<SMNativeModulesManager> __strong manager in nil_chk(self->nativeModulesManagers_)) {
        @try {
          return [((id<SMNativeModulesManager>) nil_chk(manager)) callWithNSString:SMConstants_GLOBALS_CLASS_NAME withNSString:methodName withSMSimiObject:nil withSMInterpreter:self withJavaUtilList:arguments];
        }
        @catch (JavaLangIllegalArgumentException *ignored) {
        }
      }
    }
  }
  return [callable callWithSMBlockInterpreter:self withJavaUtilList:arguments withBoolean:false];
}

SMToken *SMInterpreter_evaluateGetSetNameWithSMToken_withSMExpr_(SMInterpreter *self, SMToken *origin, SMExpr *name) {
  if ([name isKindOfClass:[SMExpr_Variable class]]) {
    return ((SMExpr_Variable *) nil_chk(((SMExpr_Variable *) cast_chk(name, [SMExpr_Variable class]))))->name_;
  }
  else {
    SMSimiValue *val = [((id<SMSimiProperty>) nil_chk(SMInterpreter_evaluateWithSMExpr_(self, name))) getValue];
    NSString *lexeme;
    if ([val isKindOfClass:[SMSimiValue_Number class]] || [val isKindOfClass:[SMSimiValue_String class]]) {
      lexeme = [((SMSimiValue *) nil_chk(val)) description];
    }
    else {
      @throw new_SMRuntimeError_initWithSMToken_withNSString_(origin, JreStrcat("$@", @"Unable to parse getter/setter, invalid value: ", val));
    }
    return new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, IDENTIFIER), lexeme, nil, ((SMToken *) nil_chk(origin))->line_);
  }
}

void SMInterpreter_executeRescueBlockWithSMStmt_Rescue_withSMSimiException_(SMInterpreter *self, SMStmt_Rescue *rescue, SMSimiException *e) {
  id<JavaUtilList> args = new_JavaUtilArrayList_init();
  if (e != nil) {
    [args addWithId:new_SMSimiValue_Object_initWithSMSimiObject_(e)];
  }
  else {
    [args addWithId:nil];
  }
  (void) SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(self, new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(new_SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_(((SMStmt_Rescue *) nil_chk(rescue))->block_, self->environment_), nil, nil), rescue->keyword_, args);
}

id<SMSimiProperty> SMInterpreter_lookUpVariableWithSMToken_withSMExpr_(SMInterpreter *self, SMToken *name, SMExpr *expr) {
  id<SMSimiProperty> prop = nil;
  prop = [((SMEnvironment *) nil_chk(self->environment_)) tryGetWithNSString:((SMToken *) nil_chk(name))->lexeme_];
  if (prop != nil && [prop getValue] != nil) {
    return prop;
  }
  return [((SMEnvironment *) nil_chk(self->globals_)) getWithSMToken:name];
}

void SMInterpreter_checkNumberOperandWithSMToken_withSMSimiValue_(SMInterpreter *self, SMToken *operator_, SMSimiValue *operand) {
  if ([operand isKindOfClass:[SMSimiValue_Number class]]) {
    return;
  }
  @throw new_SMRuntimeError_initWithSMToken_withNSString_(operator_, @"Operand must be a number.");
}

void SMInterpreter_checkNumberOperandsWithSMToken_withSMSimiValue_withSMSimiValue_(SMInterpreter *self, SMToken *operator_, SMSimiValue *left, SMSimiValue *right) {
  if ([left isKindOfClass:[SMSimiValue_Number class]] && [right isKindOfClass:[SMSimiValue_Number class]]) {
    return;
  }
  @throw new_SMRuntimeError_initWithSMToken_withNSString_(operator_, @"Operands must be numbers.");
}

jboolean SMInterpreter_isTruthyWithSMSimiProperty_(id<SMSimiProperty> object) {
  SMInterpreter_initialize();
  if (object == nil || object == JreLoadStatic(SMTempNull, INSTANCE) || [object getValue] == nil || [object getValue] == JreLoadStatic(SMTempNull, INSTANCE)) {
    return false;
  }
  @try {
    jdouble value = [((JavaLangDouble *) nil_chk([((SMSimiValue *) nil_chk([object getValue])) getNumber])) doubleValue];
    return value != 0;
  }
  @catch (SMSimiValue_IncompatibleValuesException *e) {
    return true;
  }
}

jboolean SMInterpreter_isEqualWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr) {
  if (a == nil && b == nil) {
    return true;
  }
  if (a == nil) {
    return false;
  }
  if ([a isKindOfClass:[SMSimiValue_Object class]]) {
    SMToken *equals = new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, IDENTIFIER), SMConstants_EQUALS, nil, ((SMToken *) nil_chk(((SMExpr_Binary *) nil_chk(expr))->operator__))->line_);
    return [((JavaLangDouble *) nil_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(self, [((id<SMSimiProperty>) nil_chk([((SMSimiObjectImpl *) nil_chk(((SMSimiObjectImpl *) cast_chk([a getObject], [SMSimiObjectImpl class])))) getWithSMToken:equals withJavaLangInteger:JavaLangInteger_valueOfWithInt_(1) withSMEnvironment:self->environment_])) getValue], equals, JavaUtilCollections_singletonListWithId_(b)))) getValue])) getNumber])) doubleValue] != 0;
  }
  return [a isEqual:b];
}

SMSimiValue *SMInterpreter_compareWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr) {
  if (a == nil && b == nil) {
    return JreLoadStatic(SMSimiValue_Number, TRUE);
  }
  if (a == nil) {
    return JreLoadStatic(SMSimiValue_Number, FALSE);
  }
  if ([a isKindOfClass:[SMSimiValue_Object class]]) {
    SMToken *compareTo = new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, IDENTIFIER), SMConstants_COMPARE_TO, nil, ((SMToken *) nil_chk(((SMExpr_Binary *) nil_chk(expr))->operator__))->line_);
    return [((id<SMSimiProperty>) nil_chk(SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(self, [((id<SMSimiProperty>) nil_chk([((SMSimiObjectImpl *) nil_chk(((SMSimiObjectImpl *) cast_chk([a getObject], [SMSimiObjectImpl class])))) getWithSMToken:compareTo withJavaLangInteger:JavaLangInteger_valueOfWithInt_(1) withSMEnvironment:self->environment_])) getValue], compareTo, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ a, b } count:2 type:SMSimiProperty_class_()])))) getValue];
  }
  return new_SMSimiValue_Number_initWithDouble_([a compareToWithId:b]);
}

jboolean SMInterpreter_isInstanceWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr) {
  id<SMSimiObject> left = SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_(a, self);
  id<SMSimiObject> right = SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_(b, self);
  if (left == nil || right == nil) {
    return false;
  }
  SMSimiClassImpl *clazz = (SMSimiClassImpl *) cast_chk(right, [SMSimiClassImpl class]);
  if ([left isKindOfClass:[SMSimiObjectImpl class]]) {
    return [((SMSimiObjectImpl *) cast_chk(left, [SMSimiObjectImpl class])) isWithSMSimiClassImpl:clazz];
  }
  else {
    return [left getSimiClass] == clazz;
  }
}

jboolean SMInterpreter_isInWithSMSimiValue_withSMSimiValue_withSMExpr_Binary_(SMInterpreter *self, SMSimiValue *a, SMSimiValue *b, SMExpr_Binary *expr) {
  SMSimiObjectImpl *object;
  if ([b isKindOfClass:[SMSimiValue_Object class]]) {
    object = ((SMSimiObjectImpl *) cast_chk([((SMSimiValue *) nil_chk(b)) getObject], [SMSimiObjectImpl class]));
  }
  else {
    object = (SMSimiObjectImpl *) cast_chk(SMSimiObjectImpl_getOrConvertObjectWithSMSimiProperty_withSMInterpreter_(b, self), [SMSimiObjectImpl class]);
  }
  SMToken *has = new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, IDENTIFIER), SMConstants_HAS, nil, ((SMToken *) nil_chk(((SMExpr_Binary *) nil_chk(expr))->operator__))->line_);
  return [((JavaLangDouble *) nil_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk(SMInterpreter_callWithSMSimiValue_withSMToken_withJavaUtilList_(self, [((id<SMSimiProperty>) nil_chk([((SMSimiObjectImpl *) nil_chk(object)) getWithSMToken:has withJavaLangInteger:JavaLangInteger_valueOfWithInt_(1) withSMEnvironment:self->environment_])) getValue], has, JavaUtilCollections_singletonListWithId_(a)))) getValue])) getNumber])) doubleValue] != 0;
}

NSString *SMInterpreter_stringifyWithSMSimiProperty_(SMInterpreter *self, id<SMSimiProperty> object) {
  if (object == nil) {
    return @"nil";
  }
  return [object description];
}

jboolean SMInterpreter_isBaseClassWithNSString_(SMInterpreter *self, NSString *className_) {
  return [((NSString *) nil_chk(className_)) isEqual:SMConstants_CLASS_OBJECT] || [className_ isEqual:SMConstants_CLASS_NUMBER] || [className_ isEqual:SMConstants_CLASS_STRING] || [className_ isEqual:SMConstants_CLASS_EXCEPTION];
}

SMSimiClassImpl *SMInterpreter_getObjectClass(SMInterpreter *self) {
  return (SMSimiClassImpl *) cast_chk([((SMSimiValue *) nil_chk([((id<SMSimiProperty>) nil_chk([((SMEnvironment *) nil_chk(self->globals_)) tryGetWithNSString:SMConstants_CLASS_OBJECT])) getValue])) getObject], [SMSimiClassImpl class]);
}

void SMInterpreter_putBlockWithSMStmt_BlockStmt_withSMBlockImpl_(SMInterpreter *self, id<SMStmt_BlockStmt> stmt, SMBlockImpl *block) {
  SMSparseArray *blocks = [((id<JavaUtilMap>) nil_chk(self->yieldedStmts_)) getWithId:stmt];
  if (blocks == nil) {
    blocks = new_SMSparseArray_init();
    (void) [self->yieldedStmts_ putWithId:stmt withId:blocks];
  }
  [blocks putWithInt:((SMEnvironment *) nil_chk(self->environment_))->depth_ withId:block];
}

void SMInterpreter_applyAnnotationsWithId_(SMInterpreter *self, id key) {
  if ([((id<JavaUtilList>) nil_chk(self->annotationsBuffer_)) isEmpty]) {
    return;
  }
  id<JavaUtilList> copy_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(new_JavaUtilArrayList_initWithJavaUtilCollection_(self->annotationsBuffer_));
  (void) [((id<JavaUtilMap>) nil_chk(self->annotations_)) putWithId:key withId:copy_];
  [((id<JavaUtilList>) nil_chk(self->annotationsBuffer_)) clear];
}

id<JavaUtilList> SMInterpreter_getAnnotationsWithId_(SMInterpreter *self, id key) {
  id<JavaUtilList> list = [((id<JavaUtilMap>) nil_chk(self->annotations_)) getWithId:key];
  (void) [((id<JavaUtilMap>) nil_chk(self->annotations_)) removeWithId:key];
  return list;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMInterpreter)

@implementation SMInterpreter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMInterpreter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return @"clock()";
}

- (jint)arity {
  return 0;
}

- (id<SMSimiProperty>)callWithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter
                                withJavaUtilList:(id<JavaUtilList>)arguments
                                     withBoolean:(jboolean)rethrow {
  return new_SMSimiValue_Number_initWithDouble_((jdouble) JavaLangSystem_currentTimeMillis() / 1000.0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toCodeWithInt:withBoolean:);
  methods[2].selector = @selector(arity);
  methods[3].selector = @selector(callWithSMBlockInterpreter:withJavaUtilList:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toCode", "IZ", "call", "LSMBlockInterpreter;LJavaUtilList;Z", "(LBlockInterpreter;Ljava/util/List<LSimiProperty;>;Z)LSimiProperty;", "LSMInterpreter;", "initWithJavaUtilCollection:" };
  static const J2ObjcClassInfo _SMInterpreter_1 = { "", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 5, -1, 6, -1, -1 };
  return &_SMInterpreter_1;
}

@end

void SMInterpreter_1_init(SMInterpreter_1 *self) {
  NSObject_init(self);
}

SMInterpreter_1 *new_SMInterpreter_1_init() {
  J2OBJC_NEW_IMPL(SMInterpreter_1, init)
}

SMInterpreter_1 *create_SMInterpreter_1_init() {
  J2OBJC_CREATE_IMPL(SMInterpreter_1, init)
}

J2OBJC_INITIALIZED_DEFN(SMInterpreter_$Lambda$1)

@implementation SMInterpreter_$Lambda$1

- (id)applyWithId:(id<SMSimiObject>)a {
  return new_SMSimiValue_Object_initWithSMSimiObject_(a);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMInterpreter_$Lambda$1 class]) {
    SMInterpreter_$Lambda$1_instance = new_SMInterpreter_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMInterpreter_$Lambda$1)
  }
}

@end

void SMInterpreter_$Lambda$1_init(SMInterpreter_$Lambda$1 *self) {
  NSObject_init(self);
}

SMInterpreter_$Lambda$1 *new_SMInterpreter_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMInterpreter_$Lambda$1, init)
}

SMInterpreter_$Lambda$1 *create_SMInterpreter_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMInterpreter_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(SMInterpreter_$Lambda$2)

@implementation SMInterpreter_$Lambda$2

- (id)get {
  return new_JavaUtilArrayList_init();
}

+ (void)initialize {
  if (self == [SMInterpreter_$Lambda$2 class]) {
    SMInterpreter_$Lambda$2_instance = new_SMInterpreter_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMInterpreter_$Lambda$2)
  }
}

@end

void SMInterpreter_$Lambda$2_init(SMInterpreter_$Lambda$2 *self) {
  NSObject_init(self);
}

SMInterpreter_$Lambda$2 *new_SMInterpreter_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMInterpreter_$Lambda$2, init)
}

SMInterpreter_$Lambda$2 *create_SMInterpreter_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMInterpreter_$Lambda$2, init)
}

@implementation SMInterpreter_$Lambda$3

- (jboolean)testWithId:(SMSimiClassImpl *)superclass_ {
  return [((NSString *) nil_chk(((SMSimiClassImpl *) nil_chk(superclass_))->name_)) isEqual:((SMToken *) nil_chk(((SMExpr_Super *) nil_chk(val$expr_))->superclass__))->lexeme_];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

@end

void SMInterpreter_$Lambda$3_initWithSMExpr_Super_(SMInterpreter_$Lambda$3 *self, SMExpr_Super *capture$0) {
  self->val$expr_ = capture$0;
  NSObject_init(self);
}

SMInterpreter_$Lambda$3 *new_SMInterpreter_$Lambda$3_initWithSMExpr_Super_(SMExpr_Super *capture$0) {
  J2OBJC_NEW_IMPL(SMInterpreter_$Lambda$3, initWithSMExpr_Super_, capture$0)
}

SMInterpreter_$Lambda$3 *create_SMInterpreter_$Lambda$3_initWithSMExpr_Super_(SMExpr_Super *capture$0) {
  J2OBJC_CREATE_IMPL(SMInterpreter_$Lambda$3, initWithSMExpr_Super_, capture$0)
}
