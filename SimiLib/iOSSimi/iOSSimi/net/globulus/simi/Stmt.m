//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Stmt.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"
#include "Expr.h"
#include "SimiStatement.h"
#include "Stmt.h"
#include "TempNull.h"
#include "Token.h"
#include "TokenType.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface SMStmt_Visitor : NSObject

@end

@interface SMStmt_BlockStmt : NSObject

@end

@interface SMStmt_Class_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(SMExpr *)s;

@end

J2OBJC_STATIC_INIT(SMStmt_Class_$Lambda$1)

inline SMStmt_Class_$Lambda$1 *SMStmt_Class_$Lambda$1_get_instance(void);
static SMStmt_Class_$Lambda$1 *SMStmt_Class_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_Class_$Lambda$1, instance, SMStmt_Class_$Lambda$1 *)

__attribute__((unused)) static void SMStmt_Class_$Lambda$1_init(SMStmt_Class_$Lambda$1 *self);

__attribute__((unused)) static SMStmt_Class_$Lambda$1 *new_SMStmt_Class_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Class_$Lambda$1 *create_SMStmt_Class_$Lambda$1_init(void);

@interface SMStmt_Class_$Lambda$2 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMExpr *)m;

@end

J2OBJC_EMPTY_STATIC_INIT(SMStmt_Class_$Lambda$2)

__attribute__((unused)) static void SMStmt_Class_$Lambda$2_initWithInt_(SMStmt_Class_$Lambda$2 *self, jint capture$0);

__attribute__((unused)) static SMStmt_Class_$Lambda$2 *new_SMStmt_Class_$Lambda$2_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Class_$Lambda$2 *create_SMStmt_Class_$Lambda$2_initWithInt_(jint capture$0);

@interface SMStmt_Class_$Lambda$3 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMExpr_Assign *)c;

@end

J2OBJC_EMPTY_STATIC_INIT(SMStmt_Class_$Lambda$3)

__attribute__((unused)) static void SMStmt_Class_$Lambda$3_initWithInt_(SMStmt_Class_$Lambda$3 *self, jint capture$0);

__attribute__((unused)) static SMStmt_Class_$Lambda$3 *new_SMStmt_Class_$Lambda$3_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Class_$Lambda$3 *create_SMStmt_Class_$Lambda$3_initWithInt_(jint capture$0);

@interface SMStmt_Class_$Lambda$4 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMStmt_Function *)m;

@end

J2OBJC_EMPTY_STATIC_INIT(SMStmt_Class_$Lambda$4)

__attribute__((unused)) static void SMStmt_Class_$Lambda$4_initWithInt_(SMStmt_Class_$Lambda$4 *self, jint capture$0);

__attribute__((unused)) static SMStmt_Class_$Lambda$4 *new_SMStmt_Class_$Lambda$4_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Class_$Lambda$4 *create_SMStmt_Class_$Lambda$4_initWithInt_(jint capture$0);

@interface SMStmt_Class_$Lambda$5 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMStmt_Class *)i;

@end

J2OBJC_EMPTY_STATIC_INIT(SMStmt_Class_$Lambda$5)

__attribute__((unused)) static void SMStmt_Class_$Lambda$5_initWithInt_(SMStmt_Class_$Lambda$5 *self, jint capture$0);

__attribute__((unused)) static SMStmt_Class_$Lambda$5 *new_SMStmt_Class_$Lambda$5_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Class_$Lambda$5 *create_SMStmt_Class_$Lambda$5_initWithInt_(jint capture$0);

@interface SMStmt_Function_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMStmt_Annotation *)a;

@end

J2OBJC_EMPTY_STATIC_INIT(SMStmt_Function_$Lambda$1)

__attribute__((unused)) static void SMStmt_Function_$Lambda$1_initWithInt_(SMStmt_Function_$Lambda$1 *self, jint capture$0);

__attribute__((unused)) static SMStmt_Function_$Lambda$1 *new_SMStmt_Function_$Lambda$1_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Function_$Lambda$1 *create_SMStmt_Function_$Lambda$1_initWithInt_(jint capture$0);

@interface SMStmt_Elsif_$Lambda$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_Elsif_$Lambda$1)

inline SMStmt_Elsif_$Lambda$1 *SMStmt_Elsif_$Lambda$1_get_instance(void);
static SMStmt_Elsif_$Lambda$1 *SMStmt_Elsif_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_Elsif_$Lambda$1, instance, SMStmt_Elsif_$Lambda$1 *)

__attribute__((unused)) static void SMStmt_Elsif_$Lambda$1_init(SMStmt_Elsif_$Lambda$1 *self);

__attribute__((unused)) static SMStmt_Elsif_$Lambda$1 *new_SMStmt_Elsif_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Elsif_$Lambda$1 *create_SMStmt_Elsif_$Lambda$1_init(void);

@interface SMStmt_Elsif_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_Elsif_$Lambda$2)

inline SMStmt_Elsif_$Lambda$2 *SMStmt_Elsif_$Lambda$2_get_instance(void);
static SMStmt_Elsif_$Lambda$2 *SMStmt_Elsif_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_Elsif_$Lambda$2, instance, SMStmt_Elsif_$Lambda$2 *)

__attribute__((unused)) static void SMStmt_Elsif_$Lambda$2_init(SMStmt_Elsif_$Lambda$2 *self);

__attribute__((unused)) static SMStmt_Elsif_$Lambda$2 *new_SMStmt_Elsif_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_Elsif_$Lambda$2 *create_SMStmt_Elsif_$Lambda$2_init(void);

@interface SMStmt_If_$Lambda$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_If_$Lambda$1)

inline SMStmt_If_$Lambda$1 *SMStmt_If_$Lambda$1_get_instance(void);
static SMStmt_If_$Lambda$1 *SMStmt_If_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_If_$Lambda$1, instance, SMStmt_If_$Lambda$1 *)

__attribute__((unused)) static void SMStmt_If_$Lambda$1_init(SMStmt_If_$Lambda$1 *self);

__attribute__((unused)) static SMStmt_If_$Lambda$1 *new_SMStmt_If_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_If_$Lambda$1 *create_SMStmt_If_$Lambda$1_init(void);

@interface SMStmt_If_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_If_$Lambda$2)

inline SMStmt_If_$Lambda$2 *SMStmt_If_$Lambda$2_get_instance(void);
static SMStmt_If_$Lambda$2 *SMStmt_If_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_If_$Lambda$2, instance, SMStmt_If_$Lambda$2 *)

__attribute__((unused)) static void SMStmt_If_$Lambda$2_init(SMStmt_If_$Lambda$2 *self);

__attribute__((unused)) static SMStmt_If_$Lambda$2 *new_SMStmt_If_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_If_$Lambda$2 *create_SMStmt_If_$Lambda$2_init(void);

@interface SMStmt_If_$Lambda$3 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMStmt_Elsif *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(SMStmt_If_$Lambda$3)

__attribute__((unused)) static void SMStmt_If_$Lambda$3_initWithInt_(SMStmt_If_$Lambda$3 *self, jint capture$0);

__attribute__((unused)) static SMStmt_If_$Lambda$3 *new_SMStmt_If_$Lambda$3_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_If_$Lambda$3 *create_SMStmt_If_$Lambda$3_initWithInt_(jint capture$0);

@interface SMStmt_While_$Lambda$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_While_$Lambda$1)

inline SMStmt_While_$Lambda$1 *SMStmt_While_$Lambda$1_get_instance(void);
static SMStmt_While_$Lambda$1 *SMStmt_While_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_While_$Lambda$1, instance, SMStmt_While_$Lambda$1 *)

__attribute__((unused)) static void SMStmt_While_$Lambda$1_init(SMStmt_While_$Lambda$1 *self);

__attribute__((unused)) static SMStmt_While_$Lambda$1 *new_SMStmt_While_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_While_$Lambda$1 *create_SMStmt_While_$Lambda$1_init(void);

@interface SMStmt_While_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_While_$Lambda$2)

inline SMStmt_While_$Lambda$2 *SMStmt_While_$Lambda$2_get_instance(void);
static SMStmt_While_$Lambda$2 *SMStmt_While_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_While_$Lambda$2, instance, SMStmt_While_$Lambda$2 *)

__attribute__((unused)) static void SMStmt_While_$Lambda$2_init(SMStmt_While_$Lambda$2 *self);

__attribute__((unused)) static SMStmt_While_$Lambda$2 *new_SMStmt_While_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_While_$Lambda$2 *create_SMStmt_While_$Lambda$2_init(void);

@interface SMStmt_For_$Lambda$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_For_$Lambda$1)

inline SMStmt_For_$Lambda$1 *SMStmt_For_$Lambda$1_get_instance(void);
static SMStmt_For_$Lambda$1 *SMStmt_For_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_For_$Lambda$1, instance, SMStmt_For_$Lambda$1 *)

__attribute__((unused)) static void SMStmt_For_$Lambda$1_init(SMStmt_For_$Lambda$1 *self);

__attribute__((unused)) static SMStmt_For_$Lambda$1 *new_SMStmt_For_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_For_$Lambda$1 *create_SMStmt_For_$Lambda$1_init(void);

@interface SMStmt_For_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<SMSimiStatement>)s;

@end

J2OBJC_STATIC_INIT(SMStmt_For_$Lambda$2)

inline SMStmt_For_$Lambda$2 *SMStmt_For_$Lambda$2_get_instance(void);
static SMStmt_For_$Lambda$2 *SMStmt_For_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMStmt_For_$Lambda$2, instance, SMStmt_For_$Lambda$2 *)

__attribute__((unused)) static void SMStmt_For_$Lambda$2_init(SMStmt_For_$Lambda$2 *self);

__attribute__((unused)) static SMStmt_For_$Lambda$2 *new_SMStmt_For_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMStmt_For_$Lambda$2 *create_SMStmt_For_$Lambda$2_init(void);

@implementation SMStmt

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMStmt_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  return ((jint) [super hash]) + ((jint) [((NSString *) nil_chk([self toCodeWithInt:0 withBoolean:true])) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x480, 0, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "hashCode", "LSMStmt_Visitor;LSMStmt_BlockStmt;LSMStmt_Annotation;LSMStmt_Break;LSMStmt_Class;LSMStmt_Continue;LSMStmt_Expression;LSMStmt_Function;LSMStmt_Elsif;LSMStmt_If;LSMStmt_Print;LSMStmt_Rescue;LSMStmt_Import;LSMStmt_Return;LSMStmt_While;LSMStmt_For;LSMStmt_Yield;" };
  static const J2ObjcClassInfo _SMStmt = { "Stmt", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x400, 3, 0, -1, 4, -1, -1, -1 };
  return &_SMStmt;
}

@end

void SMStmt_init(SMStmt *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt)

@implementation SMStmt_Visitor

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x401, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x401, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x401, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x401, 12, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x401, 15, 16, -1, 17, -1, -1 },
    { NULL, "LNSObject;", 0x401, 18, 19, -1, 20, -1, -1 },
    { NULL, "LNSObject;", 0x401, 21, 22, -1, 23, -1, -1 },
    { NULL, "LNSObject;", 0x401, 24, 25, -1, 26, -1, -1 },
    { NULL, "LNSObject;", 0x401, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSObject;", 0x401, 30, 31, -1, 32, -1, -1 },
    { NULL, "LNSObject;", 0x401, 33, 34, -1, 35, -1, -1 },
    { NULL, "LNSObject;", 0x401, 36, 37, -1, 38, -1, -1 },
    { NULL, "LNSObject;", 0x401, 39, 40, -1, 41, -1, -1 },
    { NULL, "LNSObject;", 0x401, 42, 43, -1, 44, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(visitAnnotationStmtWithSMStmt_Annotation:);
  methods[1].selector = @selector(visitBreakStmtWithSMStmt_Break:);
  methods[2].selector = @selector(visitClassStmtWithSMStmt_Class:withBoolean:);
  methods[3].selector = @selector(visitContinueStmtWithSMStmt_Continue:);
  methods[4].selector = @selector(visitElsifStmtWithSMStmt_Elsif:);
  methods[5].selector = @selector(visitExpressionStmtWithSMStmt_Expression:);
  methods[6].selector = @selector(visitFunctionStmtWithSMStmt_Function:);
  methods[7].selector = @selector(visitForStmtWithSMStmt_For:);
  methods[8].selector = @selector(visitIfStmtWithSMStmt_If:);
  methods[9].selector = @selector(visitImportStmtWithSMStmt_Import:);
  methods[10].selector = @selector(visitPrintStmtWithSMStmt_Print:);
  methods[11].selector = @selector(visitRescueStmtWithSMStmt_Rescue:);
  methods[12].selector = @selector(visitReturnStmtWithSMStmt_Return:);
  methods[13].selector = @selector(visitWhileStmtWithSMStmt_While:);
  methods[14].selector = @selector(visitYieldStmtWithSMStmt_Yield:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "visitAnnotationStmt", "LSMStmt_Annotation;", "(LStmt$Annotation;)TR;", "visitBreakStmt", "LSMStmt_Break;", "(LStmt$Break;)TR;", "visitClassStmt", "LSMStmt_Class;Z", "(LStmt$Class;Z)TR;", "visitContinueStmt", "LSMStmt_Continue;", "(LStmt$Continue;)TR;", "visitElsifStmt", "LSMStmt_Elsif;", "(LStmt$Elsif;)TR;", "visitExpressionStmt", "LSMStmt_Expression;", "(LStmt$Expression;)TR;", "visitFunctionStmt", "LSMStmt_Function;", "(LStmt$Function;)TR;", "visitForStmt", "LSMStmt_For;", "(LStmt$For;)TR;", "visitIfStmt", "LSMStmt_If;", "(LStmt$If;)TR;", "visitImportStmt", "LSMStmt_Import;", "(LStmt$Import;)TR;", "visitPrintStmt", "LSMStmt_Print;", "(LStmt$Print;)TR;", "visitRescueStmt", "LSMStmt_Rescue;", "(LStmt$Rescue;)TR;", "visitReturnStmt", "LSMStmt_Return;", "(LStmt$Return;)TR;", "visitWhileStmt", "LSMStmt_While;", "(LStmt$While;)TR;", "visitYieldStmt", "LSMStmt_Yield;", "(LStmt$Yield;)TR;", "LSMStmt;", "<R:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _SMStmt_Visitor = { "Visitor", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x608, 15, 0, 45, -1, -1, 46, -1 };
  return &_SMStmt_Visitor;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(SMStmt_Visitor)

@implementation SMStmt_BlockStmt

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getChildren);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/List<LStmt$BlockStmt;>;", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_BlockStmt = { "BlockStmt", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x608, 1, 0, 1, -1, -1, -1, -1 };
  return &_SMStmt_BlockStmt;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(SMStmt_BlockStmt)

@implementation SMStmt_Annotation

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)expr {
  SMStmt_Annotation_initWithSMExpr_(self, expr);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitAnnotationStmtWithSMStmt_Annotation:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, BANG))) toCodeWithInt:indentationLevel withBoolean:false], [((SMExpr *) nil_chk(expr_)) toCodeWithInt:indentationLevel withBoolean:true], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return [((SMExpr *) nil_chk(expr_)) getLineNumber];
}

- (NSString *)getFileName {
  return [((SMExpr *) nil_chk(expr_)) getFileName];
}

- (jboolean)hasBreakPoint {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expr_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Annotation = { "Annotation", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 1, 6, -1, -1, -1, -1 };
  return &_SMStmt_Annotation;
}

@end

void SMStmt_Annotation_initWithSMExpr_(SMStmt_Annotation *self, SMExpr *expr) {
  SMStmt_init(self);
  self->expr_ = expr;
}

SMStmt_Annotation *new_SMStmt_Annotation_initWithSMExpr_(SMExpr *expr) {
  J2OBJC_NEW_IMPL(SMStmt_Annotation, initWithSMExpr_, expr)
}

SMStmt_Annotation *create_SMStmt_Annotation_initWithSMExpr_(SMExpr *expr) {
  J2OBJC_CREATE_IMPL(SMStmt_Annotation, initWithSMExpr_, expr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Annotation)

@implementation SMStmt_Break

- (instancetype __nonnull)initWithSMToken:(SMToken *)name {
  SMStmt_Break_initWithSMToken_(self, name);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitBreakStmtWithSMStmt_Break:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$", [((SMTokenType *) nil_chk(((SMToken *) nil_chk(name_))->type_)) toCodeWithInt:indentationLevel withBoolean:false], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(name_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(name_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(name_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Break = { "Break", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 1, 6, -1, -1, -1, -1 };
  return &_SMStmt_Break;
}

@end

void SMStmt_Break_initWithSMToken_(SMStmt_Break *self, SMToken *name) {
  SMStmt_init(self);
  self->name_ = name;
}

SMStmt_Break *new_SMStmt_Break_initWithSMToken_(SMToken *name) {
  J2OBJC_NEW_IMPL(SMStmt_Break, initWithSMToken_, name)
}

SMStmt_Break *create_SMStmt_Break_initWithSMToken_(SMToken *name) {
  J2OBJC_CREATE_IMPL(SMStmt_Break, initWithSMToken_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Break)

@implementation SMStmt_Class

- (instancetype __nonnull)initWithSMToken:(SMToken *)opener
                              withSMToken:(SMToken *)name
                         withJavaUtilList:(id<JavaUtilList>)superclasses
                         withJavaUtilList:(id<JavaUtilList>)mixins
                         withJavaUtilList:(id<JavaUtilList>)constants
                         withJavaUtilList:(id<JavaUtilList>)innerClasses
                         withJavaUtilList:(id<JavaUtilList>)methods
                         withJavaUtilList:(id<JavaUtilList>)annotations {
  SMStmt_Class_initWithSMToken_withSMToken_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_(self, opener, name, superclasses, mixins, constants, innerClasses, methods, annotations);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  jboolean addToEnv = true;
  if (args != nil && args->size_ > 0) {
    addToEnv = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(args, 0), [JavaLangBoolean class]))) booleanValue];
  }
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitClassStmtWithSMStmt_Class:self withBoolean:addToEnv];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(((SMToken *) nil_chk(opener_))->type_)) toCodeWithInt:indentationLevel withBoolean:false]) appendWithNSString:@" "])) appendWithNSString:((SMToken *) nil_chk(name_))->lexeme_])) appendWithNSString:superclasses_ != nil ? JreStrcat("$$$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, LEFT_PAREN))) toCode], [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([superclasses_ stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMStmt_Class_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_(JreStrcat("$C", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, COMMA))) toCode], ' '))], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_PAREN))) toCode]) : @""])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, COLON))) toCode]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(mixins_)) stream])) mapWithJavaUtilFunctionFunction:new_SMStmt_Class_$Lambda$2_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_([JreLoadEnum(SMTokenType, NEWLINE) toCode])]])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(constants_)) stream])) mapWithJavaUtilFunctionFunction:new_SMStmt_Class_$Lambda$3_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_([JreLoadEnum(SMTokenType, NEWLINE) toCode])]])) appendWithNSString:[JreLoadEnum(SMTokenType, NEWLINE) toCode]])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(methods_)) stream])) mapWithJavaUtilFunctionFunction:new_SMStmt_Class_$Lambda$4_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joining()]])) appendWithNSString:[JreLoadEnum(SMTokenType, NEWLINE) toCode]])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(innerClasses_)) stream])) mapWithJavaUtilFunctionFunction:new_SMStmt_Class_$Lambda$5_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joining()]])) appendWithNSString:[JreLoadEnum(SMTokenType, NEWLINE) toCode]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, END))) toCodeWithInt:indentationLevel withBoolean:false]])) appendWithNSString:[JreLoadEnum(SMTokenType, NEWLINE) toCode]])) description];
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(opener_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(opener_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(opener_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMToken:withJavaUtilList:withJavaUtilList:withJavaUtilList:withJavaUtilList:withJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "opener_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "name_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "superclasses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "mixins_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "constants_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "innerClasses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "methods_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "annotations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMToken;LJavaUtilList;LJavaUtilList;LJavaUtilList;LJavaUtilList;LJavaUtilList;LJavaUtilList;", "(LToken;LToken;Ljava/util/List<LExpr;>;Ljava/util/List<LExpr;>;Ljava/util/List<LExpr$Assign;>;Ljava/util/List<LStmt$Class;>;Ljava/util/List<LStmt$Function;>;Ljava/util/List<LStmt$Annotation;>;)V", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "Ljava/util/List<LExpr;>;", "Ljava/util/List<LExpr$Assign;>;", "Ljava/util/List<LStmt$Class;>;", "Ljava/util/List<LStmt$Function;>;", "Ljava/util/List<LStmt$Annotation;>;", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Class = { "Class", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 8, 12, -1, -1, -1, -1 };
  return &_SMStmt_Class;
}

@end

void SMStmt_Class_initWithSMToken_withSMToken_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_(SMStmt_Class *self, SMToken *opener, SMToken *name, id<JavaUtilList> superclasses, id<JavaUtilList> mixins, id<JavaUtilList> constants, id<JavaUtilList> innerClasses, id<JavaUtilList> methods, id<JavaUtilList> annotations) {
  SMStmt_init(self);
  self->opener_ = opener;
  self->name_ = name;
  self->superclasses_ = superclasses;
  self->mixins_ = mixins;
  self->constants_ = constants;
  self->innerClasses_ = innerClasses;
  self->methods_ = methods;
  self->annotations_ = annotations;
}

SMStmt_Class *new_SMStmt_Class_initWithSMToken_withSMToken_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_(SMToken *opener, SMToken *name, id<JavaUtilList> superclasses, id<JavaUtilList> mixins, id<JavaUtilList> constants, id<JavaUtilList> innerClasses, id<JavaUtilList> methods, id<JavaUtilList> annotations) {
  J2OBJC_NEW_IMPL(SMStmt_Class, initWithSMToken_withSMToken_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_, opener, name, superclasses, mixins, constants, innerClasses, methods, annotations)
}

SMStmt_Class *create_SMStmt_Class_initWithSMToken_withSMToken_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_(SMToken *opener, SMToken *name, id<JavaUtilList> superclasses, id<JavaUtilList> mixins, id<JavaUtilList> constants, id<JavaUtilList> innerClasses, id<JavaUtilList> methods, id<JavaUtilList> annotations) {
  J2OBJC_CREATE_IMPL(SMStmt_Class, initWithSMToken_withSMToken_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_, opener, name, superclasses, mixins, constants, innerClasses, methods, annotations)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Class)

J2OBJC_INITIALIZED_DEFN(SMStmt_Class_$Lambda$1)

@implementation SMStmt_Class_$Lambda$1

- (id)applyWithId:(SMExpr *)s {
  return [((SMExpr *) nil_chk(s)) toCodeWithInt:0 withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_Class_$Lambda$1 class]) {
    SMStmt_Class_$Lambda$1_instance = new_SMStmt_Class_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMStmt_Class_$Lambda$1)
  }
}

@end

void SMStmt_Class_$Lambda$1_init(SMStmt_Class_$Lambda$1 *self) {
  NSObject_init(self);
}

SMStmt_Class_$Lambda$1 *new_SMStmt_Class_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMStmt_Class_$Lambda$1, init)
}

SMStmt_Class_$Lambda$1 *create_SMStmt_Class_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMStmt_Class_$Lambda$1, init)
}

@implementation SMStmt_Class_$Lambda$2

- (id)applyWithId:(SMExpr *)m {
  return JreStrcat("$C$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, IMPORT))) toCodeWithInt:val$indentationLevel_ + 1 withBoolean:false], ' ', [((SMExpr *) nil_chk(m)) toCodeWithInt:0 withBoolean:false]);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMStmt_Class_$Lambda$2_initWithInt_(SMStmt_Class_$Lambda$2 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMStmt_Class_$Lambda$2 *new_SMStmt_Class_$Lambda$2_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMStmt_Class_$Lambda$2, initWithInt_, capture$0)
}

SMStmt_Class_$Lambda$2 *create_SMStmt_Class_$Lambda$2_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMStmt_Class_$Lambda$2, initWithInt_, capture$0)
}

@implementation SMStmt_Class_$Lambda$3

- (id)applyWithId:(SMExpr_Assign *)c {
  return [((SMExpr_Assign *) nil_chk(c)) toCodeWithInt:val$indentationLevel_ + 1 withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMStmt_Class_$Lambda$3_initWithInt_(SMStmt_Class_$Lambda$3 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMStmt_Class_$Lambda$3 *new_SMStmt_Class_$Lambda$3_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMStmt_Class_$Lambda$3, initWithInt_, capture$0)
}

SMStmt_Class_$Lambda$3 *create_SMStmt_Class_$Lambda$3_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMStmt_Class_$Lambda$3, initWithInt_, capture$0)
}

@implementation SMStmt_Class_$Lambda$4

- (id)applyWithId:(SMStmt_Function *)m {
  return [((SMStmt_Function *) nil_chk(m)) toCodeWithInt:val$indentationLevel_ + 1 withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMStmt_Class_$Lambda$4_initWithInt_(SMStmt_Class_$Lambda$4 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMStmt_Class_$Lambda$4 *new_SMStmt_Class_$Lambda$4_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMStmt_Class_$Lambda$4, initWithInt_, capture$0)
}

SMStmt_Class_$Lambda$4 *create_SMStmt_Class_$Lambda$4_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMStmt_Class_$Lambda$4, initWithInt_, capture$0)
}

@implementation SMStmt_Class_$Lambda$5

- (id)applyWithId:(SMStmt_Class *)i {
  return [((SMStmt_Class *) nil_chk(i)) toCodeWithInt:val$indentationLevel_ + 1 withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMStmt_Class_$Lambda$5_initWithInt_(SMStmt_Class_$Lambda$5 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMStmt_Class_$Lambda$5 *new_SMStmt_Class_$Lambda$5_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMStmt_Class_$Lambda$5, initWithInt_, capture$0)
}

SMStmt_Class_$Lambda$5 *create_SMStmt_Class_$Lambda$5_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMStmt_Class_$Lambda$5, initWithInt_, capture$0)
}

@implementation SMStmt_Continue

- (instancetype __nonnull)initWithSMToken:(SMToken *)name {
  SMStmt_Continue_initWithSMToken_(self, name);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitContinueStmtWithSMStmt_Continue:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$", [((SMTokenType *) nil_chk(((SMToken *) nil_chk(name_))->type_)) toCodeWithInt:indentationLevel withBoolean:false], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(name_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(name_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(name_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Continue = { "Continue", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 1, 6, -1, -1, -1, -1 };
  return &_SMStmt_Continue;
}

@end

void SMStmt_Continue_initWithSMToken_(SMStmt_Continue *self, SMToken *name) {
  SMStmt_init(self);
  self->name_ = name;
}

SMStmt_Continue *new_SMStmt_Continue_initWithSMToken_(SMToken *name) {
  J2OBJC_NEW_IMPL(SMStmt_Continue, initWithSMToken_, name)
}

SMStmt_Continue *create_SMStmt_Continue_initWithSMToken_(SMToken *name) {
  J2OBJC_CREATE_IMPL(SMStmt_Continue, initWithSMToken_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Continue)

@implementation SMStmt_Expression

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)expression {
  SMStmt_Expression_initWithSMExpr_(self, expression);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitExpressionStmtWithSMStmt_Expression:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$", [((SMExpr *) nil_chk(expression_)) toCodeWithInt:indentationLevel withBoolean:false], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return [((SMExpr *) nil_chk(expression_)) getLineNumber];
}

- (NSString *)getFileName {
  return [((SMExpr *) nil_chk(expression_)) getFileName];
}

- (jboolean)hasBreakPoint {
  return [((SMExpr *) nil_chk(expression_)) hasBreakPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Expression = { "Expression", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 1, 6, -1, -1, -1, -1 };
  return &_SMStmt_Expression;
}

@end

void SMStmt_Expression_initWithSMExpr_(SMStmt_Expression *self, SMExpr *expression) {
  SMStmt_init(self);
  self->expression_ = expression;
}

SMStmt_Expression *new_SMStmt_Expression_initWithSMExpr_(SMExpr *expression) {
  J2OBJC_NEW_IMPL(SMStmt_Expression, initWithSMExpr_, expression)
}

SMStmt_Expression *create_SMStmt_Expression_initWithSMExpr_(SMExpr *expression) {
  J2OBJC_CREATE_IMPL(SMStmt_Expression, initWithSMExpr_, expression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Expression)

@implementation SMStmt_Function

- (instancetype __nonnull)initWithSMToken:(SMToken *)name
                         withSMExpr_Block:(SMExpr_Block *)block
                         withJavaUtilList:(id<JavaUtilList>)annotations {
  SMStmt_Function_initWithSMToken_withSMExpr_Block_withJavaUtilList_(self, name, block, annotations);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitFunctionStmtWithSMStmt_Function:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_init() appendWithNSString:annotations_ != nil ? [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([annotations_ stream])) mapWithJavaUtilFunctionFunction:new_SMStmt_Function_$Lambda$1_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joining()] : @""])) appendWithNSString:[((SMExpr_Block *) nil_chk(block_)) toCodeWithInt:indentationLevel withBoolean:false withNSString:((SMToken *) nil_chk(name_))->lexeme_]])) description];
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(name_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(name_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(name_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr_Block:withJavaUtilList:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "block_", "LSMExpr_Block;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "annotations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr_Block;LJavaUtilList;", "(LToken;LExpr$Block;Ljava/util/List<LStmt$Annotation;>;)V", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "Ljava/util/List<LStmt$Annotation;>;", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Function = { "Function", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 3, 8, -1, -1, -1, -1 };
  return &_SMStmt_Function;
}

@end

void SMStmt_Function_initWithSMToken_withSMExpr_Block_withJavaUtilList_(SMStmt_Function *self, SMToken *name, SMExpr_Block *block, id<JavaUtilList> annotations) {
  SMStmt_init(self);
  self->name_ = name;
  self->block_ = block;
  self->annotations_ = annotations;
}

SMStmt_Function *new_SMStmt_Function_initWithSMToken_withSMExpr_Block_withJavaUtilList_(SMToken *name, SMExpr_Block *block, id<JavaUtilList> annotations) {
  J2OBJC_NEW_IMPL(SMStmt_Function, initWithSMToken_withSMExpr_Block_withJavaUtilList_, name, block, annotations)
}

SMStmt_Function *create_SMStmt_Function_initWithSMToken_withSMExpr_Block_withJavaUtilList_(SMToken *name, SMExpr_Block *block, id<JavaUtilList> annotations) {
  J2OBJC_CREATE_IMPL(SMStmt_Function, initWithSMToken_withSMExpr_Block_withJavaUtilList_, name, block, annotations)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Function)

@implementation SMStmt_Function_$Lambda$1

- (id)applyWithId:(SMStmt_Annotation *)a {
  return [((SMStmt_Annotation *) nil_chk(a)) toCodeWithInt:val$indentationLevel_ withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMStmt_Function_$Lambda$1_initWithInt_(SMStmt_Function_$Lambda$1 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMStmt_Function_$Lambda$1 *new_SMStmt_Function_$Lambda$1_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMStmt_Function_$Lambda$1, initWithInt_, capture$0)
}

SMStmt_Function_$Lambda$1 *create_SMStmt_Function_$Lambda$1_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMStmt_Function_$Lambda$1, initWithInt_, capture$0)
}

@implementation SMStmt_Elsif

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)condition
                        withSMExpr_Block:(SMExpr_Block *)thenBranch {
  SMStmt_Elsif_initWithSMExpr_withSMExpr_Block_(self, condition, thenBranch);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitElsifStmtWithSMStmt_Elsif:self];
}

- (id<JavaUtilList>)getChildren {
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk([((SMExpr_Block *) nil_chk(thenBranch_)) getStatements])) stream])) filterWithJavaUtilFunctionPredicate:JreLoadStatic(SMStmt_Elsif_$Lambda$1, instance)])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMStmt_Elsif_$Lambda$2, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$", [((SMExpr *) nil_chk(condition_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst], [((SMExpr_Block *) nil_chk(thenBranch_)) toCodeWithInt:indentationLevel withBoolean:true]);
}

- (jint)getLineNumber {
  return [((SMExpr *) nil_chk(condition_)) getLineNumber];
}

- (NSString *)getFileName {
  return [((SMExpr *) nil_chk(condition_)) getFileName];
}

- (jboolean)hasBreakPoint {
  return [((SMExpr *) nil_chk(condition_)) hasBreakPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:withSMExpr_Block:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(getChildren);
  methods[3].selector = @selector(toCodeWithInt:withBoolean:);
  methods[4].selector = @selector(getLineNumber);
  methods[5].selector = @selector(getFileName);
  methods[6].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "condition_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "thenBranch_", "LSMExpr_Block;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;LSMExpr_Block;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "()Ljava/util/List<LStmt$BlockStmt;>;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Elsif = { "Elsif", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 7, 2, 7, -1, -1, -1, -1 };
  return &_SMStmt_Elsif;
}

@end

void SMStmt_Elsif_initWithSMExpr_withSMExpr_Block_(SMStmt_Elsif *self, SMExpr *condition, SMExpr_Block *thenBranch) {
  SMStmt_init(self);
  self->condition_ = condition;
  self->thenBranch_ = thenBranch;
}

SMStmt_Elsif *new_SMStmt_Elsif_initWithSMExpr_withSMExpr_Block_(SMExpr *condition, SMExpr_Block *thenBranch) {
  J2OBJC_NEW_IMPL(SMStmt_Elsif, initWithSMExpr_withSMExpr_Block_, condition, thenBranch)
}

SMStmt_Elsif *create_SMStmt_Elsif_initWithSMExpr_withSMExpr_Block_(SMExpr *condition, SMExpr_Block *thenBranch) {
  J2OBJC_CREATE_IMPL(SMStmt_Elsif, initWithSMExpr_withSMExpr_Block_, condition, thenBranch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Elsif)

J2OBJC_INITIALIZED_DEFN(SMStmt_Elsif_$Lambda$1)

@implementation SMStmt_Elsif_$Lambda$1

- (jboolean)testWithId:(id<SMSimiStatement>)s {
  return [SMStmt_BlockStmt_class_() isInstance:s];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_Elsif_$Lambda$1 class]) {
    SMStmt_Elsif_$Lambda$1_instance = new_SMStmt_Elsif_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMStmt_Elsif_$Lambda$1)
  }
}

@end

void SMStmt_Elsif_$Lambda$1_init(SMStmt_Elsif_$Lambda$1 *self) {
  NSObject_init(self);
}

SMStmt_Elsif_$Lambda$1 *new_SMStmt_Elsif_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMStmt_Elsif_$Lambda$1, init)
}

SMStmt_Elsif_$Lambda$1 *create_SMStmt_Elsif_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMStmt_Elsif_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(SMStmt_Elsif_$Lambda$2)

@implementation SMStmt_Elsif_$Lambda$2

- (id)applyWithId:(id<SMSimiStatement>)s {
  return (id<SMStmt_BlockStmt>) cast_check(s, SMStmt_BlockStmt_class_());
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_Elsif_$Lambda$2 class]) {
    SMStmt_Elsif_$Lambda$2_instance = new_SMStmt_Elsif_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMStmt_Elsif_$Lambda$2)
  }
}

@end

void SMStmt_Elsif_$Lambda$2_init(SMStmt_Elsif_$Lambda$2 *self) {
  NSObject_init(self);
}

SMStmt_Elsif_$Lambda$2 *new_SMStmt_Elsif_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMStmt_Elsif_$Lambda$2, init)
}

SMStmt_Elsif_$Lambda$2 *create_SMStmt_Elsif_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMStmt_Elsif_$Lambda$2, init)
}

@implementation SMStmt_If

- (instancetype __nonnull)initWithSMStmt_Elsif:(SMStmt_Elsif *)ifstmt
                              withJavaUtilList:(id<JavaUtilList>)elsifs
                              withSMExpr_Block:(SMExpr_Block *)elseBranch {
  SMStmt_If_initWithSMStmt_Elsif_withJavaUtilList_withSMExpr_Block_(self, ifstmt, elsifs, elseBranch);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitIfStmtWithSMStmt_If:self];
}

- (id<JavaUtilList>)getChildren {
  id<JavaUtilList> children = new_JavaUtilArrayList_init();
  [children addWithId:ifstmt_];
  [children addAllWithJavaUtilCollection:elsifs_];
  if (elseBranch_ != nil) {
    [children addAllWithJavaUtilCollection:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk([elseBranch_ getStatements])) stream])) filterWithJavaUtilFunctionPredicate:JreLoadStatic(SMStmt_If_$Lambda$1, instance)])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMStmt_If_$Lambda$2, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()]];
  }
  return children;
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, IF))) toCodeWithInt:indentationLevel withBoolean:false]) appendWithNSString:@" "])) appendWithNSString:[((SMStmt_Elsif *) nil_chk(ifstmt_)) toCodeWithInt:indentationLevel withBoolean:true]])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(elsifs_)) stream])) mapWithJavaUtilFunctionFunction:new_SMStmt_If_$Lambda$3_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joining()]])) appendWithNSString:elseBranch_ != nil ? JreStrcat("$$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, ELSE))) toCodeWithInt:indentationLevel withBoolean:false], [elseBranch_ toCodeWithInt:indentationLevel withBoolean:true]) : @""])) description];
}

- (jint)getLineNumber {
  return [((SMStmt_Elsif *) nil_chk(ifstmt_)) getLineNumber];
}

- (NSString *)getFileName {
  return [((SMStmt_Elsif *) nil_chk(ifstmt_)) getFileName];
}

- (jboolean)hasBreakPoint {
  return [((SMStmt_Elsif *) nil_chk(ifstmt_)) hasBreakPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMStmt_Elsif:withJavaUtilList:withSMExpr_Block:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(getChildren);
  methods[3].selector = @selector(toCodeWithInt:withBoolean:);
  methods[4].selector = @selector(getLineNumber);
  methods[5].selector = @selector(getFileName);
  methods[6].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ifstmt_", "LSMStmt_Elsif;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "elsifs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "elseBranch_", "LSMExpr_Block;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMStmt_Elsif;LJavaUtilList;LSMExpr_Block;", "(LStmt$Elsif;Ljava/util/List<LStmt$Elsif;>;LExpr$Block;)V", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "()Ljava/util/List<LStmt$BlockStmt;>;", "toCode", "IZ", "Ljava/util/List<LStmt$Elsif;>;", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_If = { "If", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 7, 3, 9, -1, -1, -1, -1 };
  return &_SMStmt_If;
}

@end

void SMStmt_If_initWithSMStmt_Elsif_withJavaUtilList_withSMExpr_Block_(SMStmt_If *self, SMStmt_Elsif *ifstmt, id<JavaUtilList> elsifs, SMExpr_Block *elseBranch) {
  SMStmt_init(self);
  self->ifstmt_ = ifstmt;
  self->elsifs_ = elsifs;
  self->elseBranch_ = elseBranch;
}

SMStmt_If *new_SMStmt_If_initWithSMStmt_Elsif_withJavaUtilList_withSMExpr_Block_(SMStmt_Elsif *ifstmt, id<JavaUtilList> elsifs, SMExpr_Block *elseBranch) {
  J2OBJC_NEW_IMPL(SMStmt_If, initWithSMStmt_Elsif_withJavaUtilList_withSMExpr_Block_, ifstmt, elsifs, elseBranch)
}

SMStmt_If *create_SMStmt_If_initWithSMStmt_Elsif_withJavaUtilList_withSMExpr_Block_(SMStmt_Elsif *ifstmt, id<JavaUtilList> elsifs, SMExpr_Block *elseBranch) {
  J2OBJC_CREATE_IMPL(SMStmt_If, initWithSMStmt_Elsif_withJavaUtilList_withSMExpr_Block_, ifstmt, elsifs, elseBranch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_If)

J2OBJC_INITIALIZED_DEFN(SMStmt_If_$Lambda$1)

@implementation SMStmt_If_$Lambda$1

- (jboolean)testWithId:(id<SMSimiStatement>)s {
  return [SMStmt_BlockStmt_class_() isInstance:s];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_If_$Lambda$1 class]) {
    SMStmt_If_$Lambda$1_instance = new_SMStmt_If_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMStmt_If_$Lambda$1)
  }
}

@end

void SMStmt_If_$Lambda$1_init(SMStmt_If_$Lambda$1 *self) {
  NSObject_init(self);
}

SMStmt_If_$Lambda$1 *new_SMStmt_If_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMStmt_If_$Lambda$1, init)
}

SMStmt_If_$Lambda$1 *create_SMStmt_If_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMStmt_If_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(SMStmt_If_$Lambda$2)

@implementation SMStmt_If_$Lambda$2

- (id)applyWithId:(id<SMSimiStatement>)s {
  return (id<SMStmt_BlockStmt>) cast_check(s, SMStmt_BlockStmt_class_());
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_If_$Lambda$2 class]) {
    SMStmt_If_$Lambda$2_instance = new_SMStmt_If_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMStmt_If_$Lambda$2)
  }
}

@end

void SMStmt_If_$Lambda$2_init(SMStmt_If_$Lambda$2 *self) {
  NSObject_init(self);
}

SMStmt_If_$Lambda$2 *new_SMStmt_If_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMStmt_If_$Lambda$2, init)
}

SMStmt_If_$Lambda$2 *create_SMStmt_If_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMStmt_If_$Lambda$2, init)
}

@implementation SMStmt_If_$Lambda$3

- (id)applyWithId:(SMStmt_Elsif *)e {
  return JreStrcat("$C$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, ELSIF))) toCode], ' ', [((SMStmt_Elsif *) nil_chk(e)) toCodeWithInt:val$indentationLevel_ withBoolean:true]);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMStmt_If_$Lambda$3_initWithInt_(SMStmt_If_$Lambda$3 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMStmt_If_$Lambda$3 *new_SMStmt_If_$Lambda$3_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMStmt_If_$Lambda$3, initWithInt_, capture$0)
}

SMStmt_If_$Lambda$3 *create_SMStmt_If_$Lambda$3_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMStmt_If_$Lambda$3, initWithInt_, capture$0)
}

@implementation SMStmt_Print

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)expression {
  SMStmt_Print_initWithSMExpr_(self, expression);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitPrintStmtWithSMStmt_Print:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, PRINT))) toCodeWithInt:indentationLevel withBoolean:false], ' ', [((SMExpr *) nil_chk(expression_)) toCodeWithInt:0 withBoolean:false], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return [((SMExpr *) nil_chk(expression_)) getLineNumber];
}

- (NSString *)getFileName {
  return [((SMExpr *) nil_chk(expression_)) getFileName];
}

- (jboolean)hasBreakPoint {
  return [((SMExpr *) nil_chk(expression_)) hasBreakPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Print = { "Print", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 1, 6, -1, -1, -1, -1 };
  return &_SMStmt_Print;
}

@end

void SMStmt_Print_initWithSMExpr_(SMStmt_Print *self, SMExpr *expression) {
  SMStmt_init(self);
  self->expression_ = expression;
}

SMStmt_Print *new_SMStmt_Print_initWithSMExpr_(SMExpr *expression) {
  J2OBJC_NEW_IMPL(SMStmt_Print, initWithSMExpr_, expression)
}

SMStmt_Print *create_SMStmt_Print_initWithSMExpr_(SMExpr *expression) {
  J2OBJC_CREATE_IMPL(SMStmt_Print, initWithSMExpr_, expression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Print)

@implementation SMStmt_Rescue

- (instancetype __nonnull)initWithSMToken:(SMToken *)keyword
                         withSMExpr_Block:(SMExpr_Block *)block {
  SMStmt_Rescue_initWithSMToken_withSMExpr_Block_(self, keyword, block);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitRescueStmtWithSMStmt_Rescue:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$", [((SMTokenType *) nil_chk(((SMToken *) nil_chk(keyword_))->type_)) toCode], ' ', [((SMExpr_Block *) nil_chk(block_)) toCodeWithInt:indentationLevel withBoolean:true]);
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(keyword_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(keyword_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(keyword_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr_Block:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyword_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "block_", "LSMExpr_Block;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr_Block;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Rescue = { "Rescue", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 2, 6, -1, -1, -1, -1 };
  return &_SMStmt_Rescue;
}

@end

void SMStmt_Rescue_initWithSMToken_withSMExpr_Block_(SMStmt_Rescue *self, SMToken *keyword, SMExpr_Block *block) {
  SMStmt_init(self);
  self->keyword_ = keyword;
  self->block_ = block;
}

SMStmt_Rescue *new_SMStmt_Rescue_initWithSMToken_withSMExpr_Block_(SMToken *keyword, SMExpr_Block *block) {
  J2OBJC_NEW_IMPL(SMStmt_Rescue, initWithSMToken_withSMExpr_Block_, keyword, block)
}

SMStmt_Rescue *create_SMStmt_Rescue_initWithSMToken_withSMExpr_Block_(SMToken *keyword, SMExpr_Block *block) {
  J2OBJC_CREATE_IMPL(SMStmt_Rescue, initWithSMToken_withSMExpr_Block_, keyword, block)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Rescue)

@implementation SMStmt_Import

- (instancetype __nonnull)initWithSMToken:(SMToken *)keyword
                               withSMExpr:(SMExpr *)value {
  SMStmt_Import_initWithSMToken_withSMExpr_(self, keyword, value);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitImportStmtWithSMStmt_Import:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$$", [((SMTokenType *) nil_chk(((SMToken *) nil_chk(keyword_))->type_)) toCodeWithInt:indentationLevel withBoolean:false], ' ', [((SMExpr *) nil_chk(value_)) toCodeWithInt:0 withBoolean:false], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(keyword_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(keyword_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(keyword_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyword_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Import = { "Import", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 2, 6, -1, -1, -1, -1 };
  return &_SMStmt_Import;
}

@end

void SMStmt_Import_initWithSMToken_withSMExpr_(SMStmt_Import *self, SMToken *keyword, SMExpr *value) {
  SMStmt_init(self);
  self->keyword_ = keyword;
  self->value_ = value;
}

SMStmt_Import *new_SMStmt_Import_initWithSMToken_withSMExpr_(SMToken *keyword, SMExpr *value) {
  J2OBJC_NEW_IMPL(SMStmt_Import, initWithSMToken_withSMExpr_, keyword, value)
}

SMStmt_Import *create_SMStmt_Import_initWithSMToken_withSMExpr_(SMToken *keyword, SMExpr *value) {
  J2OBJC_CREATE_IMPL(SMStmt_Import, initWithSMToken_withSMExpr_, keyword, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Import)

@implementation SMStmt_Return

- (instancetype __nonnull)initWithSMToken:(SMToken *)keyword
                               withSMExpr:(SMExpr *)value {
  SMStmt_Return_initWithSMToken_withSMExpr_(self, keyword, value);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitReturnStmtWithSMStmt_Return:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$$", [((SMTokenType *) nil_chk(((SMToken *) nil_chk(keyword_))->type_)) toCodeWithInt:indentationLevel withBoolean:false], ' ', ((value_ != nil) ? [((SMExpr *) nil_chk(value_)) toCodeWithInt:0 withBoolean:false] : [((SMTempNull *) nil_chk(JreLoadStatic(SMTempNull, INSTANCE))) toCodeWithInt:0 withBoolean:false]), [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(keyword_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(keyword_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(keyword_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyword_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Return = { "Return", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 2, 6, -1, -1, -1, -1 };
  return &_SMStmt_Return;
}

@end

void SMStmt_Return_initWithSMToken_withSMExpr_(SMStmt_Return *self, SMToken *keyword, SMExpr *value) {
  SMStmt_init(self);
  self->keyword_ = keyword;
  self->value_ = value;
}

SMStmt_Return *new_SMStmt_Return_initWithSMToken_withSMExpr_(SMToken *keyword, SMExpr *value) {
  J2OBJC_NEW_IMPL(SMStmt_Return, initWithSMToken_withSMExpr_, keyword, value)
}

SMStmt_Return *create_SMStmt_Return_initWithSMToken_withSMExpr_(SMToken *keyword, SMExpr *value) {
  J2OBJC_CREATE_IMPL(SMStmt_Return, initWithSMToken_withSMExpr_, keyword, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Return)

@implementation SMStmt_While

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)condition
                        withSMExpr_Block:(SMExpr_Block *)body {
  SMStmt_While_initWithSMExpr_withSMExpr_Block_(self, condition, body);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitWhileStmtWithSMStmt_While:self];
}

- (id<JavaUtilList>)getChildren {
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk([((SMExpr_Block *) nil_chk(body_)) getStatements])) stream])) filterWithJavaUtilFunctionPredicate:JreLoadStatic(SMStmt_While_$Lambda$1, instance)])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMStmt_While_$Lambda$2, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, WHILE))) toCode]) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(condition_)) toCodeWithInt:indentationLevel withBoolean:false]])) appendWithNSString:[((SMExpr_Block *) nil_chk(body_)) toCodeWithInt:indentationLevel withBoolean:true]])) description];
}

- (jint)getLineNumber {
  return [((SMExpr *) nil_chk(condition_)) getLineNumber];
}

- (NSString *)getFileName {
  return [((SMExpr *) nil_chk(condition_)) getFileName];
}

- (jboolean)hasBreakPoint {
  return [((SMExpr *) nil_chk(condition_)) hasBreakPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:withSMExpr_Block:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(getChildren);
  methods[3].selector = @selector(toCodeWithInt:withBoolean:);
  methods[4].selector = @selector(getLineNumber);
  methods[5].selector = @selector(getFileName);
  methods[6].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "condition_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "body_", "LSMExpr_Block;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;LSMExpr_Block;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "()Ljava/util/List<LStmt$BlockStmt;>;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_While = { "While", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 7, 2, 7, -1, -1, -1, -1 };
  return &_SMStmt_While;
}

@end

void SMStmt_While_initWithSMExpr_withSMExpr_Block_(SMStmt_While *self, SMExpr *condition, SMExpr_Block *body) {
  SMStmt_init(self);
  self->condition_ = condition;
  self->body_ = body;
}

SMStmt_While *new_SMStmt_While_initWithSMExpr_withSMExpr_Block_(SMExpr *condition, SMExpr_Block *body) {
  J2OBJC_NEW_IMPL(SMStmt_While, initWithSMExpr_withSMExpr_Block_, condition, body)
}

SMStmt_While *create_SMStmt_While_initWithSMExpr_withSMExpr_Block_(SMExpr *condition, SMExpr_Block *body) {
  J2OBJC_CREATE_IMPL(SMStmt_While, initWithSMExpr_withSMExpr_Block_, condition, body)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_While)

J2OBJC_INITIALIZED_DEFN(SMStmt_While_$Lambda$1)

@implementation SMStmt_While_$Lambda$1

- (jboolean)testWithId:(id<SMSimiStatement>)s {
  return [SMStmt_BlockStmt_class_() isInstance:s];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_While_$Lambda$1 class]) {
    SMStmt_While_$Lambda$1_instance = new_SMStmt_While_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMStmt_While_$Lambda$1)
  }
}

@end

void SMStmt_While_$Lambda$1_init(SMStmt_While_$Lambda$1 *self) {
  NSObject_init(self);
}

SMStmt_While_$Lambda$1 *new_SMStmt_While_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMStmt_While_$Lambda$1, init)
}

SMStmt_While_$Lambda$1 *create_SMStmt_While_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMStmt_While_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(SMStmt_While_$Lambda$2)

@implementation SMStmt_While_$Lambda$2

- (id)applyWithId:(id<SMSimiStatement>)s {
  return (id<SMStmt_BlockStmt>) cast_check(s, SMStmt_BlockStmt_class_());
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_While_$Lambda$2 class]) {
    SMStmt_While_$Lambda$2_instance = new_SMStmt_While_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMStmt_While_$Lambda$2)
  }
}

@end

void SMStmt_While_$Lambda$2_init(SMStmt_While_$Lambda$2 *self) {
  NSObject_init(self);
}

SMStmt_While_$Lambda$2 *new_SMStmt_While_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMStmt_While_$Lambda$2, init)
}

SMStmt_While_$Lambda$2 *create_SMStmt_While_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMStmt_While_$Lambda$2, init)
}

@implementation SMStmt_For

- (instancetype __nonnull)initWithSMExpr_Variable:(SMExpr_Variable *)var
                                       withSMExpr:(SMExpr *)iterable
                                 withSMExpr_Block:(SMExpr_Block *)body {
  SMStmt_For_initWithSMExpr_Variable_withSMExpr_withSMExpr_Block_(self, var, iterable, body);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitForStmtWithSMStmt_For:self];
}

- (id<JavaUtilList>)getChildren {
  return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk([((SMExpr_Block *) nil_chk(body_)) getStatements])) stream])) filterWithJavaUtilFunctionPredicate:JreLoadStatic(SMStmt_For_$Lambda$1, instance)])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMStmt_For_$Lambda$2, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, FOR))) toCodeWithInt:indentationLevel withBoolean:false]) appendWithNSString:@" "])) appendWithNSString:[((SMExpr_Variable *) nil_chk(var_)) toCodeWithInt:0 withBoolean:false]])) appendWithNSString:@" "])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, IN))) toCode]])) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(iterable_)) toCodeWithInt:0 withBoolean:false]])) appendWithNSString:[((SMExpr_Block *) nil_chk(body_)) toCodeWithInt:indentationLevel withBoolean:true]])) description];
}

- (jint)getLineNumber {
  return [((SMExpr_Variable *) nil_chk(var_)) getLineNumber];
}

- (NSString *)getFileName {
  return [((SMExpr_Variable *) nil_chk(var_)) getFileName];
}

- (jboolean)hasBreakPoint {
  return [((SMExpr_Variable *) nil_chk(var_)) hasBreakPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr_Variable:withSMExpr:withSMExpr_Block:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(getChildren);
  methods[3].selector = @selector(toCodeWithInt:withBoolean:);
  methods[4].selector = @selector(getLineNumber);
  methods[5].selector = @selector(getFileName);
  methods[6].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "var_", "LSMExpr_Variable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iterable_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "body_", "LSMExpr_Block;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr_Variable;LSMExpr;LSMExpr_Block;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "()Ljava/util/List<LStmt$BlockStmt;>;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_For = { "For", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 7, 3, 7, -1, -1, -1, -1 };
  return &_SMStmt_For;
}

@end

void SMStmt_For_initWithSMExpr_Variable_withSMExpr_withSMExpr_Block_(SMStmt_For *self, SMExpr_Variable *var, SMExpr *iterable, SMExpr_Block *body) {
  SMStmt_init(self);
  self->var_ = var;
  self->iterable_ = iterable;
  self->body_ = body;
}

SMStmt_For *new_SMStmt_For_initWithSMExpr_Variable_withSMExpr_withSMExpr_Block_(SMExpr_Variable *var, SMExpr *iterable, SMExpr_Block *body) {
  J2OBJC_NEW_IMPL(SMStmt_For, initWithSMExpr_Variable_withSMExpr_withSMExpr_Block_, var, iterable, body)
}

SMStmt_For *create_SMStmt_For_initWithSMExpr_Variable_withSMExpr_withSMExpr_Block_(SMExpr_Variable *var, SMExpr *iterable, SMExpr_Block *body) {
  J2OBJC_CREATE_IMPL(SMStmt_For, initWithSMExpr_Variable_withSMExpr_withSMExpr_Block_, var, iterable, body)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_For)

J2OBJC_INITIALIZED_DEFN(SMStmt_For_$Lambda$1)

@implementation SMStmt_For_$Lambda$1

- (jboolean)testWithId:(id<SMSimiStatement>)s {
  return [SMStmt_BlockStmt_class_() isInstance:s];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_For_$Lambda$1 class]) {
    SMStmt_For_$Lambda$1_instance = new_SMStmt_For_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMStmt_For_$Lambda$1)
  }
}

@end

void SMStmt_For_$Lambda$1_init(SMStmt_For_$Lambda$1 *self) {
  NSObject_init(self);
}

SMStmt_For_$Lambda$1 *new_SMStmt_For_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMStmt_For_$Lambda$1, init)
}

SMStmt_For_$Lambda$1 *create_SMStmt_For_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMStmt_For_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(SMStmt_For_$Lambda$2)

@implementation SMStmt_For_$Lambda$2

- (id)applyWithId:(id<SMSimiStatement>)s {
  return (id<SMStmt_BlockStmt>) cast_check(s, SMStmt_BlockStmt_class_());
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMStmt_For_$Lambda$2 class]) {
    SMStmt_For_$Lambda$2_instance = new_SMStmt_For_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(SMStmt_For_$Lambda$2)
  }
}

@end

void SMStmt_For_$Lambda$2_init(SMStmt_For_$Lambda$2 *self) {
  NSObject_init(self);
}

SMStmt_For_$Lambda$2 *new_SMStmt_For_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(SMStmt_For_$Lambda$2, init)
}

SMStmt_For_$Lambda$2 *create_SMStmt_For_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(SMStmt_For_$Lambda$2, init)
}

@implementation SMStmt_Yield

- (instancetype __nonnull)initWithSMToken:(SMToken *)keyword
                               withSMExpr:(SMExpr *)value {
  SMStmt_Yield_initWithSMToken_withSMExpr_(self, keyword, value);
  return self;
}

- (id)acceptWithSMStmt_Visitor:(id<SMStmt_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return [((id<SMStmt_Visitor>) nil_chk(visitor)) visitYieldStmtWithSMStmt_Yield:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$$", [((SMTokenType *) nil_chk(((SMToken *) nil_chk(keyword_))->type_)) toCodeWithInt:indentationLevel withBoolean:false], ' ', [((SMExpr *) nil_chk(value_)) toCodeWithInt:0 withBoolean:false], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]);
}

- (jint)getLineNumber {
  return ((SMToken *) nil_chk(keyword_))->line_;
}

- (NSString *)getFileName {
  return ((SMToken *) nil_chk(keyword_))->file_;
}

- (jboolean)hasBreakPoint {
  return ((SMToken *) nil_chk(keyword_))->hasBreakpoint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr:);
  methods[1].selector = @selector(acceptWithSMStmt_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getFileName);
  methods[5].selector = @selector(hasBreakPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyword_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr;", "accept", "LSMStmt_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LStmt$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMStmt;" };
  static const J2ObjcClassInfo _SMStmt_Yield = { "Yield", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 6, 2, 6, -1, -1, -1, -1 };
  return &_SMStmt_Yield;
}

@end

void SMStmt_Yield_initWithSMToken_withSMExpr_(SMStmt_Yield *self, SMToken *keyword, SMExpr *value) {
  SMStmt_init(self);
  self->keyword_ = keyword;
  self->value_ = value;
}

SMStmt_Yield *new_SMStmt_Yield_initWithSMToken_withSMExpr_(SMToken *keyword, SMExpr *value) {
  J2OBJC_NEW_IMPL(SMStmt_Yield, initWithSMToken_withSMExpr_, keyword, value)
}

SMStmt_Yield *create_SMStmt_Yield_initWithSMToken_withSMExpr_(SMToken *keyword, SMExpr *value) {
  J2OBJC_CREATE_IMPL(SMStmt_Yield, initWithSMToken_withSMExpr_, keyword, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMStmt_Yield)
