//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Scanner.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "Constants.h"
#include "ErrorHub.h"
#include "Scanner.h"
#include "SimiValue.h"
#include "Token.h"
#include "TokenType.h"

@interface SMScanner () {
 @public
  NSString *source_;
  id<JavaUtilList> tokens_;
  jint start_;
  jint current_;
  jint line_;
  jint stringInterpolationParentheses_;
  jchar lastStringOpener_;
}

- (void)scanToken;

- (void)identifier;

- (void)number;

- (NSString *)escapedStringWithInt:(jint)start
                           withInt:(jint)stop;

- (NSString *)keywordStringWithSMTokenType:(SMTokenType *)type;

- (jboolean)matchPeekWithSMTokenType:(SMTokenType *)type;

- (jboolean)matchWithChar:(jchar)expected;

- (jchar)peek;

- (jchar)peekNext;

- (jboolean)isAlphaWithChar:(jchar)c;

- (jboolean)isAlphaNumericWithChar:(jchar)c;

- (jboolean)isDigitWithChar:(jchar)c;

- (jboolean)isDigitOrUnderscoreWithChar:(jchar)c;

- (jboolean)isStringDelimWithChar:(jchar)c;

- (jboolean)isAtEnd;

- (jchar)advance;

- (void)addTokenWithSMTokenType:(SMTokenType *)type;

- (void)addTokenWithSMTokenType:(SMTokenType *)type
                withSMSimiValue:(SMSimiValue *)literal;

@end

J2OBJC_FIELD_SETTER(SMScanner, source_, NSString *)
J2OBJC_FIELD_SETTER(SMScanner, tokens_, id<JavaUtilList>)

inline id<JavaUtilMap> SMScanner_get_keywords(void);
static id<JavaUtilMap> SMScanner_keywords;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMScanner, keywords, id<JavaUtilMap>)

__attribute__((unused)) static void SMScanner_scanToken(SMScanner *self);

__attribute__((unused)) static void SMScanner_identifier(SMScanner *self);

__attribute__((unused)) static void SMScanner_number(SMScanner *self);

__attribute__((unused)) static NSString *SMScanner_escapedStringWithInt_withInt_(SMScanner *self, jint start, jint stop);

__attribute__((unused)) static NSString *SMScanner_keywordStringWithSMTokenType_(SMScanner *self, SMTokenType *type);

__attribute__((unused)) static jboolean SMScanner_matchPeekWithSMTokenType_(SMScanner *self, SMTokenType *type);

__attribute__((unused)) static jboolean SMScanner_matchWithChar_(SMScanner *self, jchar expected);

__attribute__((unused)) static jchar SMScanner_peek(SMScanner *self);

__attribute__((unused)) static jchar SMScanner_peekNext(SMScanner *self);

__attribute__((unused)) static jboolean SMScanner_isAlphaWithChar_(SMScanner *self, jchar c);

__attribute__((unused)) static jboolean SMScanner_isAlphaNumericWithChar_(SMScanner *self, jchar c);

__attribute__((unused)) static jboolean SMScanner_isDigitWithChar_(SMScanner *self, jchar c);

__attribute__((unused)) static jboolean SMScanner_isDigitOrUnderscoreWithChar_(SMScanner *self, jchar c);

__attribute__((unused)) static jboolean SMScanner_isStringDelimWithChar_(SMScanner *self, jchar c);

__attribute__((unused)) static jboolean SMScanner_isAtEnd(SMScanner *self);

__attribute__((unused)) static jchar SMScanner_advance(SMScanner *self);

__attribute__((unused)) static void SMScanner_addTokenWithSMTokenType_(SMScanner *self, SMTokenType *type);

__attribute__((unused)) static void SMScanner_addTokenWithSMTokenType_withSMSimiValue_(SMScanner *self, SMTokenType *type, SMSimiValue *literal);

J2OBJC_INITIALIZED_DEFN(SMScanner)

@implementation SMScanner

- (instancetype __nonnull)initWithNSString:(NSString *)source {
  SMScanner_initWithNSString_(self, source);
  return self;
}

- (id<JavaUtilList>)scanTokensWithBoolean:(jboolean)addEof {
  while (!SMScanner_isAtEnd(self)) {
    start_ = current_;
    SMScanner_scanToken(self);
  }
  if (addEof) {
    [((id<JavaUtilList>) nil_chk(tokens_)) addWithId:new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, EOF), @"", nil, line_)];
  }
  return tokens_;
}

- (void)scanToken {
  SMScanner_scanToken(self);
}

- (void)identifier {
  SMScanner_identifier(self);
}

- (void)number {
  SMScanner_number(self);
}

- (void)stringWithChar:(jchar)opener {
  while (SMScanner_peek(self) != opener && !SMScanner_isAtEnd(self)) {
    if (SMScanner_peek(self) == 0x000a) {
      line_++;
    }
    else if (SMScanner_peek(self) == '\\') {
      jchar next = SMScanner_peekNext(self);
      if (next == opener) {
        SMScanner_advance(self);
      }
      else if (next == '(') {
        NSString *valueSoFar = SMScanner_escapedStringWithInt_withInt_(self, start_ + 1, current_);
        SMScanner_addTokenWithSMTokenType_withSMSimiValue_(self, JreLoadEnum(SMTokenType, STRING), new_SMSimiValue_String_initWithNSString_(valueSoFar));
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, PLUS));
        SMScanner_advance(self);
        SMScanner_advance(self);
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, LEFT_PAREN));
        stringInterpolationParentheses_ = 1;
        return;
      }
    }
    SMScanner_advance(self);
  }
  if (SMScanner_isAtEnd(self)) {
    [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) errorWithInt:line_ withNSString:@"Unterminated string."];
    return;
  }
  SMScanner_advance(self);
  NSString *value = SMScanner_escapedStringWithInt_withInt_(self, start_ + 1, current_ - 1);
  SMScanner_addTokenWithSMTokenType_withSMSimiValue_(self, JreLoadEnum(SMTokenType, STRING), new_SMSimiValue_String_initWithNSString_(value));
}

- (NSString *)escapedStringWithInt:(jint)start
                           withInt:(jint)stop {
  return SMScanner_escapedStringWithInt_withInt_(self, start, stop);
}

- (NSString *)keywordStringWithSMTokenType:(SMTokenType *)type {
  return SMScanner_keywordStringWithSMTokenType_(self, type);
}

- (jboolean)matchPeekWithSMTokenType:(SMTokenType *)type {
  return SMScanner_matchPeekWithSMTokenType_(self, type);
}

- (jboolean)matchWithChar:(jchar)expected {
  return SMScanner_matchWithChar_(self, expected);
}

- (jchar)peek {
  return SMScanner_peek(self);
}

- (jchar)peekNext {
  return SMScanner_peekNext(self);
}

- (jboolean)isAlphaWithChar:(jchar)c {
  return SMScanner_isAlphaWithChar_(self, c);
}

- (jboolean)isAlphaNumericWithChar:(jchar)c {
  return SMScanner_isAlphaNumericWithChar_(self, c);
}

- (jboolean)isDigitWithChar:(jchar)c {
  return SMScanner_isDigitWithChar_(self, c);
}

- (jboolean)isDigitOrUnderscoreWithChar:(jchar)c {
  return SMScanner_isDigitOrUnderscoreWithChar_(self, c);
}

- (jboolean)isStringDelimWithChar:(jchar)c {
  return SMScanner_isStringDelimWithChar_(self, c);
}

- (jboolean)isAtEnd {
  return SMScanner_isAtEnd(self);
}

- (jchar)advance {
  return SMScanner_advance(self);
}

- (void)addTokenWithSMTokenType:(SMTokenType *)type {
  SMScanner_addTokenWithSMTokenType_(self, type);
}

- (void)addTokenWithSMTokenType:(SMTokenType *)type
                withSMSimiValue:(SMSimiValue *)literal {
  SMScanner_addTokenWithSMTokenType_withSMSimiValue_(self, type, literal);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 5, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 15, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(scanTokensWithBoolean:);
  methods[2].selector = @selector(scanToken);
  methods[3].selector = @selector(identifier);
  methods[4].selector = @selector(number);
  methods[5].selector = @selector(stringWithChar:);
  methods[6].selector = @selector(escapedStringWithInt:withInt:);
  methods[7].selector = @selector(keywordStringWithSMTokenType:);
  methods[8].selector = @selector(matchPeekWithSMTokenType:);
  methods[9].selector = @selector(matchWithChar:);
  methods[10].selector = @selector(peek);
  methods[11].selector = @selector(peekNext);
  methods[12].selector = @selector(isAlphaWithChar:);
  methods[13].selector = @selector(isAlphaNumericWithChar:);
  methods[14].selector = @selector(isDigitWithChar:);
  methods[15].selector = @selector(isDigitOrUnderscoreWithChar:);
  methods[16].selector = @selector(isStringDelimWithChar:);
  methods[17].selector = @selector(isAtEnd);
  methods[18].selector = @selector(advance);
  methods[19].selector = @selector(addTokenWithSMTokenType:);
  methods[20].selector = @selector(addTokenWithSMTokenType:withSMSimiValue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keywords", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 19, 20, -1 },
    { "source_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tokens_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "start_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "current_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "line_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stringInterpolationParentheses_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastStringOpener_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "scanTokens", "Z", "(Z)Ljava/util/List<LToken;>;", "string", "C", "escapedString", "II", "keywordString", "LSMTokenType;", "matchPeek", "match", "isAlpha", "isAlphaNumeric", "isDigit", "isDigitOrUnderscore", "isStringDelim", "addToken", "LSMTokenType;LSMSimiValue;", &SMScanner_keywords, "Ljava/util/Map<Ljava/lang/String;LTokenType;>;", "Ljava/util/List<LToken;>;" };
  static const J2ObjcClassInfo _SMScanner = { "Scanner", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 21, 8, -1, -1, -1, -1, -1 };
  return &_SMScanner;
}

+ (void)initialize {
  if (self == [SMScanner class]) {
    {
      SMScanner_keywords = new_JavaUtilHashMap_init();
      (void) [SMScanner_keywords putWithId:@"and" withId:JreLoadEnum(SMTokenType, AND)];
      (void) [SMScanner_keywords putWithId:@"break" withId:JreLoadEnum(SMTokenType, BREAK)];
      (void) [SMScanner_keywords putWithId:@"class" withId:JreLoadEnum(SMTokenType, CLASS)];
      (void) [SMScanner_keywords putWithId:@"class_" withId:JreLoadEnum(SMTokenType, CLASS_FINAL)];
      (void) [SMScanner_keywords putWithId:@"class$" withId:JreLoadEnum(SMTokenType, CLASS_OPEN)];
      (void) [SMScanner_keywords putWithId:@"continue" withId:JreLoadEnum(SMTokenType, CONTINUE)];
      (void) [SMScanner_keywords putWithId:@"def" withId:JreLoadEnum(SMTokenType, DEF)];
      (void) [SMScanner_keywords putWithId:@"end" withId:JreLoadEnum(SMTokenType, END)];
      (void) [SMScanner_keywords putWithId:@"else" withId:JreLoadEnum(SMTokenType, ELSE)];
      (void) [SMScanner_keywords putWithId:@"elsif" withId:JreLoadEnum(SMTokenType, ELSIF)];
      (void) [SMScanner_keywords putWithId:@"false" withId:JreLoadEnum(SMTokenType, FALSE)];
      (void) [SMScanner_keywords putWithId:@"for" withId:JreLoadEnum(SMTokenType, FOR)];
      (void) [SMScanner_keywords putWithId:@"gu" withId:JreLoadEnum(SMTokenType, GU)];
      (void) [SMScanner_keywords putWithId:@"if" withId:JreLoadEnum(SMTokenType, IF)];
      (void) [SMScanner_keywords putWithId:@"import" withId:JreLoadEnum(SMTokenType, IMPORT)];
      (void) [SMScanner_keywords putWithId:@"in" withId:JreLoadEnum(SMTokenType, IN)];
      (void) [SMScanner_keywords putWithId:@"is" withId:JreLoadEnum(SMTokenType, IS)];
      (void) [SMScanner_keywords putWithId:@"ivic" withId:JreLoadEnum(SMTokenType, IVIC)];
      (void) [SMScanner_keywords putWithId:@"native" withId:JreLoadEnum(SMTokenType, NATIVE)];
      (void) [SMScanner_keywords putWithId:@"nil" withId:JreLoadEnum(SMTokenType, NIL)];
      (void) [SMScanner_keywords putWithId:@"not" withId:JreLoadEnum(SMTokenType, NOT)];
      (void) [SMScanner_keywords putWithId:@"or" withId:JreLoadEnum(SMTokenType, OR)];
      (void) [SMScanner_keywords putWithId:@"pass" withId:JreLoadEnum(SMTokenType, PASS)];
      (void) [SMScanner_keywords putWithId:@"print" withId:JreLoadEnum(SMTokenType, PRINT)];
      (void) [SMScanner_keywords putWithId:@"rescue" withId:JreLoadEnum(SMTokenType, RESCUE)];
      (void) [SMScanner_keywords putWithId:@"return" withId:JreLoadEnum(SMTokenType, RETURN)];
      (void) [SMScanner_keywords putWithId:SMConstants_SELF withId:JreLoadEnum(SMTokenType, SELF)];
      (void) [SMScanner_keywords putWithId:SMConstants_SUPER withId:JreLoadEnum(SMTokenType, SUPER)];
      (void) [SMScanner_keywords putWithId:@"true" withId:JreLoadEnum(SMTokenType, TRUE)];
      (void) [SMScanner_keywords putWithId:@"when" withId:JreLoadEnum(SMTokenType, WHEN)];
      (void) [SMScanner_keywords putWithId:@"while" withId:JreLoadEnum(SMTokenType, WHILE)];
      (void) [SMScanner_keywords putWithId:@"yield" withId:JreLoadEnum(SMTokenType, YIELD)];
    }
    J2OBJC_SET_INITIALIZED(SMScanner)
  }
}

@end

void SMScanner_initWithNSString_(SMScanner *self, NSString *source) {
  NSObject_init(self);
  self->tokens_ = new_JavaUtilArrayList_init();
  self->start_ = 0;
  self->current_ = 0;
  self->line_ = 1;
  self->stringInterpolationParentheses_ = 0;
  self->lastStringOpener_ = '"';
  self->source_ = source;
}

SMScanner *new_SMScanner_initWithNSString_(NSString *source) {
  J2OBJC_NEW_IMPL(SMScanner, initWithNSString_, source)
}

SMScanner *create_SMScanner_initWithNSString_(NSString *source) {
  J2OBJC_CREATE_IMPL(SMScanner, initWithNSString_, source)
}

void SMScanner_scanToken(SMScanner *self) {
  jchar c = SMScanner_advance(self);
  switch (c) {
    case '(':
    {
      SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, LEFT_PAREN));
      if (self->stringInterpolationParentheses_ > 0) {
        self->stringInterpolationParentheses_++;
      }
    }
    break;
    case ')':
    {
      SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, RIGHT_PAREN));
      if (self->stringInterpolationParentheses_ > 0) {
        self->stringInterpolationParentheses_--;
        if (self->stringInterpolationParentheses_ == 0) {
          SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, PLUS));
          [self stringWithChar:self->lastStringOpener_];
        }
      }
    }
    break;
    case '[':
    SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, LEFT_BRACKET));
    break;
    case ']':
    SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, RIGHT_BRACKET));
    break;
    case ',':
    SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, COMMA));
    break;
    case '.':
    SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, DOT));
    break;
    case ':':
    SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, COLON));
    break;
    case '@':
    SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, SELF));
    SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, DOT));
    break;
    case '?':
    {
      if (SMScanner_matchWithChar_(self, '?')) {
        if (SMScanner_matchWithChar_(self, '=')) {
          SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, QUESTION_QUESTION_EQUAL));
        }
        else {
          SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, QUESTION_QUESTION));
        }
      }
      else {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, QUESTION));
      }
    }
    break;
    case '=':
    SMScanner_addTokenWithSMTokenType_(self, SMScanner_matchWithChar_(self, '=') ? JreLoadEnum(SMTokenType, EQUAL_EQUAL) : JreLoadEnum(SMTokenType, EQUAL));
    break;
    case '<':
    {
      if (SMScanner_matchWithChar_(self, '>')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, LESS_GREATER));
      }
      else if (SMScanner_matchWithChar_(self, '=')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, LESS_EQUAL));
      }
      else {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, LESS));
      }
    }
    break;
    case '!':
    {
      if (SMScanner_matchWithChar_(self, '!')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, BANG_BANG));
      }
      else if (SMScanner_matchWithChar_(self, '=')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, BANG_EQUAL));
      }
      else {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, BANG));
      }
    }
    break;
    case '>':
    SMScanner_addTokenWithSMTokenType_(self, SMScanner_matchWithChar_(self, '=') ? JreLoadEnum(SMTokenType, GREATER_EQUAL) : JreLoadEnum(SMTokenType, GREATER));
    break;
    case '+':
    SMScanner_addTokenWithSMTokenType_(self, SMScanner_matchWithChar_(self, '=') ? JreLoadEnum(SMTokenType, PLUS_EQUAL) : JreLoadEnum(SMTokenType, PLUS));
    break;
    case '-':
    SMScanner_addTokenWithSMTokenType_(self, SMScanner_matchWithChar_(self, '=') ? JreLoadEnum(SMTokenType, MINUS_EQUAL) : JreLoadEnum(SMTokenType, MINUS));
    break;
    case '/':
    {
      if (SMScanner_matchWithChar_(self, '/')) {
        if ((SMScanner_matchWithChar_(self, '='))) {
          SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, SLASH_SLASH_EQUAL));
        }
        else {
          SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, SLASH_SLASH));
        }
      }
      else if (SMScanner_matchWithChar_(self, '=')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, SLASH_EQUAL));
      }
      else {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, SLASH));
      }
    }
    break;
    case '*':
    {
      if (SMScanner_matchWithChar_(self, '*')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, STAR_STAR));
      }
      else if (SMScanner_matchWithChar_(self, '=')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, STAR_EQUAL));
      }
      else {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, STAR));
      }
    }
    break;
    case '%':
    {
      if (SMScanner_matchWithChar_(self, '%')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, MOD_MOD));
      }
      else if (SMScanner_matchWithChar_(self, '=')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, MOD_EQUAL));
      }
      else {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, MOD));
      }
    }
    break;
    case '$':
    {
      if (SMScanner_matchWithChar_(self, '=')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, DOLLAR_EQUAL));
      }
      else if (SMScanner_matchWithChar_(self, '[')) {
        SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, DOLLAR_LEFT_BRACKET));
      }
      else {
        SMScanner_identifier(self);
      }
    }
    break;
    case '#':
    {
      while (SMScanner_peek(self) != 0x000a && !SMScanner_isAtEnd(self)) SMScanner_advance(self);
    }
    break;
    case '\\':
    {
      if (SMScanner_matchWithChar_(self, 0x000a)) {
        self->line_++;
      }
    }
    break;
    case ' ':
    case 0x000d:
    case 0x0009:
    break;
    case 0x000a:
    {
      self->line_++;
      SMScanner_addTokenWithSMTokenType_(self, JreLoadEnum(SMTokenType, NEWLINE));
    }
    break;
    default:
    if (SMScanner_isStringDelimWithChar_(self, c)) {
      [self stringWithChar:c];
    }
    else if (SMScanner_isDigitWithChar_(self, c)) {
      SMScanner_number(self);
    }
    else if (SMScanner_isAlphaWithChar_(self, c)) {
      SMScanner_identifier(self);
    }
    else {
      [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) errorWithInt:self->line_ withNSString:@"Unexpected character."];
    }
    break;
  }
}

void SMScanner_identifier(SMScanner *self) {
  while (SMScanner_isAlphaNumericWithChar_(self, SMScanner_peek(self))) SMScanner_advance(self);
  NSString *text = [((NSString *) nil_chk(self->source_)) java_substring:self->start_ endIndex:self->current_];
  SMTokenType *type = [((id<JavaUtilMap>) nil_chk(SMScanner_keywords)) getWithId:text];
  if (type == JreLoadEnum(SMTokenType, NOT) && SMScanner_matchPeekWithSMTokenType_(self, JreLoadEnum(SMTokenType, IN))) {
    type = JreLoadEnum(SMTokenType, NOTIN);
  }
  else if (type == JreLoadEnum(SMTokenType, IS) && SMScanner_matchPeekWithSMTokenType_(self, JreLoadEnum(SMTokenType, NOT))) {
    type = JreLoadEnum(SMTokenType, ISNOT);
  }
  else if (type == JreLoadEnum(SMTokenType, CLASS)) {
    NSString *candidateText = JreStrcat("$C", text, SMScanner_peek(self));
    SMTokenType *candidateType = [SMScanner_keywords getWithId:candidateText];
    if (candidateType != nil) {
      type = candidateType;
      SMScanner_advance(self);
    }
  }
  else if (type == nil) {
    type = JreLoadEnum(SMTokenType, IDENTIFIER);
  }
  SMScanner_addTokenWithSMTokenType_(self, type);
}

void SMScanner_number(SMScanner *self) {
  while (SMScanner_isDigitOrUnderscoreWithChar_(self, SMScanner_peek(self))) SMScanner_advance(self);
  if (SMScanner_peek(self) == '.' && SMScanner_isDigitWithChar_(self, SMScanner_peekNext(self))) {
    SMScanner_advance(self);
    while (SMScanner_isDigitOrUnderscoreWithChar_(self, SMScanner_peek(self))) SMScanner_advance(self);
  }
  if (SMScanner_peek(self) == 'e' || SMScanner_peek(self) == 'E') {
    if (SMScanner_isDigitWithChar_(self, SMScanner_peekNext(self))) {
      SMScanner_advance(self);
    }
    else if (SMScanner_peekNext(self) == '+' || SMScanner_peekNext(self) == '-') {
      SMScanner_advance(self);
      SMScanner_advance(self);
    }
    else {
      [((SMErrorHub *) nil_chk(SMErrorHub_sharedInstance())) errorWithInt:self->line_ withNSString:@"Expected a digit or + or - after E!"];
    }
    while (SMScanner_isDigitOrUnderscoreWithChar_(self, SMScanner_peek(self))) SMScanner_advance(self);
  }
  NSString *numberString = [((NSString *) nil_chk([((NSString *) nil_chk(self->source_)) java_substring:self->start_ endIndex:self->current_])) java_replace:@"_" withSequence:@""];
  SMSimiValue_Number *literal;
  @try {
    literal = new_SMSimiValue_Number_initWithLong_(JavaLangLong_parseLongWithNSString_(numberString));
  }
  @catch (JavaLangNumberFormatException *e) {
    literal = new_SMSimiValue_Number_initWithDouble_(JavaLangDouble_parseDoubleWithNSString_(numberString));
  }
  SMScanner_addTokenWithSMTokenType_withSMSimiValue_(self, JreLoadEnum(SMTokenType, NUMBER), literal);
}

NSString *SMScanner_escapedStringWithInt_withInt_(SMScanner *self, jint start, jint stop) {
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(self->source_)) java_substring:start endIndex:stop])) java_replace:@"\\n" withSequence:@"\n"])) java_replace:@"\\t" withSequence:@"\t"])) java_replace:@"\\\"" withSequence:@"\""];
}

NSString *SMScanner_keywordStringWithSMTokenType_(SMScanner *self, SMTokenType *type) {
  for (NSString * __strong s in nil_chk([((id<JavaUtilMap>) nil_chk(SMScanner_keywords)) keySet])) {
    if ([SMScanner_keywords getWithId:s] == type) {
      return s;
    }
  }
  return nil;
}

jboolean SMScanner_matchPeekWithSMTokenType_(SMScanner *self, SMTokenType *type) {
  NSString *keyword = SMScanner_keywordStringWithSMTokenType_(self, type);
  if (keyword == nil) {
    return false;
  }
  jint len = [keyword java_length];
  jint end = self->current_ + len + 1;
  if (end < [((NSString *) nil_chk(self->source_)) java_length] && [((NSString *) nil_chk([self->source_ java_substring:self->current_ + 1 endIndex:end])) isEqual:keyword]) {
    self->current_ = end;
    return true;
  }
  return false;
}

jboolean SMScanner_matchWithChar_(SMScanner *self, jchar expected) {
  if (SMScanner_isAtEnd(self)) return false;
  if ([((NSString *) nil_chk(self->source_)) charAtWithInt:self->current_] != expected) return false;
  self->current_++;
  return true;
}

jchar SMScanner_peek(SMScanner *self) {
  if (SMScanner_isAtEnd(self)) return 0x0000;
  return [((NSString *) nil_chk(self->source_)) charAtWithInt:self->current_];
}

jchar SMScanner_peekNext(SMScanner *self) {
  if (self->current_ + 1 >= [((NSString *) nil_chk(self->source_)) java_length]) return 0x0000;
  return [self->source_ charAtWithInt:self->current_ + 1];
}

jboolean SMScanner_isAlphaWithChar_(SMScanner *self, jchar c) {
  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == '$';
}

jboolean SMScanner_isAlphaNumericWithChar_(SMScanner *self, jchar c) {
  return SMScanner_isAlphaWithChar_(self, c) || SMScanner_isDigitWithChar_(self, c);
}

jboolean SMScanner_isDigitWithChar_(SMScanner *self, jchar c) {
  return c >= '0' && c <= '9';
}

jboolean SMScanner_isDigitOrUnderscoreWithChar_(SMScanner *self, jchar c) {
  return SMScanner_isDigitWithChar_(self, c) || c == '_';
}

jboolean SMScanner_isStringDelimWithChar_(SMScanner *self, jchar c) {
  return c == '"' || c == '\'';
}

jboolean SMScanner_isAtEnd(SMScanner *self) {
  return self->current_ >= [((NSString *) nil_chk(self->source_)) java_length];
}

jchar SMScanner_advance(SMScanner *self) {
  self->current_++;
  return [((NSString *) nil_chk(self->source_)) charAtWithInt:self->current_ - 1];
}

void SMScanner_addTokenWithSMTokenType_(SMScanner *self, SMTokenType *type) {
  SMScanner_addTokenWithSMTokenType_withSMSimiValue_(self, type, nil);
}

void SMScanner_addTokenWithSMTokenType_withSMSimiValue_(SMScanner *self, SMTokenType *type, SMSimiValue *literal) {
  NSString *text = [((NSString *) nil_chk(self->source_)) java_substring:self->start_ endIndex:self->current_];
  [((id<JavaUtilList>) nil_chk(self->tokens_)) addWithId:new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(type, text, literal, self->line_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMScanner)
