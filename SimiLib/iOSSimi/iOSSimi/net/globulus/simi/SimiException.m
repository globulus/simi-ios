//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SimiException.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/RuntimeException.h"
#include "java/util/List.h"
#include "SimiClass.h"
#include "SimiEnvironment.h"
#include "SimiException.h"
#include "SimiObject.h"
#include "SimiProperty.h"
#include "SimiValue.h"

@interface SMSimiException () {
 @public
  id<SMSimiClass> clazz_;
}

@end

J2OBJC_FIELD_SETTER(SMSimiException, clazz_, id<SMSimiClass>)

@implementation SMSimiException

- (instancetype __nonnull)initWithSMSimiClass:(id<SMSimiClass>)clazz
                                 withNSString:(NSString *)message {
  SMSimiException_initWithSMSimiClass_withNSString_(self, clazz, message);
  return self;
}

- (id<SMSimiClass>)getSimiClass {
  return clazz_;
}

- (id<SMSimiProperty>)getWithNSString:(NSString *)key
                withSMSimiEnvironment:(id<SMSimiEnvironment>)environment {
  if ([((NSString *) nil_chk(key)) isEqual:@"message"]) {
    return new_SMSimiValue_String_initWithNSString_([self getMessage]);
  }
  return nil;
}

- (void)setWithNSString:(NSString *)key
     withSMSimiProperty:(id<SMSimiProperty>)value
  withSMSimiEnvironment:(id<SMSimiEnvironment>)environment {
  @throw new_JavaLangAssertionError_init();
}

- (id<SMSimiObject>)cloneWithBoolean:(jboolean)mutable_ {
  return self;
}

- (id<JavaUtilList>)keys {
  return nil;
}

- (id<JavaUtilList>)values {
  return nil;
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return nil;
}

- (jint)getLineNumber {
  return -1;
}

- (NSString *)getFileName {
  return nil;
}

- (jboolean)hasBreakPoint {
  return false;
}

- (jint)compareToWithId:(id<SMSimiObject>)o {
  (void) cast_check(o, SMSimiObject_class_());
  return [((id<SMSimiClass>) nil_chk(clazz_)) compareToWithId:o];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSMSimiClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiClass:withNSString:);
  methods[1].selector = @selector(getSimiClass);
  methods[2].selector = @selector(getWithNSString:withSMSimiEnvironment:);
  methods[3].selector = @selector(setWithNSString:withSMSimiProperty:withSMSimiEnvironment:);
  methods[4].selector = @selector(cloneWithBoolean:);
  methods[5].selector = @selector(keys);
  methods[6].selector = @selector(values);
  methods[7].selector = @selector(toCodeWithInt:withBoolean:);
  methods[8].selector = @selector(getLineNumber);
  methods[9].selector = @selector(getFileName);
  methods[10].selector = @selector(hasBreakPoint);
  methods[11].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clazz_", "LSMSimiClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiClass;LNSString;", "get", "LNSString;LSMSimiEnvironment;", "set", "LNSString;LSMSimiProperty;LSMSimiEnvironment;", "clone", "Z", "()Ljava/util/List<LSimiValue;>;", "toCode", "IZ", "compareTo", "LSMSimiObject;" };
  static const J2ObjcClassInfo _SMSimiException = { "SimiException", "net.globulus.simi", ptrTable, methods, fields, 7, 0x11, 12, 1, -1, -1, -1, -1, -1 };
  return &_SMSimiException;
}

@end

void SMSimiException_initWithSMSimiClass_withNSString_(SMSimiException *self, id<SMSimiClass> clazz, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
  self->clazz_ = clazz;
}

SMSimiException *new_SMSimiException_initWithSMSimiClass_withNSString_(id<SMSimiClass> clazz, NSString *message) {
  J2OBJC_NEW_IMPL(SMSimiException, initWithSMSimiClass_withNSString_, clazz, message)
}

SMSimiException *create_SMSimiException_initWithSMSimiClass_withNSString_(id<SMSimiClass> clazz, NSString *message) {
  J2OBJC_CREATE_IMPL(SMSimiException, initWithSMSimiClass_withNSString_, clazz, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiException)
