//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SimiMethod.java
//

#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "BlockInterpreter.h"
#include "SimiClassImpl.h"
#include "SimiFunction.h"
#include "SimiMethod.h"
#include "SimiProperty.h"

@implementation SMSimiMethod

- (instancetype __nonnull)initWithSMSimiClassImpl:(SMSimiClassImpl *)clazz
                               withSMSimiFunction:(SMSimiFunction *)function {
  SMSimiMethod_initWithSMSimiClassImpl_withSMSimiFunction_(self, clazz, function);
  return self;
}

- (jint)arity {
  return [((SMSimiFunction *) nil_chk(function_)) arity];
}

- (id<SMSimiProperty>)callWithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter
                                withJavaUtilList:(id<JavaUtilList>)arguments
                                     withBoolean:(jboolean)rethrow {
  return [((SMSimiFunction *) nil_chk(function_)) callWithSMBlockInterpreter:interpreter withJavaUtilList:arguments withBoolean:rethrow];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((SMSimiFunction *) nil_chk(function_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst];
}

- (NSString *)description {
  return [((SMSimiFunction *) nil_chk(function_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiClassImpl:withSMSimiFunction:);
  methods[1].selector = @selector(arity);
  methods[2].selector = @selector(callWithSMBlockInterpreter:withJavaUtilList:withBoolean:);
  methods[3].selector = @selector(toCodeWithInt:withBoolean:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clazz_", "LSMSimiClassImpl;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "function_", "LSMSimiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiClassImpl;LSMSimiFunction;", "call", "LSMBlockInterpreter;LJavaUtilList;Z", "(LBlockInterpreter;Ljava/util/List<LSimiProperty;>;Z)LSimiProperty;", "toCode", "IZ", "toString" };
  static const J2ObjcClassInfo _SMSimiMethod = { "SimiMethod", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, -1, -1, -1, -1 };
  return &_SMSimiMethod;
}

@end

void SMSimiMethod_initWithSMSimiClassImpl_withSMSimiFunction_(SMSimiMethod *self, SMSimiClassImpl *clazz, SMSimiFunction *function) {
  NSObject_init(self);
  self->clazz_ = clazz;
  self->function_ = function;
}

SMSimiMethod *new_SMSimiMethod_initWithSMSimiClassImpl_withSMSimiFunction_(SMSimiClassImpl *clazz, SMSimiFunction *function) {
  J2OBJC_NEW_IMPL(SMSimiMethod, initWithSMSimiClassImpl_withSMSimiFunction_, clazz, function)
}

SMSimiMethod *create_SMSimiMethod_initWithSMSimiClassImpl_withSMSimiFunction_(SMSimiClassImpl *clazz, SMSimiFunction *function) {
  J2OBJC_CREATE_IMPL(SMSimiMethod, initWithSMSimiClassImpl_withSMSimiFunction_, clazz, function)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiMethod)
