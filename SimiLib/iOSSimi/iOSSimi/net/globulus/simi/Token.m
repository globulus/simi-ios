//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Token.java
//

#include "J2ObjC_source.h"
#include "Constants.h"
#include "SimiValue.h"
#include "Token.h"
#include "TokenType.h"

@implementation SMToken

- (instancetype __nonnull)initWithSMTokenType:(SMTokenType *)type
                                 withNSString:(NSString *)lexeme
                              withSMSimiValue:(SMSimiValue *)literal
                                      withInt:(jint)line
                                 withNSString:(NSString *)file {
  SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(self, type, lexeme, literal, line, file);
  return self;
}

+ (SMToken *)self__ {
  return SMToken_self__();
}

+ (SMToken *)superToken {
  return SMToken_superToken();
}

+ (SMToken *)selfDef {
  return SMToken_selfDef();
}

+ (SMToken *)nativeCallWithNSString:(NSString *)name {
  return SMToken_nativeCallWithNSString_(name);
}

+ (SMToken *)namedWithNSString:(NSString *)name {
  return SMToken_namedWithNSString_(name);
}

- (NSString *)description {
  return JreStrcat("@C$C@", type_, ' ', lexeme_, ' ', literal_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSMToken;", 0x8, 1, -1, -1, -1, -1, -1 },
    { NULL, "LSMToken;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMToken;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMToken;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "LSMToken;", 0x8, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMTokenType:withNSString:withSMSimiValue:withInt:withNSString:);
  methods[1].selector = @selector(self__);
  methods[2].selector = @selector(superToken);
  methods[3].selector = @selector(selfDef);
  methods[4].selector = @selector(nativeCallWithNSString:);
  methods[5].selector = @selector(namedWithNSString:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LSMTokenType;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lexeme_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "literal_", "LSMSimiValue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "line_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "file_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "hasBreakpoint_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMTokenType;LNSString;LSMSimiValue;ILNSString;", "self", "nativeCall", "LNSString;", "named", "toString" };
  static const J2ObjcClassInfo _SMToken = { "Token", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 7, 6, -1, -1, -1, -1, -1 };
  return &_SMToken;
}

@end

void SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(SMToken *self, SMTokenType *type, NSString *lexeme, SMSimiValue *literal, jint line, NSString *file) {
  NSObject_init(self);
  self->hasBreakpoint_ = false;
  self->type_ = type;
  self->lexeme_ = lexeme;
  self->literal_ = literal;
  self->line_ = line;
  self->file_ = file;
}

SMToken *new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(SMTokenType *type, NSString *lexeme, SMSimiValue *literal, jint line, NSString *file) {
  J2OBJC_NEW_IMPL(SMToken, initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_, type, lexeme, literal, line, file)
}

SMToken *create_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(SMTokenType *type, NSString *lexeme, SMSimiValue *literal, jint line, NSString *file) {
  J2OBJC_CREATE_IMPL(SMToken, initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_, type, lexeme, literal, line, file)
}

SMToken *SMToken_self__() {
  SMToken_initialize();
  return new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(JreLoadEnum(SMTokenType, SELF), SMConstants_SELF, nil, 0, nil);
}

SMToken *SMToken_superToken() {
  SMToken_initialize();
  return new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(JreLoadEnum(SMTokenType, SUPER), SMConstants_SUPER, nil, 0, nil);
}

SMToken *SMToken_selfDef() {
  SMToken_initialize();
  return new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(JreLoadEnum(SMTokenType, DEF), SMConstants_SELF_DEF, nil, 0, nil);
}

SMToken *SMToken_nativeCallWithNSString_(NSString *name) {
  SMToken_initialize();
  return new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(JreLoadEnum(SMTokenType, DEF), name, nil, 0, nil);
}

SMToken *SMToken_namedWithNSString_(NSString *name) {
  SMToken_initialize();
  return new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_withNSString_(JreLoadEnum(SMTokenType, IDENTIFIER), name, nil, 0, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMToken)
