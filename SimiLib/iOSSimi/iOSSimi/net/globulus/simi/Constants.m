//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Constants.java
//

#include "J2ObjC_source.h"
#include "Constants.h"

@interface SMConstants ()

- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void SMConstants_init(SMConstants *self);

__attribute__((unused)) static SMConstants *new_SMConstants_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMConstants *create_SMConstants_init(void);

NSString *SMConstants_PRIVATE = @"_";
NSString *SMConstants_IMPLICIT = @"#";
NSString *SMConstants_INIT = @"init";
NSString *SMConstants_SELF = @"self";
NSString *SMConstants_SELF_DEF = @"self(def)";
NSString *SMConstants_SUPER = @"super";
NSString *SMConstants_KEY = @"key";
NSString *SMConstants_VALUE = @"value";
NSString *SMConstants_SET = @"set";
NSString *SMConstants_ITERATE = @"iterate";
NSString *SMConstants_NEXT = @"next";
NSString *SMConstants_HAS = @"has";
NSString *SMConstants_EQUALS = @"equals";
NSString *SMConstants_COMPARE_TO = @"compareTo";
NSString *SMConstants_TO_STRING = @"toString";
NSString *SMConstants_RAISE = @"raise";
NSString *SMConstants_CLASS_OBJECT = @"Object";
NSString *SMConstants_CLASS_FUNCTION = @"Function";
NSString *SMConstants_CLASS_STRING = @"String";
NSString *SMConstants_CLASS_NUMBER = @"Number";
NSString *SMConstants_CLASS_CLASS = @"Class";
NSString *SMConstants_CLASS_EXCEPTION = @"Exception";
NSString *SMConstants_GLOBALS_CLASS_NAME = @"Globals";
NSString *SMConstants_CLASS_GLOBALS = @"Globals";
NSString *SMConstants_PACKAGE_SIMI_API = @"net.globulus.simi.api";
NSString *SMConstants_API_CLASS_NAME = @"JavaApi";
NSString *SMConstants_EXCEPTION_SCANNER = @"ScannerException";
NSString *SMConstants_EXCEPTION_PARSER = @"ParserException";
NSString *SMConstants_EXCEPTION_INTERPRETER = @"InterpreterException";
NSString *SMConstants_EXCEPTION_NUMBER_FORMAT = @"NumberFormatException";
NSString *SMConstants_EXCEPTION_NIL_REFERENCE = @"NilReferenceException";
NSString *SMConstants_EXCEPTION_TYPE_MISMATCH = @"TypeMismatchException";

@implementation SMConstants

+ (NSString *)PRIVATE {
  return SMConstants_PRIVATE;
}

+ (NSString *)IMPLICIT {
  return SMConstants_IMPLICIT;
}

+ (NSString *)INIT {
  return SMConstants_INIT;
}

+ (NSString *)SELF {
  return SMConstants_SELF;
}

+ (NSString *)SELF_DEF {
  return SMConstants_SELF_DEF;
}

+ (NSString *)SUPER {
  return SMConstants_SUPER;
}

+ (NSString *)KEY {
  return SMConstants_KEY;
}

+ (NSString *)VALUE {
  return SMConstants_VALUE;
}

+ (NSString *)SET {
  return SMConstants_SET;
}

+ (NSString *)ITERATE {
  return SMConstants_ITERATE;
}

+ (NSString *)NEXT {
  return SMConstants_NEXT;
}

+ (NSString *)HAS {
  return SMConstants_HAS;
}

+ (NSString *)EQUALS {
  return SMConstants_EQUALS;
}

+ (NSString *)COMPARE_TO {
  return SMConstants_COMPARE_TO;
}

+ (NSString *)TO_STRING {
  return SMConstants_TO_STRING;
}

+ (NSString *)RAISE {
  return SMConstants_RAISE;
}

+ (NSString *)CLASS_OBJECT {
  return SMConstants_CLASS_OBJECT;
}

+ (NSString *)CLASS_FUNCTION {
  return SMConstants_CLASS_FUNCTION;
}

+ (NSString *)CLASS_STRING {
  return SMConstants_CLASS_STRING;
}

+ (NSString *)CLASS_NUMBER {
  return SMConstants_CLASS_NUMBER;
}

+ (NSString *)CLASS_CLASS {
  return SMConstants_CLASS_CLASS;
}

+ (NSString *)CLASS_EXCEPTION {
  return SMConstants_CLASS_EXCEPTION;
}

+ (NSString *)GLOBALS_CLASS_NAME {
  return SMConstants_GLOBALS_CLASS_NAME;
}

+ (NSString *)CLASS_GLOBALS {
  return SMConstants_CLASS_GLOBALS;
}

+ (NSString *)PACKAGE_SIMI_API {
  return SMConstants_PACKAGE_SIMI_API;
}

+ (NSString *)API_CLASS_NAME {
  return SMConstants_API_CLASS_NAME;
}

+ (NSString *)EXCEPTION_SCANNER {
  return SMConstants_EXCEPTION_SCANNER;
}

+ (NSString *)EXCEPTION_PARSER {
  return SMConstants_EXCEPTION_PARSER;
}

+ (NSString *)EXCEPTION_INTERPRETER {
  return SMConstants_EXCEPTION_INTERPRETER;
}

+ (NSString *)EXCEPTION_NUMBER_FORMAT {
  return SMConstants_EXCEPTION_NUMBER_FORMAT;
}

+ (NSString *)EXCEPTION_NIL_REFERENCE {
  return SMConstants_EXCEPTION_NIL_REFERENCE;
}

+ (NSString *)EXCEPTION_TYPE_MISMATCH {
  return SMConstants_EXCEPTION_TYPE_MISMATCH;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMConstants_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRIVATE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "IMPLICIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "INIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "SELF", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "SELF_DEF", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "SUPER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "KEY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "VALUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "SET", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "ITERATE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "NEXT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "HAS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "EQUALS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "COMPARE_TO", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "TO_STRING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "RAISE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "CLASS_OBJECT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "CLASS_FUNCTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "CLASS_STRING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "CLASS_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "CLASS_CLASS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "CLASS_EXCEPTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "GLOBALS_CLASS_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "CLASS_GLOBALS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "PACKAGE_SIMI_API", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "API_CLASS_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "EXCEPTION_SCANNER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "EXCEPTION_PARSER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "EXCEPTION_INTERPRETER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "EXCEPTION_NUMBER_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "EXCEPTION_NIL_REFERENCE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "EXCEPTION_TYPE_MISMATCH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { &SMConstants_PRIVATE, &SMConstants_IMPLICIT, &SMConstants_INIT, &SMConstants_SELF, &SMConstants_SELF_DEF, &SMConstants_SUPER, &SMConstants_KEY, &SMConstants_VALUE, &SMConstants_SET, &SMConstants_ITERATE, &SMConstants_NEXT, &SMConstants_HAS, &SMConstants_EQUALS, &SMConstants_COMPARE_TO, &SMConstants_TO_STRING, &SMConstants_RAISE, &SMConstants_CLASS_OBJECT, &SMConstants_CLASS_FUNCTION, &SMConstants_CLASS_STRING, &SMConstants_CLASS_NUMBER, &SMConstants_CLASS_CLASS, &SMConstants_CLASS_EXCEPTION, &SMConstants_GLOBALS_CLASS_NAME, &SMConstants_CLASS_GLOBALS, &SMConstants_PACKAGE_SIMI_API, &SMConstants_API_CLASS_NAME, &SMConstants_EXCEPTION_SCANNER, &SMConstants_EXCEPTION_PARSER, &SMConstants_EXCEPTION_INTERPRETER, &SMConstants_EXCEPTION_NUMBER_FORMAT, &SMConstants_EXCEPTION_NIL_REFERENCE, &SMConstants_EXCEPTION_TYPE_MISMATCH };
  static const J2ObjcClassInfo _SMConstants = { "Constants", "net.globulus.simi", ptrTable, methods, fields, 7, 0x10, 1, 32, -1, -1, -1, -1, -1 };
  return &_SMConstants;
}

@end

void SMConstants_init(SMConstants *self) {
  NSObject_init(self);
}

SMConstants *new_SMConstants_init() {
  J2OBJC_NEW_IMPL(SMConstants, init)
}

SMConstants *create_SMConstants_init() {
  J2OBJC_CREATE_IMPL(SMConstants, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMConstants)
