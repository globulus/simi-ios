//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/JavaNativeModulesManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLClassLoader.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "Constants.h"
#include "Interpreter.h"
#include "JavaNativeModulesManager.h"
#include "SimiApiClass.h"
#include "SimiObject.h"
#include "SimiProperty.h"

@interface SMJavaNativeModulesManager () {
 @public
  id<JavaUtilMap> classes_;
  id<JavaUtilMap> globals_;
}

- (NSString *)getApiClassNameWithNSString:(NSString *)path
                              withBoolean:(jboolean)useApiClassName;

@end

J2OBJC_FIELD_SETTER(SMJavaNativeModulesManager, classes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(SMJavaNativeModulesManager, globals_, id<JavaUtilMap>)

inline NSString *SMJavaNativeModulesManager_get_API_CLASS(void);
static NSString *SMJavaNativeModulesManager_API_CLASS = @"net.globulus.simi.api.JavaApi";
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMJavaNativeModulesManager, API_CLASS, NSString *)

__attribute__((unused)) static NSString *SMJavaNativeModulesManager_getApiClassNameWithNSString_withBoolean_(SMJavaNativeModulesManager *self, NSString *path, jboolean useApiClassName);

@implementation SMJavaNativeModulesManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMJavaNativeModulesManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)load__WithNSString:(NSString *)path
               withBoolean:(jboolean)useApiClassName {
  [self load__WithNSString:path withBoolean:useApiClassName withBoolean:useApiClassName];
}

- (void)load__WithNSString:(NSString *)path
               withBoolean:(jboolean)useApiClassName
               withBoolean:(jboolean)useCustomLoader {
  @try {
    id<SMSimiApiClass> apiClass;
    JavaLangClassLoader *loader;
    if (useCustomLoader) {
      JavaNetURL *url = new_JavaNetURL_initWithNSString_(path);
      loader = JavaNetURLClassLoader_newInstanceWithJavaNetURLArray_withJavaLangClassLoader_([IOSObjectArray newArrayWithObjects:(id[]){ url } count:1 type:JavaNetURL_class_()], [[self java_getClass] getClassLoader]);
      apiClass = (id<SMSimiApiClass>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_initialize_classLoader_(SMJavaNativeModulesManager_getApiClassNameWithNSString_withBoolean_(self, path, useApiClassName), true, loader))) newInstance], SMSimiApiClass_class_());
    }
    else {
      apiClass = (id<SMSimiApiClass>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(SMJavaNativeModulesManager_getApiClassNameWithNSString_withBoolean_(self, path, useApiClassName)))) newInstance], SMSimiApiClass_class_());
    }
    {
      IOSObjectArray *a__ = [((id<SMSimiApiClass>) nil_chk(apiClass)) classNames];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *className_ = *b__++;
        (void) [((id<JavaUtilMap>) nil_chk(classes_)) putWithId:className_ withId:apiClass];
      }
    }
    {
      IOSObjectArray *a__ = [apiClass globalMethodNames];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *globalMethodName = *b__++;
        (void) [((id<JavaUtilMap>) nil_chk(globals_)) putWithId:globalMethodName withId:apiClass];
      }
    }
  }
  @catch (JavaLangClassNotFoundException *e) {
    if (useApiClassName) {
      [self load__WithNSString:path withBoolean:false withBoolean:true];
    }
    else if (useCustomLoader) {
      [self load__WithNSString:path withBoolean:false withBoolean:false];
    }
    else {
      [e printStackTrace];
    }
  }
  @catch (JavaLangIllegalAccessException *e) {
    if (useApiClassName) {
      [self load__WithNSString:path withBoolean:false withBoolean:true];
    }
    else if (useCustomLoader) {
      [self load__WithNSString:path withBoolean:false withBoolean:false];
    }
    else {
      [e printStackTrace];
    }
  }
  @catch (JavaLangInstantiationException *e) {
    if (useApiClassName) {
      [self load__WithNSString:path withBoolean:false withBoolean:true];
    }
    else if (useCustomLoader) {
      [self load__WithNSString:path withBoolean:false withBoolean:false];
    }
    else {
      [e printStackTrace];
    }
  }
  @catch (JavaNetMalformedURLException *e) {
    [e printStackTrace];
  }
}

- (NSString *)getApiClassNameWithNSString:(NSString *)path
                              withBoolean:(jboolean)useApiClassName {
  return SMJavaNativeModulesManager_getApiClassNameWithNSString_withBoolean_(self, path, useApiClassName);
}

- (id<SMSimiProperty>)callWithNSString:(NSString *)className_
                          withNSString:(NSString *)methodName
                      withSMSimiObject:(id<SMSimiObject>)self_
                     withSMInterpreter:(SMInterpreter *)interpreter
                      withJavaUtilList:(id<JavaUtilList>)args {
  if ([((NSString *) nil_chk(className_)) isEqual:SMConstants_GLOBALS_CLASS_NAME]) {
    id<SMSimiApiClass> apiClass = [((id<JavaUtilMap>) nil_chk(globals_)) getWithId:methodName];
    if (apiClass != nil) {
      return [apiClass callWithNSString:className_ withNSString:methodName withSMSimiObject:self_ withSMBlockInterpreter:interpreter withJavaUtilList:args];
    }
  }
  else {
    id<SMSimiApiClass> apiClass = [((id<JavaUtilMap>) nil_chk(classes_)) getWithId:className_];
    if (apiClass != nil) {
      return [apiClass callWithNSString:className_ withNSString:methodName withSMSimiObject:self_ withSMBlockInterpreter:interpreter withJavaUtilList:args];
    }
  }
  @throw new_JavaLangIllegalArgumentException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 1, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 4, 5, 6, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(load__WithNSString:withBoolean:);
  methods[2].selector = @selector(load__WithNSString:withBoolean:withBoolean:);
  methods[3].selector = @selector(getApiClassNameWithNSString:withBoolean:);
  methods[4].selector = @selector(callWithNSString:withNSString:withSMSimiObject:withSMInterpreter:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "API_CLASS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "classes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
    { "globals_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "load", "LNSString;Z", "LNSString;ZZ", "getApiClassName", "call", "LNSString;LNSString;LSMSimiObject;LSMInterpreter;LJavaUtilList;", "LJavaLangIllegalArgumentException;", "(Ljava/lang/String;Ljava/lang/String;LSimiObject;LInterpreter;Ljava/util/List<LSimiProperty;>;)LSimiProperty;", &SMJavaNativeModulesManager_API_CLASS, "Ljava/util/Map<Ljava/lang/String;LSimiApiClass;>;" };
  static const J2ObjcClassInfo _SMJavaNativeModulesManager = { "JavaNativeModulesManager", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 5, 3, -1, -1, -1, -1, -1 };
  return &_SMJavaNativeModulesManager;
}

@end

void SMJavaNativeModulesManager_init(SMJavaNativeModulesManager *self) {
  NSObject_init(self);
  self->classes_ = new_JavaUtilHashMap_init();
  self->globals_ = new_JavaUtilHashMap_init();
}

SMJavaNativeModulesManager *new_SMJavaNativeModulesManager_init() {
  J2OBJC_NEW_IMPL(SMJavaNativeModulesManager, init)
}

SMJavaNativeModulesManager *create_SMJavaNativeModulesManager_init() {
  J2OBJC_CREATE_IMPL(SMJavaNativeModulesManager, init)
}

NSString *SMJavaNativeModulesManager_getApiClassNameWithNSString_withBoolean_(SMJavaNativeModulesManager *self, NSString *path, jboolean useApiClassName) {
  if (useApiClassName) {
    return SMJavaNativeModulesManager_API_CLASS;
  }
  NSString *fileName = [((NSString *) nil_chk(path)) java_substring:[path java_lastIndexOf:'/'] + 1];
  fileName = [((NSString *) nil_chk(fileName)) java_substring:0 endIndex:[fileName java_indexOf:'.']];
  return JreStrcat("$C$", SMConstants_PACKAGE_SIMI_API, '.', [((NSString *) nil_chk(fileName)) java_replace:'-' withChar:'_']);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMJavaNativeModulesManager)
