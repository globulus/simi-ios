//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Expr.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "java/util/function/Function.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"
#include "BlockImpl.h"
#include "Codifiable.h"
#include "Expr.h"
#include "Native.h"
#include "Parser.h"
#include "Pass.h"
#include "SimiValue.h"
#include "Stmt.h"
#include "Token.h"
#include "TokenType.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface SMExpr_Visitor : NSObject

@end

@interface SMExpr_Block () {
 @public
  id<JavaUtilList> processedStatements_;
}

- (id<JavaUtilList>)processStatements;

@end

J2OBJC_FIELD_SETTER(SMExpr_Block, processedStatements_, id<JavaUtilList>)

__attribute__((unused)) static id<JavaUtilList> SMExpr_Block_processStatements(SMExpr_Block *self);

@interface SMExpr_Block_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(SMExpr *)a;

@end

J2OBJC_STATIC_INIT(SMExpr_Block_$Lambda$1)

inline SMExpr_Block_$Lambda$1 *SMExpr_Block_$Lambda$1_get_instance(void);
static SMExpr_Block_$Lambda$1 *SMExpr_Block_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMExpr_Block_$Lambda$1, instance, SMExpr_Block_$Lambda$1 *)

__attribute__((unused)) static void SMExpr_Block_$Lambda$1_init(SMExpr_Block_$Lambda$1 *self);

__attribute__((unused)) static SMExpr_Block_$Lambda$1 *new_SMExpr_Block_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMExpr_Block_$Lambda$1 *create_SMExpr_Block_$Lambda$1_init(void);

@interface SMExpr_Block_$Lambda$2 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMStmt *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(SMExpr_Block_$Lambda$2)

__attribute__((unused)) static void SMExpr_Block_$Lambda$2_initWithInt_(SMExpr_Block_$Lambda$2 *self, jint capture$0);

__attribute__((unused)) static SMExpr_Block_$Lambda$2 *new_SMExpr_Block_$Lambda$2_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMExpr_Block_$Lambda$2 *create_SMExpr_Block_$Lambda$2_initWithInt_(jint capture$0);

@interface SMExpr_Annotations_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(SMToken *)t;

@end

J2OBJC_STATIC_INIT(SMExpr_Annotations_$Lambda$1)

inline SMExpr_Annotations_$Lambda$1 *SMExpr_Annotations_$Lambda$1_get_instance(void);
static SMExpr_Annotations_$Lambda$1 *SMExpr_Annotations_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMExpr_Annotations_$Lambda$1, instance, SMExpr_Annotations_$Lambda$1 *)

__attribute__((unused)) static void SMExpr_Annotations_$Lambda$1_init(SMExpr_Annotations_$Lambda$1 *self);

__attribute__((unused)) static SMExpr_Annotations_$Lambda$1 *new_SMExpr_Annotations_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMExpr_Annotations_$Lambda$1 *create_SMExpr_Annotations_$Lambda$1_init(void);

@interface SMExpr_Assign_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMStmt_Annotation *)a;

@end

J2OBJC_EMPTY_STATIC_INIT(SMExpr_Assign_$Lambda$1)

__attribute__((unused)) static void SMExpr_Assign_$Lambda$1_initWithInt_(SMExpr_Assign_$Lambda$1 *self, jint capture$0);

__attribute__((unused)) static SMExpr_Assign_$Lambda$1 *new_SMExpr_Assign_$Lambda$1_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMExpr_Assign_$Lambda$1 *create_SMExpr_Assign_$Lambda$1_initWithInt_(jint capture$0);

@interface SMExpr_ObjectDecomp_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(SMExpr_Assign *)a;

@end

J2OBJC_STATIC_INIT(SMExpr_ObjectDecomp_$Lambda$1)

inline SMExpr_ObjectDecomp_$Lambda$1 *SMExpr_ObjectDecomp_$Lambda$1_get_instance(void);
static SMExpr_ObjectDecomp_$Lambda$1 *SMExpr_ObjectDecomp_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMExpr_ObjectDecomp_$Lambda$1, instance, SMExpr_ObjectDecomp_$Lambda$1 *)

__attribute__((unused)) static void SMExpr_ObjectDecomp_$Lambda$1_init(SMExpr_ObjectDecomp_$Lambda$1 *self);

__attribute__((unused)) static SMExpr_ObjectDecomp_$Lambda$1 *new_SMExpr_ObjectDecomp_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMExpr_ObjectDecomp_$Lambda$1 *create_SMExpr_ObjectDecomp_$Lambda$1_init(void);

@interface SMExpr_Call_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(SMExpr *)a;

@end

J2OBJC_STATIC_INIT(SMExpr_Call_$Lambda$1)

inline SMExpr_Call_$Lambda$1 *SMExpr_Call_$Lambda$1_get_instance(void);
static SMExpr_Call_$Lambda$1 *SMExpr_Call_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMExpr_Call_$Lambda$1, instance, SMExpr_Call_$Lambda$1 *)

__attribute__((unused)) static void SMExpr_Call_$Lambda$1_init(SMExpr_Call_$Lambda$1 *self);

__attribute__((unused)) static SMExpr_Call_$Lambda$1 *new_SMExpr_Call_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMExpr_Call_$Lambda$1 *create_SMExpr_Call_$Lambda$1_init(void);

@interface SMExpr_ObjectLiteral_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  jboolean val$needsNewline_;
  jint val$indentationLevel_;
}

- (id)applyWithId:(SMExpr *)p;

@end

J2OBJC_EMPTY_STATIC_INIT(SMExpr_ObjectLiteral_$Lambda$1)

__attribute__((unused)) static void SMExpr_ObjectLiteral_$Lambda$1_initWithBoolean_withInt_(SMExpr_ObjectLiteral_$Lambda$1 *self, jboolean capture$0, jint capture$1);

__attribute__((unused)) static SMExpr_ObjectLiteral_$Lambda$1 *new_SMExpr_ObjectLiteral_$Lambda$1_initWithBoolean_withInt_(jboolean capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMExpr_ObjectLiteral_$Lambda$1 *create_SMExpr_ObjectLiteral_$Lambda$1_initWithBoolean_withInt_(jboolean capture$0, jint capture$1);

@implementation SMExpr

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMExpr_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x480, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "LSMExpr_Visitor;LSMExpr_Block;LSMExpr_Annotations;LSMExpr_Assign;LSMExpr_ObjectDecomp;LSMExpr_Binary;LSMExpr_Call;LSMExpr_Get;LSMExpr_Grouping;LSMExpr_Gu;LSMExpr_Ivic;LSMExpr_Literal;LSMExpr_Logical;LSMExpr_Set;LSMExpr_Super;LSMExpr_Self;LSMExpr_Unary;LSMExpr_Variable;LSMExpr_ObjectLiteral;LSMExpr_Yield;" };
  static const J2ObjcClassInfo _SMExpr = { "Expr", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x400, 2, 0, -1, 3, -1, -1, -1 };
  return &_SMExpr;
}

@end

void SMExpr_init(SMExpr *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr)

@implementation SMExpr_Visitor

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x401, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x401, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x401, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x401, 12, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x401, 15, 16, -1, 17, -1, -1 },
    { NULL, "LNSObject;", 0x401, 18, 19, -1, 20, -1, -1 },
    { NULL, "LNSObject;", 0x401, 21, 22, -1, 23, -1, -1 },
    { NULL, "LNSObject;", 0x401, 24, 25, -1, 26, -1, -1 },
    { NULL, "LNSObject;", 0x401, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSObject;", 0x401, 30, 31, -1, 32, -1, -1 },
    { NULL, "LNSObject;", 0x401, 33, 34, -1, 35, -1, -1 },
    { NULL, "LNSObject;", 0x401, 36, 37, -1, 38, -1, -1 },
    { NULL, "LNSObject;", 0x401, 39, 40, -1, 41, -1, -1 },
    { NULL, "LNSObject;", 0x401, 42, 43, -1, 44, -1, -1 },
    { NULL, "LNSObject;", 0x401, 45, 46, -1, 47, -1, -1 },
    { NULL, "LNSObject;", 0x401, 48, 49, -1, 50, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(visitAnnotationsExprWithSMExpr_Annotations:);
  methods[1].selector = @selector(visitAssignExprWithSMExpr_Assign:);
  methods[2].selector = @selector(visitBinaryExprWithSMExpr_Binary:);
  methods[3].selector = @selector(visitBlockExprWithSMExpr_Block:withBoolean:withBoolean:);
  methods[4].selector = @selector(visitCallExprWithSMExpr_Call:);
  methods[5].selector = @selector(visitGetExprWithSMExpr_Get:);
  methods[6].selector = @selector(visitGroupingExprWithSMExpr_Grouping:);
  methods[7].selector = @selector(visitGuExprWithSMExpr_Gu:);
  methods[8].selector = @selector(visitIvicExprWithSMExpr_Ivic:);
  methods[9].selector = @selector(visitLiteralExprWithSMExpr_Literal:);
  methods[10].selector = @selector(visitLogicalExprWithSMExpr_Logical:);
  methods[11].selector = @selector(visitSetExprWithSMExpr_Set:);
  methods[12].selector = @selector(visitSuperExprWithSMExpr_Super:);
  methods[13].selector = @selector(visitSelfExprWithSMExpr_Self:);
  methods[14].selector = @selector(visitUnaryExprWithSMExpr_Unary:);
  methods[15].selector = @selector(visitVariableExprWithSMExpr_Variable:);
  methods[16].selector = @selector(visitObjectLiteralExprWithSMExpr_ObjectLiteral:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "visitAnnotationsExpr", "LSMExpr_Annotations;", "(LExpr$Annotations;)TR;", "visitAssignExpr", "LSMExpr_Assign;", "(LExpr$Assign;)TR;", "visitBinaryExpr", "LSMExpr_Binary;", "(LExpr$Binary;)TR;", "visitBlockExpr", "LSMExpr_Block;ZZ", "(LExpr$Block;ZZ)TR;", "visitCallExpr", "LSMExpr_Call;", "(LExpr$Call;)TR;", "visitGetExpr", "LSMExpr_Get;", "(LExpr$Get;)TR;", "visitGroupingExpr", "LSMExpr_Grouping;", "(LExpr$Grouping;)TR;", "visitGuExpr", "LSMExpr_Gu;", "(LExpr$Gu;)TR;", "visitIvicExpr", "LSMExpr_Ivic;", "(LExpr$Ivic;)TR;", "visitLiteralExpr", "LSMExpr_Literal;", "(LExpr$Literal;)TR;", "visitLogicalExpr", "LSMExpr_Logical;", "(LExpr$Logical;)TR;", "visitSetExpr", "LSMExpr_Set;", "(LExpr$Set;)TR;", "visitSuperExpr", "LSMExpr_Super;", "(LExpr$Super;)TR;", "visitSelfExpr", "LSMExpr_Self;", "(LExpr$Self;)TR;", "visitUnaryExpr", "LSMExpr_Unary;", "(LExpr$Unary;)TR;", "visitVariableExpr", "LSMExpr_Variable;", "(LExpr$Variable;)TR;", "visitObjectLiteralExpr", "LSMExpr_ObjectLiteral;", "(LExpr$ObjectLiteral;)TR;", "LSMExpr;", "<R:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _SMExpr_Visitor = { "Visitor", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x608, 17, 0, 51, -1, -1, 52, -1 };
  return &_SMExpr_Visitor;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(SMExpr_Visitor)

@implementation SMExpr_Block

- (instancetype __nonnull)initWithSMToken:(SMToken *)declaration
                         withJavaUtilList:(id<JavaUtilList>)params
                         withJavaUtilList:(id<JavaUtilList>)statements
                              withBoolean:(jboolean)canReturn {
  SMExpr_Block_initWithSMToken_withJavaUtilList_withJavaUtilList_withBoolean_(self, declaration, params, statements, canReturn);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  jboolean newScope = (((IOSObjectArray *) nil_chk(params))->size_ < 1) ? true : [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(params, 0), [JavaLangBoolean class]))) booleanValue];
  jboolean execute = (params->size_ < 2) ? true : [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(params, 1), [JavaLangBoolean class]))) booleanValue];
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitBlockExprWithSMExpr_Block:self withBoolean:newScope withBoolean:execute];
}

- (id<JavaUtilList>)getStatements {
  return processedStatements_;
}

- (void)yieldWithInt:(jint)index {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Trying to yield a Expr.Block!");
}

- (jboolean)canReturn {
  return canReturn_;
}

- (jboolean)isEmpty {
  if ([((id<JavaUtilList>) nil_chk(statements_)) size] != 1) {
    return false;
  }
  SMStmt *stmt = [statements_ getWithInt:0];
  if (!([stmt isKindOfClass:[SMStmt_Expression class]])) {
    return false;
  }
  SMStmt_Expression *expr = (SMStmt_Expression *) cast_chk(stmt, [SMStmt_Expression class]);
  if (!([((SMStmt_Expression *) nil_chk(expr))->expression_ isKindOfClass:[SMExpr_Literal class]])) {
    return false;
  }
  return [((SMExpr_Literal *) nil_chk(((SMExpr_Literal *) cast_chk(expr->expression_, [SMExpr_Literal class]))))->value_ isKindOfClass:[SMPass class]];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst
               withNSString:(NSString *)name {
  NSString *opener;
  if (((SMToken *) nil_chk(declaration_))->type_ == JreLoadEnum(SMTokenType, DEF)) {
    opener = JreStrcat("$C", [((SMTokenType *) nil_chk(declaration_->type_)) toCode], ' ');
  }
  else {
    opener = @"";
  }
  if (name != nil) {
    (void) JreStrAppendStrong(&opener, "$", name);
  }
  jboolean needsParenthesis = ![opener java_isEmpty] || name != nil;
  JavaLangStringBuilder *paramsBuilder = new_JavaLangStringBuilder_init();
  if (needsParenthesis) {
    (void) [paramsBuilder appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, LEFT_PAREN))) toCode]];
  }
  (void) [paramsBuilder appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(params_)) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMExpr_Block_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_(JreStrcat("$C", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, COMMA))) toCode], ' '))]];
  if (needsParenthesis) {
    (void) [paramsBuilder appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_PAREN))) toCode]];
  }
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(ignoreFirst ? @"" : SMCodifiable_getIndentationWithInt_(indentationLevel)) appendWithNSString:opener])) appendWithNSString:[paramsBuilder description]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, COLON))) toCode]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode]])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(statements_)) stream])) mapWithJavaUtilFunctionFunction:new_SMExpr_Block_$Lambda$2_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joining()]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, END))) toCodeWithInt:indentationLevel withBoolean:false]])) appendWithNSString:[JreLoadEnum(SMTokenType, NEWLINE) toCode]])) description];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [self toCodeWithInt:indentationLevel withBoolean:ignoreFirst withNSString:nil];
}

- (id<JavaUtilList>)processStatements {
  return SMExpr_Block_processStatements(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withJavaUtilList:withJavaUtilList:withBoolean:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(getStatements);
  methods[3].selector = @selector(yieldWithInt:);
  methods[4].selector = @selector(canReturn);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(toCodeWithInt:withBoolean:withNSString:);
  methods[7].selector = @selector(toCodeWithInt:withBoolean:);
  methods[8].selector = @selector(processStatements);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "declaration_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "params_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "statements_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "canReturn_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "isNative_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "processedStatements_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LJavaUtilList;LJavaUtilList;Z", "(LToken;Ljava/util/List<LExpr;>;Ljava/util/List<LStmt;>;Z)V", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "()Ljava/util/List<+LSimiStatement;>;", "yield", "I", "toCode", "IZLNSString;", "IZ", "()Ljava/util/List<LStmt;>;", "Ljava/util/List<LExpr;>;", "Ljava/util/List<LStmt;>;", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Block = { "Block", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 9, 6, 14, -1, -1, -1, -1 };
  return &_SMExpr_Block;
}

@end

void SMExpr_Block_initWithSMToken_withJavaUtilList_withJavaUtilList_withBoolean_(SMExpr_Block *self, SMToken *declaration, id<JavaUtilList> params, id<JavaUtilList> statements, jboolean canReturn) {
  SMExpr_init(self);
  self->declaration_ = declaration;
  self->params_ = params;
  self->statements_ = statements;
  self->canReturn_ = canReturn;
  self->isNative_ = ([((id<JavaUtilList>) nil_chk(statements)) size] == 1 && [[statements getWithInt:0] isKindOfClass:[SMStmt_Expression class]] && [((SMStmt_Expression *) nil_chk(((SMStmt_Expression *) cast_chk([statements getWithInt:0], [SMStmt_Expression class]))))->expression_ isKindOfClass:[SMExpr_Literal class]] && [((SMExpr_Literal *) nil_chk(((SMExpr_Literal *) cast_chk(((SMStmt_Expression *) nil_chk(((SMStmt_Expression *) cast_chk([statements getWithInt:0], [SMStmt_Expression class]))))->expression_, [SMExpr_Literal class]))))->value_ isKindOfClass:[SMNative class]]);
  self->processedStatements_ = SMExpr_Block_processStatements(self);
}

SMExpr_Block *new_SMExpr_Block_initWithSMToken_withJavaUtilList_withJavaUtilList_withBoolean_(SMToken *declaration, id<JavaUtilList> params, id<JavaUtilList> statements, jboolean canReturn) {
  J2OBJC_NEW_IMPL(SMExpr_Block, initWithSMToken_withJavaUtilList_withJavaUtilList_withBoolean_, declaration, params, statements, canReturn)
}

SMExpr_Block *create_SMExpr_Block_initWithSMToken_withJavaUtilList_withJavaUtilList_withBoolean_(SMToken *declaration, id<JavaUtilList> params, id<JavaUtilList> statements, jboolean canReturn) {
  J2OBJC_CREATE_IMPL(SMExpr_Block, initWithSMToken_withJavaUtilList_withJavaUtilList_withBoolean_, declaration, params, statements, canReturn)
}

id<JavaUtilList> SMExpr_Block_processStatements(SMExpr_Block *self) {
  id<JavaUtilList> localStatements = new_JavaUtilArrayList_init();
  jint size = [((id<JavaUtilList>) nil_chk(self->statements_)) size];
  for (jint i = 0; i < size; i++) {
    SMStmt *stmt = [self->statements_ getWithInt:i];
    if ([stmt isKindOfClass:[SMStmt_Expression class]] && [((SMStmt_Expression *) nil_chk(((SMStmt_Expression *) cast_chk(stmt, [SMStmt_Expression class]))))->expression_ isKindOfClass:[SMExpr_Yield class]]) {
      SMExpr_Yield *expr = (SMExpr_Yield *) cast_chk(((SMStmt_Expression *) nil_chk(((SMStmt_Expression *) cast_chk(stmt, [SMStmt_Expression class]))))->expression_, [SMExpr_Yield class]);
      SMExpr_Variable *response = new_SMExpr_Variable_initWithSMToken_(SMToken_namedWithNSString_(JreStrcat("$JCJ", @"response_", JavaLangSystem_currentTimeMillis(), '_', JavaLangMath_absWithLong_([new_JavaUtilRandom_init() nextLong]))));
      SMStmt *assignment = new_SMStmt_Expression_initWithSMExpr_(SMParser_getAssignExprWithSMParser_withSMExpr_withSMToken_withSMExpr_(nil, ((SMExpr_Yield *) nil_chk(expr))->var_, expr->assign_, response));
      id<JavaUtilList> otherStmts = new_JavaUtilArrayList_initWithInt_(size - i + 1);
      [otherStmts addWithId:assignment];
      [otherStmts addAllWithJavaUtilCollection:[self->statements_ subListWithInt:i + 1 withInt:size]];
      SMExpr_Call *call = new_SMExpr_Call_initWithSMExpr_withSMToken_withJavaUtilList_(((SMExpr_Call *) nil_chk(expr->value_))->callee_, expr->value_->paren_, new_JavaUtilArrayList_initWithJavaUtilCollection_(expr->value_->arguments_));
      [((id<JavaUtilList>) nil_chk(call->arguments_)) addWithId:new_SMExpr_Block_initWithSMToken_withJavaUtilList_withJavaUtilList_withBoolean_(new_SMToken_initWithSMTokenType_withNSString_withSMSimiValue_withInt_(JreLoadEnum(SMTokenType, DEF), nil, nil, ((SMToken *) nil_chk(expr->assign_))->line_), JavaUtilCollections_singletonListWithId_(response), otherStmts, true)];
      [localStatements addWithId:new_SMStmt_Expression_initWithSMExpr_(call)];
      break;
    }
    else {
      [localStatements addWithId:stmt];
    }
  }
  return localStatements;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Block)

J2OBJC_INITIALIZED_DEFN(SMExpr_Block_$Lambda$1)

@implementation SMExpr_Block_$Lambda$1

- (id)applyWithId:(SMExpr *)a {
  return SMBlockImpl_getParamLexemeWithSMExpr_(a);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMExpr_Block_$Lambda$1 class]) {
    SMExpr_Block_$Lambda$1_instance = new_SMExpr_Block_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMExpr_Block_$Lambda$1)
  }
}

@end

void SMExpr_Block_$Lambda$1_init(SMExpr_Block_$Lambda$1 *self) {
  NSObject_init(self);
}

SMExpr_Block_$Lambda$1 *new_SMExpr_Block_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMExpr_Block_$Lambda$1, init)
}

SMExpr_Block_$Lambda$1 *create_SMExpr_Block_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMExpr_Block_$Lambda$1, init)
}

@implementation SMExpr_Block_$Lambda$2

- (id)applyWithId:(SMStmt *)s {
  return [((SMStmt *) nil_chk(s)) toCodeWithInt:val$indentationLevel_ + 1 withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMExpr_Block_$Lambda$2_initWithInt_(SMExpr_Block_$Lambda$2 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMExpr_Block_$Lambda$2 *new_SMExpr_Block_$Lambda$2_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMExpr_Block_$Lambda$2, initWithInt_, capture$0)
}

SMExpr_Block_$Lambda$2 *create_SMExpr_Block_$Lambda$2_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMExpr_Block_$Lambda$2, initWithInt_, capture$0)
}

@implementation SMExpr_Annotations

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)tokens {
  SMExpr_Annotations_initWithJavaUtilList_(self, tokens);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitAnnotationsExprWithSMExpr_Annotations:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, BANG_BANG))) toCodeWithInt:indentationLevel withBoolean:ignoreFirst], [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(tokens_)) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMExpr_Annotations_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, DOT))) toCode])]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tokens_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<LToken;>;)V", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "Ljava/util/List<LToken;>;", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Annotations = { "Annotations", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 1, 8, -1, -1, -1, -1 };
  return &_SMExpr_Annotations;
}

@end

void SMExpr_Annotations_initWithJavaUtilList_(SMExpr_Annotations *self, id<JavaUtilList> tokens) {
  SMExpr_init(self);
  self->tokens_ = tokens;
}

SMExpr_Annotations *new_SMExpr_Annotations_initWithJavaUtilList_(id<JavaUtilList> tokens) {
  J2OBJC_NEW_IMPL(SMExpr_Annotations, initWithJavaUtilList_, tokens)
}

SMExpr_Annotations *create_SMExpr_Annotations_initWithJavaUtilList_(id<JavaUtilList> tokens) {
  J2OBJC_CREATE_IMPL(SMExpr_Annotations, initWithJavaUtilList_, tokens)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Annotations)

J2OBJC_INITIALIZED_DEFN(SMExpr_Annotations_$Lambda$1)

@implementation SMExpr_Annotations_$Lambda$1

- (id)applyWithId:(SMToken *)t {
  return ((SMToken *) nil_chk(t))->lexeme_;
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMExpr_Annotations_$Lambda$1 class]) {
    SMExpr_Annotations_$Lambda$1_instance = new_SMExpr_Annotations_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMExpr_Annotations_$Lambda$1)
  }
}

@end

void SMExpr_Annotations_$Lambda$1_init(SMExpr_Annotations_$Lambda$1 *self) {
  NSObject_init(self);
}

SMExpr_Annotations_$Lambda$1 *new_SMExpr_Annotations_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMExpr_Annotations_$Lambda$1, init)
}

SMExpr_Annotations_$Lambda$1 *create_SMExpr_Annotations_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMExpr_Annotations_$Lambda$1, init)
}

@implementation SMExpr_Assign

- (instancetype __nonnull)initWithSMToken:(SMToken *)name
                               withSMExpr:(SMExpr *)value
                         withJavaUtilList:(id<JavaUtilList>)annotations {
  SMExpr_Assign_initWithSMToken_withSMExpr_withJavaUtilList_(self, name, value, annotations);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitAssignExprWithSMExpr_Assign:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_init() appendWithNSString:annotations_ != nil ? [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([annotations_ stream])) mapWithJavaUtilFunctionFunction:new_SMExpr_Assign_$Lambda$1_initWithInt_(indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode])] : @""])) appendWithNSString:SMCodifiable_getIndentationWithInt_(indentationLevel)])) appendWithNSString:((SMToken *) nil_chk(name_))->lexeme_])) appendWithNSString:@" "])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, EQUAL))) toCode]])) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(value_)) toCodeWithInt:0 withBoolean:false]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr:withJavaUtilList:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "annotations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr;LJavaUtilList;", "(LToken;LExpr;Ljava/util/List<LStmt$Annotation;>;)V", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "Ljava/util/List<LStmt$Annotation;>;", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Assign = { "Assign", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 3, 8, -1, -1, -1, -1 };
  return &_SMExpr_Assign;
}

@end

void SMExpr_Assign_initWithSMToken_withSMExpr_withJavaUtilList_(SMExpr_Assign *self, SMToken *name, SMExpr *value, id<JavaUtilList> annotations) {
  SMExpr_init(self);
  self->name_ = name;
  self->value_ = value;
  self->annotations_ = annotations;
}

SMExpr_Assign *new_SMExpr_Assign_initWithSMToken_withSMExpr_withJavaUtilList_(SMToken *name, SMExpr *value, id<JavaUtilList> annotations) {
  J2OBJC_NEW_IMPL(SMExpr_Assign, initWithSMToken_withSMExpr_withJavaUtilList_, name, value, annotations)
}

SMExpr_Assign *create_SMExpr_Assign_initWithSMToken_withSMExpr_withJavaUtilList_(SMToken *name, SMExpr *value, id<JavaUtilList> annotations) {
  J2OBJC_CREATE_IMPL(SMExpr_Assign, initWithSMToken_withSMExpr_withJavaUtilList_, name, value, annotations)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Assign)

@implementation SMExpr_Assign_$Lambda$1

- (id)applyWithId:(SMStmt_Annotation *)a {
  return [((SMStmt_Annotation *) nil_chk(a)) toCodeWithInt:val$indentationLevel_ withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMExpr_Assign_$Lambda$1_initWithInt_(SMExpr_Assign_$Lambda$1 *self, jint capture$0) {
  self->val$indentationLevel_ = capture$0;
  NSObject_init(self);
}

SMExpr_Assign_$Lambda$1 *new_SMExpr_Assign_$Lambda$1_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(SMExpr_Assign_$Lambda$1, initWithInt_, capture$0)
}

SMExpr_Assign_$Lambda$1 *create_SMExpr_Assign_$Lambda$1_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(SMExpr_Assign_$Lambda$1, initWithInt_, capture$0)
}

@implementation SMExpr_ObjectDecomp

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)assigns {
  SMExpr_ObjectDecomp_initWithJavaUtilList_(self, assigns);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  id value = nil;
  for (SMExpr_Assign * __strong assign in nil_chk(assigns_)) {
    value = [((id<SMExpr_Visitor>) nil_chk(visitor)) visitAssignExprWithSMExpr_Assign:assign];
  }
  return value;
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, LEFT_BRACKET))) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(assigns_)) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMExpr_ObjectDecomp_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_(JreStrcat("$C", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, COMMA))) toCode], ' '))]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_BRACKET))) toCode]])) appendWithNSString:@" "])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, EQUAL))) toCode]])) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(((SMExpr_Get *) nil_chk(((SMExpr_Get *) cast_chk(((SMExpr_Binary *) nil_chk(((SMExpr_Binary *) cast_chk(((SMExpr_Assign *) nil_chk([assigns_ getWithInt:0]))->value_, [SMExpr_Binary class]))))->left_, [SMExpr_Get class]))))->object_)) toCodeWithInt:0 withBoolean:false]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "assigns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<LExpr$Assign;>;)V", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "Ljava/util/List<LExpr$Assign;>;", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_ObjectDecomp = { "ObjectDecomp", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 1, 8, -1, -1, -1, -1 };
  return &_SMExpr_ObjectDecomp;
}

@end

void SMExpr_ObjectDecomp_initWithJavaUtilList_(SMExpr_ObjectDecomp *self, id<JavaUtilList> assigns) {
  SMExpr_init(self);
  self->assigns_ = assigns;
}

SMExpr_ObjectDecomp *new_SMExpr_ObjectDecomp_initWithJavaUtilList_(id<JavaUtilList> assigns) {
  J2OBJC_NEW_IMPL(SMExpr_ObjectDecomp, initWithJavaUtilList_, assigns)
}

SMExpr_ObjectDecomp *create_SMExpr_ObjectDecomp_initWithJavaUtilList_(id<JavaUtilList> assigns) {
  J2OBJC_CREATE_IMPL(SMExpr_ObjectDecomp, initWithJavaUtilList_, assigns)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_ObjectDecomp)

J2OBJC_INITIALIZED_DEFN(SMExpr_ObjectDecomp_$Lambda$1)

@implementation SMExpr_ObjectDecomp_$Lambda$1

- (id)applyWithId:(SMExpr_Assign *)a {
  return ((SMToken *) nil_chk(((SMExpr_Assign *) nil_chk(a))->name_))->lexeme_;
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMExpr_ObjectDecomp_$Lambda$1 class]) {
    SMExpr_ObjectDecomp_$Lambda$1_instance = new_SMExpr_ObjectDecomp_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMExpr_ObjectDecomp_$Lambda$1)
  }
}

@end

void SMExpr_ObjectDecomp_$Lambda$1_init(SMExpr_ObjectDecomp_$Lambda$1 *self) {
  NSObject_init(self);
}

SMExpr_ObjectDecomp_$Lambda$1 *new_SMExpr_ObjectDecomp_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMExpr_ObjectDecomp_$Lambda$1, init)
}

SMExpr_ObjectDecomp_$Lambda$1 *create_SMExpr_ObjectDecomp_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMExpr_ObjectDecomp_$Lambda$1, init)
}

@implementation SMExpr_Binary

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)left
                             withSMToken:(SMToken *)operator_
                              withSMExpr:(SMExpr *)right {
  SMExpr_Binary_initWithSMExpr_withSMToken_withSMExpr_(self, left, operator_, right);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitBinaryExprWithSMExpr_Binary:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$C$", [((SMExpr *) nil_chk(left_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst], ' ', [((SMTokenType *) nil_chk(((SMToken *) nil_chk(operator__))->type_)) toCode], ' ', [((SMExpr *) nil_chk(right_)) toCodeWithInt:0 withBoolean:false]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:withSMToken:withSMExpr:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "left_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "operator__", "LSMToken;", .constantValue.asLong = 0, 0x10, 6, -1, -1, -1 },
    { "right_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;LSMToken;LSMExpr;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "operator", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Binary = { "Binary", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 3, 7, -1, -1, -1, -1 };
  return &_SMExpr_Binary;
}

@end

void SMExpr_Binary_initWithSMExpr_withSMToken_withSMExpr_(SMExpr_Binary *self, SMExpr *left, SMToken *operator_, SMExpr *right) {
  SMExpr_init(self);
  self->left_ = left;
  self->operator__ = operator_;
  self->right_ = right;
}

SMExpr_Binary *new_SMExpr_Binary_initWithSMExpr_withSMToken_withSMExpr_(SMExpr *left, SMToken *operator_, SMExpr *right) {
  J2OBJC_NEW_IMPL(SMExpr_Binary, initWithSMExpr_withSMToken_withSMExpr_, left, operator_, right)
}

SMExpr_Binary *create_SMExpr_Binary_initWithSMExpr_withSMToken_withSMExpr_(SMExpr *left, SMToken *operator_, SMExpr *right) {
  J2OBJC_CREATE_IMPL(SMExpr_Binary, initWithSMExpr_withSMToken_withSMExpr_, left, operator_, right)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Binary)

@implementation SMExpr_Call

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)callee
                             withSMToken:(SMToken *)paren
                        withJavaUtilList:(id<JavaUtilList>)arguments {
  SMExpr_Call_initWithSMExpr_withSMToken_withJavaUtilList_(self, callee, paren, arguments);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitCallExprWithSMExpr_Call:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMExpr *) nil_chk(callee_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, LEFT_PAREN))) toCode]])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(arguments_)) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SMExpr_Call_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_(JreStrcat("$C", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, COMMA))) toCode], ' '))]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_PAREN))) toCode]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:withSMToken:withJavaUtilList:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callee_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "paren_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "arguments_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;LSMToken;LJavaUtilList;", "(LExpr;LToken;Ljava/util/List<LExpr;>;)V", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "Ljava/util/List<LExpr;>;", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Call = { "Call", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 3, 8, -1, -1, -1, -1 };
  return &_SMExpr_Call;
}

@end

void SMExpr_Call_initWithSMExpr_withSMToken_withJavaUtilList_(SMExpr_Call *self, SMExpr *callee, SMToken *paren, id<JavaUtilList> arguments) {
  SMExpr_init(self);
  self->callee_ = callee;
  self->paren_ = paren;
  self->arguments_ = arguments;
}

SMExpr_Call *new_SMExpr_Call_initWithSMExpr_withSMToken_withJavaUtilList_(SMExpr *callee, SMToken *paren, id<JavaUtilList> arguments) {
  J2OBJC_NEW_IMPL(SMExpr_Call, initWithSMExpr_withSMToken_withJavaUtilList_, callee, paren, arguments)
}

SMExpr_Call *create_SMExpr_Call_initWithSMExpr_withSMToken_withJavaUtilList_(SMExpr *callee, SMToken *paren, id<JavaUtilList> arguments) {
  J2OBJC_CREATE_IMPL(SMExpr_Call, initWithSMExpr_withSMToken_withJavaUtilList_, callee, paren, arguments)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Call)

J2OBJC_INITIALIZED_DEFN(SMExpr_Call_$Lambda$1)

@implementation SMExpr_Call_$Lambda$1

- (id)applyWithId:(SMExpr *)a {
  return [((SMExpr *) nil_chk(a)) toCodeWithInt:0 withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SMExpr_Call_$Lambda$1 class]) {
    SMExpr_Call_$Lambda$1_instance = new_SMExpr_Call_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SMExpr_Call_$Lambda$1)
  }
}

@end

void SMExpr_Call_$Lambda$1_init(SMExpr_Call_$Lambda$1 *self) {
  NSObject_init(self);
}

SMExpr_Call_$Lambda$1 *new_SMExpr_Call_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SMExpr_Call_$Lambda$1, init)
}

SMExpr_Call_$Lambda$1 *create_SMExpr_Call_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SMExpr_Call_$Lambda$1, init)
}

@implementation SMExpr_Get

- (instancetype __nonnull)initWithSMToken:(SMToken *)origin
                               withSMExpr:(SMExpr *)object
                               withSMExpr:(SMExpr *)name
                      withJavaLangInteger:(JavaLangInteger *)arity {
  SMExpr_Get_initWithSMToken_withSMExpr_withSMExpr_withJavaLangInteger_(self, origin, object, name, arity);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitGetExprWithSMExpr_Get:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$$", [((SMExpr *) nil_chk(object_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst], [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, DOT))) toCode], [((SMExpr *) nil_chk(name_)) toCodeWithInt:0 withBoolean:false]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr:withSMExpr:withJavaLangInteger:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "origin_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "object_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "name_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "arity_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr;LSMExpr;LJavaLangInteger;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Get = { "Get", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 4, 6, -1, -1, -1, -1 };
  return &_SMExpr_Get;
}

@end

void SMExpr_Get_initWithSMToken_withSMExpr_withSMExpr_withJavaLangInteger_(SMExpr_Get *self, SMToken *origin, SMExpr *object, SMExpr *name, JavaLangInteger *arity) {
  SMExpr_init(self);
  self->origin_ = origin;
  self->object_ = object;
  self->name_ = name;
  self->arity_ = arity;
}

SMExpr_Get *new_SMExpr_Get_initWithSMToken_withSMExpr_withSMExpr_withJavaLangInteger_(SMToken *origin, SMExpr *object, SMExpr *name, JavaLangInteger *arity) {
  J2OBJC_NEW_IMPL(SMExpr_Get, initWithSMToken_withSMExpr_withSMExpr_withJavaLangInteger_, origin, object, name, arity)
}

SMExpr_Get *create_SMExpr_Get_initWithSMToken_withSMExpr_withSMExpr_withJavaLangInteger_(SMToken *origin, SMExpr *object, SMExpr *name, JavaLangInteger *arity) {
  J2OBJC_CREATE_IMPL(SMExpr_Get, initWithSMToken_withSMExpr_withSMExpr_withJavaLangInteger_, origin, object, name, arity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Get)

@implementation SMExpr_Grouping

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)expression {
  SMExpr_Grouping_initWithSMExpr_(self, expression);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitGroupingExprWithSMExpr_Grouping:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, LEFT_PAREN))) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(expression_)) toCodeWithInt:0 withBoolean:false]])) appendWithNSString:@" "])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_PAREN))) toCode]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ" };
  static const J2ObjcClassInfo _SMExpr_Grouping = { "Grouping", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 1, 0, -1, -1, -1, -1 };
  return &_SMExpr_Grouping;
}

@end

void SMExpr_Grouping_initWithSMExpr_(SMExpr_Grouping *self, SMExpr *expression) {
  SMExpr_init(self);
  self->expression_ = expression;
}

SMExpr_Grouping *new_SMExpr_Grouping_initWithSMExpr_(SMExpr *expression) {
  J2OBJC_NEW_IMPL(SMExpr_Grouping, initWithSMExpr_, expression)
}

SMExpr_Grouping *create_SMExpr_Grouping_initWithSMExpr_(SMExpr *expression) {
  J2OBJC_CREATE_IMPL(SMExpr_Grouping, initWithSMExpr_, expression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Grouping)

@implementation SMExpr_Gu

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)expr {
  SMExpr_Gu_initWithSMExpr_(self, expr);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitGuExprWithSMExpr_Gu:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, GU))) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(expr_)) toCodeWithInt:0 withBoolean:false]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expr_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ" };
  static const J2ObjcClassInfo _SMExpr_Gu = { "Gu", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 1, 0, -1, -1, -1, -1 };
  return &_SMExpr_Gu;
}

@end

void SMExpr_Gu_initWithSMExpr_(SMExpr_Gu *self, SMExpr *expr) {
  SMExpr_init(self);
  self->expr_ = expr;
}

SMExpr_Gu *new_SMExpr_Gu_initWithSMExpr_(SMExpr *expr) {
  J2OBJC_NEW_IMPL(SMExpr_Gu, initWithSMExpr_, expr)
}

SMExpr_Gu *create_SMExpr_Gu_initWithSMExpr_(SMExpr *expr) {
  J2OBJC_CREATE_IMPL(SMExpr_Gu, initWithSMExpr_, expr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Gu)

@implementation SMExpr_Ivic

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)expr {
  SMExpr_Ivic_initWithSMExpr_(self, expr);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitIvicExprWithSMExpr_Ivic:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, IVIC))) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(expr_)) toCodeWithInt:0 withBoolean:false]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expr_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ" };
  static const J2ObjcClassInfo _SMExpr_Ivic = { "Ivic", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 1, 0, -1, -1, -1, -1 };
  return &_SMExpr_Ivic;
}

@end

void SMExpr_Ivic_initWithSMExpr_(SMExpr_Ivic *self, SMExpr *expr) {
  SMExpr_init(self);
  self->expr_ = expr;
}

SMExpr_Ivic *new_SMExpr_Ivic_initWithSMExpr_(SMExpr *expr) {
  J2OBJC_NEW_IMPL(SMExpr_Ivic, initWithSMExpr_, expr)
}

SMExpr_Ivic *create_SMExpr_Ivic_initWithSMExpr_(SMExpr *expr) {
  J2OBJC_CREATE_IMPL(SMExpr_Ivic, initWithSMExpr_, expr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Ivic)

@implementation SMExpr_Literal

- (instancetype __nonnull)initWithSMSimiValue:(SMSimiValue *)value {
  SMExpr_Literal_initWithSMSimiValue_(self, value);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitLiteralExprWithSMExpr_Literal:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  if (self->value_ == nil) {
    return [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NIL))) toCodeWithInt:indentationLevel withBoolean:ignoreFirst];
  }
  return [value_ toCodeWithInt:indentationLevel withBoolean:ignoreFirst];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiValue:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LSMSimiValue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiValue;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Literal = { "Literal", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 1, 6, -1, -1, -1, -1 };
  return &_SMExpr_Literal;
}

@end

void SMExpr_Literal_initWithSMSimiValue_(SMExpr_Literal *self, SMSimiValue *value) {
  SMExpr_init(self);
  self->value_ = value;
}

SMExpr_Literal *new_SMExpr_Literal_initWithSMSimiValue_(SMSimiValue *value) {
  J2OBJC_NEW_IMPL(SMExpr_Literal, initWithSMSimiValue_, value)
}

SMExpr_Literal *create_SMExpr_Literal_initWithSMSimiValue_(SMSimiValue *value) {
  J2OBJC_CREATE_IMPL(SMExpr_Literal, initWithSMSimiValue_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Literal)

@implementation SMExpr_Logical

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)left
                             withSMToken:(SMToken *)operator_
                              withSMExpr:(SMExpr *)right {
  SMExpr_Logical_initWithSMExpr_withSMToken_withSMExpr_(self, left, operator_, right);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitLogicalExprWithSMExpr_Logical:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMExpr *) nil_chk(left_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:@" "])) appendWithNSString:[((SMTokenType *) nil_chk(((SMToken *) nil_chk(operator__))->type_)) toCode]])) appendWithNSString:@" "])) appendWithNSString:[left_ toCodeWithInt:0 withBoolean:false]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:withSMToken:withSMExpr:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "left_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "operator__", "LSMToken;", .constantValue.asLong = 0, 0x10, 6, -1, -1, -1 },
    { "right_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;LSMToken;LSMExpr;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "operator", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Logical = { "Logical", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 3, 7, -1, -1, -1, -1 };
  return &_SMExpr_Logical;
}

@end

void SMExpr_Logical_initWithSMExpr_withSMToken_withSMExpr_(SMExpr_Logical *self, SMExpr *left, SMToken *operator_, SMExpr *right) {
  SMExpr_init(self);
  self->left_ = left;
  self->operator__ = operator_;
  self->right_ = right;
}

SMExpr_Logical *new_SMExpr_Logical_initWithSMExpr_withSMToken_withSMExpr_(SMExpr *left, SMToken *operator_, SMExpr *right) {
  J2OBJC_NEW_IMPL(SMExpr_Logical, initWithSMExpr_withSMToken_withSMExpr_, left, operator_, right)
}

SMExpr_Logical *create_SMExpr_Logical_initWithSMExpr_withSMToken_withSMExpr_(SMExpr *left, SMToken *operator_, SMExpr *right) {
  J2OBJC_CREATE_IMPL(SMExpr_Logical, initWithSMExpr_withSMToken_withSMExpr_, left, operator_, right)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Logical)

@implementation SMExpr_Set

- (instancetype __nonnull)initWithSMToken:(SMToken *)origin
                               withSMExpr:(SMExpr *)object
                               withSMExpr:(SMExpr *)name
                               withSMExpr:(SMExpr *)value {
  SMExpr_Set_initWithSMToken_withSMExpr_withSMExpr_withSMExpr_(self, origin, object, name, value);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitSetExprWithSMExpr_Set:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMExpr *) nil_chk(object_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, DOT))) toCode]])) appendWithNSString:[((SMExpr *) nil_chk(name_)) toCodeWithInt:0 withBoolean:false]])) appendWithNSString:@" "])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, EQUAL))) toCode]])) appendWithNSString:@" "])) appendWithNSString:[((SMExpr *) nil_chk(value_)) toCodeWithInt:0 withBoolean:false]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr:withSMExpr:withSMExpr:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "origin_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "object_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "name_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr;LSMExpr;LSMExpr;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Set = { "Set", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 4, 6, -1, -1, -1, -1 };
  return &_SMExpr_Set;
}

@end

void SMExpr_Set_initWithSMToken_withSMExpr_withSMExpr_withSMExpr_(SMExpr_Set *self, SMToken *origin, SMExpr *object, SMExpr *name, SMExpr *value) {
  SMExpr_init(self);
  self->origin_ = origin;
  self->object_ = object;
  self->name_ = name;
  self->value_ = value;
}

SMExpr_Set *new_SMExpr_Set_initWithSMToken_withSMExpr_withSMExpr_withSMExpr_(SMToken *origin, SMExpr *object, SMExpr *name, SMExpr *value) {
  J2OBJC_NEW_IMPL(SMExpr_Set, initWithSMToken_withSMExpr_withSMExpr_withSMExpr_, origin, object, name, value)
}

SMExpr_Set *create_SMExpr_Set_initWithSMToken_withSMExpr_withSMExpr_withSMExpr_(SMToken *origin, SMExpr *object, SMExpr *name, SMExpr *value) {
  J2OBJC_CREATE_IMPL(SMExpr_Set, initWithSMToken_withSMExpr_withSMExpr_withSMExpr_, origin, object, name, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Set)

@implementation SMExpr_Super

- (instancetype __nonnull)initWithSMToken:(SMToken *)keyword
                              withSMToken:(SMToken *)superclass_
                              withSMToken:(SMToken *)method
                      withJavaLangInteger:(JavaLangInteger *)arity {
  SMExpr_Super_initWithSMToken_withSMToken_withSMToken_withJavaLangInteger_(self, keyword, superclass_, method, arity);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitSuperExprWithSMExpr_Super:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(((SMToken *) nil_chk(keyword_))->type_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]);
  if (superclass__ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, LEFT_PAREN))) toCode]])) appendWithNSString:superclass__->lexeme_])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_PAREN))) toCode]];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, DOT))) toCode]])) appendWithNSString:((SMToken *) nil_chk(method_))->lexeme_];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMToken:withSMToken:withJavaLangInteger:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyword_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "superclass__", "LSMToken;", .constantValue.asLong = 0, 0x10, 6, -1, -1, -1 },
    { "method_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "arity_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMToken;LSMToken;LJavaLangInteger;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "superclass", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Super = { "Super", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 4, 7, -1, -1, -1, -1 };
  return &_SMExpr_Super;
}

@end

void SMExpr_Super_initWithSMToken_withSMToken_withSMToken_withJavaLangInteger_(SMExpr_Super *self, SMToken *keyword, SMToken *superclass_, SMToken *method, JavaLangInteger *arity) {
  SMExpr_init(self);
  self->keyword_ = keyword;
  self->superclass__ = superclass_;
  self->method_ = method;
  self->arity_ = arity;
}

SMExpr_Super *new_SMExpr_Super_initWithSMToken_withSMToken_withSMToken_withJavaLangInteger_(SMToken *keyword, SMToken *superclass_, SMToken *method, JavaLangInteger *arity) {
  J2OBJC_NEW_IMPL(SMExpr_Super, initWithSMToken_withSMToken_withSMToken_withJavaLangInteger_, keyword, superclass_, method, arity)
}

SMExpr_Super *create_SMExpr_Super_initWithSMToken_withSMToken_withSMToken_withJavaLangInteger_(SMToken *keyword, SMToken *superclass_, SMToken *method, JavaLangInteger *arity) {
  J2OBJC_CREATE_IMPL(SMExpr_Super, initWithSMToken_withSMToken_withSMToken_withJavaLangInteger_, keyword, superclass_, method, arity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Super)

@implementation SMExpr_Self

- (instancetype __nonnull)initWithSMToken:(SMToken *)keyword
                              withSMToken:(SMToken *)specifier {
  SMExpr_Self_initWithSMToken_withSMToken_(self, keyword, specifier);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitSelfExprWithSMExpr_Self:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(((SMToken *) nil_chk(keyword_))->type_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]);
  if (specifier_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, LEFT_PAREN))) toCode]])) appendWithNSString:[specifier_->type_ toCode]])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_PAREN))) toCode]];
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMToken:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyword_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "specifier_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMToken;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Self = { "Self", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 2, 6, -1, -1, -1, -1 };
  return &_SMExpr_Self;
}

@end

void SMExpr_Self_initWithSMToken_withSMToken_(SMExpr_Self *self, SMToken *keyword, SMToken *specifier) {
  SMExpr_init(self);
  self->keyword_ = keyword;
  self->specifier_ = specifier;
}

SMExpr_Self *new_SMExpr_Self_initWithSMToken_withSMToken_(SMToken *keyword, SMToken *specifier) {
  J2OBJC_NEW_IMPL(SMExpr_Self, initWithSMToken_withSMToken_, keyword, specifier)
}

SMExpr_Self *create_SMExpr_Self_initWithSMToken_withSMToken_(SMToken *keyword, SMToken *specifier) {
  J2OBJC_CREATE_IMPL(SMExpr_Self, initWithSMToken_withSMToken_, keyword, specifier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Self)

@implementation SMExpr_Unary

- (instancetype __nonnull)initWithSMToken:(SMToken *)operator_
                               withSMExpr:(SMExpr *)right {
  SMExpr_Unary_initWithSMToken_withSMExpr_(self, operator_, right);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitUnaryExprWithSMExpr_Unary:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$", [((SMTokenType *) nil_chk(((SMToken *) nil_chk(operator__))->type_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst], ' ', [((SMExpr *) nil_chk(right_)) toCodeWithInt:0 withBoolean:false]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withSMExpr:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "operator__", "LSMToken;", .constantValue.asLong = 0, 0x10, 6, -1, -1, -1 },
    { "right_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LSMExpr;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "operator", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Unary = { "Unary", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 2, 7, -1, -1, -1, -1 };
  return &_SMExpr_Unary;
}

@end

void SMExpr_Unary_initWithSMToken_withSMExpr_(SMExpr_Unary *self, SMToken *operator_, SMExpr *right) {
  SMExpr_init(self);
  self->operator__ = operator_;
  self->right_ = right;
}

SMExpr_Unary *new_SMExpr_Unary_initWithSMToken_withSMExpr_(SMToken *operator_, SMExpr *right) {
  J2OBJC_NEW_IMPL(SMExpr_Unary, initWithSMToken_withSMExpr_, operator_, right)
}

SMExpr_Unary *create_SMExpr_Unary_initWithSMToken_withSMExpr_(SMToken *operator_, SMExpr *right) {
  J2OBJC_CREATE_IMPL(SMExpr_Unary, initWithSMToken_withSMExpr_, operator_, right)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Unary)

@implementation SMExpr_Variable

- (instancetype __nonnull)initWithSMToken:(SMToken *)name {
  SMExpr_Variable_initWithSMToken_(self, name);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitVariableExprWithSMExpr_Variable:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$$", (ignoreFirst ? @"" : SMCodifiable_getIndentationWithInt_(indentationLevel)), ((SMToken *) nil_chk(name_))->lexeme_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Variable = { "Variable", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 1, 6, -1, -1, -1, -1 };
  return &_SMExpr_Variable;
}

@end

void SMExpr_Variable_initWithSMToken_(SMExpr_Variable *self, SMToken *name) {
  SMExpr_init(self);
  self->name_ = name;
}

SMExpr_Variable *new_SMExpr_Variable_initWithSMToken_(SMToken *name) {
  J2OBJC_NEW_IMPL(SMExpr_Variable, initWithSMToken_, name)
}

SMExpr_Variable *create_SMExpr_Variable_initWithSMToken_(SMToken *name) {
  J2OBJC_CREATE_IMPL(SMExpr_Variable, initWithSMToken_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Variable)

@implementation SMExpr_ObjectLiteral

- (instancetype __nonnull)initWithSMToken:(SMToken *)opener
                         withJavaUtilList:(id<JavaUtilList>)props
                              withBoolean:(jboolean)isDictionary {
  SMExpr_ObjectLiteral_initWithSMToken_withJavaUtilList_withBoolean_(self, opener, props, isDictionary);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)params {
  return [((id<SMExpr_Visitor>) nil_chk(visitor)) visitObjectLiteralExprWithSMExpr_ObjectLiteral:self];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  jboolean needsNewline = isDictionary_ && ![((id<JavaUtilList>) nil_chk(props_)) isEmpty];
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((SMTokenType *) nil_chk(((SMToken *) nil_chk(opener_))->type_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst]) appendWithNSString:needsNewline ? [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode] : @""])) appendWithNSString:[((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(props_)) stream])) mapWithJavaUtilFunctionFunction:new_SMExpr_ObjectLiteral_$Lambda$1_initWithBoolean_withInt_(needsNewline, indentationLevel)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_(JreStrcat("$$", [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, COMMA))) toCode], (needsNewline ? [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode] : @" ")))]])) appendWithNSString:needsNewline ? [((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, NEWLINE))) toCode] : @""])) appendWithNSString:[((SMTokenType *) nil_chk(JreLoadEnum(SMTokenType, RIGHT_BRACKET))) toCodeWithInt:indentationLevel withBoolean:false]])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMToken:withJavaUtilList:withBoolean:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "opener_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "props_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "isDictionary_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMToken;LJavaUtilList;Z", "(LToken;Ljava/util/List<LExpr;>;Z)V", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "Ljava/util/List<LExpr;>;", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_ObjectLiteral = { "ObjectLiteral", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 3, 8, -1, -1, -1, -1 };
  return &_SMExpr_ObjectLiteral;
}

@end

void SMExpr_ObjectLiteral_initWithSMToken_withJavaUtilList_withBoolean_(SMExpr_ObjectLiteral *self, SMToken *opener, id<JavaUtilList> props, jboolean isDictionary) {
  SMExpr_init(self);
  self->opener_ = opener;
  self->props_ = props;
  self->isDictionary_ = isDictionary;
}

SMExpr_ObjectLiteral *new_SMExpr_ObjectLiteral_initWithSMToken_withJavaUtilList_withBoolean_(SMToken *opener, id<JavaUtilList> props, jboolean isDictionary) {
  J2OBJC_NEW_IMPL(SMExpr_ObjectLiteral, initWithSMToken_withJavaUtilList_withBoolean_, opener, props, isDictionary)
}

SMExpr_ObjectLiteral *create_SMExpr_ObjectLiteral_initWithSMToken_withJavaUtilList_withBoolean_(SMToken *opener, id<JavaUtilList> props, jboolean isDictionary) {
  J2OBJC_CREATE_IMPL(SMExpr_ObjectLiteral, initWithSMToken_withJavaUtilList_withBoolean_, opener, props, isDictionary)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_ObjectLiteral)

@implementation SMExpr_ObjectLiteral_$Lambda$1

- (id)applyWithId:(SMExpr *)p {
  return [((SMExpr *) nil_chk(p)) toCodeWithInt:val$needsNewline_ ? val$indentationLevel_ + 1 : 0 withBoolean:false];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void SMExpr_ObjectLiteral_$Lambda$1_initWithBoolean_withInt_(SMExpr_ObjectLiteral_$Lambda$1 *self, jboolean capture$0, jint capture$1) {
  self->val$needsNewline_ = capture$0;
  self->val$indentationLevel_ = capture$1;
  NSObject_init(self);
}

SMExpr_ObjectLiteral_$Lambda$1 *new_SMExpr_ObjectLiteral_$Lambda$1_initWithBoolean_withInt_(jboolean capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(SMExpr_ObjectLiteral_$Lambda$1, initWithBoolean_withInt_, capture$0, capture$1)
}

SMExpr_ObjectLiteral_$Lambda$1 *create_SMExpr_ObjectLiteral_$Lambda$1_initWithBoolean_withInt_(jboolean capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(SMExpr_ObjectLiteral_$Lambda$1, initWithBoolean_withInt_, capture$0, capture$1)
}

@implementation SMExpr_Yield

- (instancetype __nonnull)initWithSMExpr:(SMExpr *)var
                             withSMToken:(SMToken *)assign
                             withSMToken:(SMToken *)keyword
                         withSMExpr_Call:(SMExpr_Call *)value {
  SMExpr_Yield_initWithSMExpr_withSMToken_withSMToken_withSMExpr_Call_(self, var, assign, keyword, value);
  return self;
}

- (id)acceptWithSMExpr_Visitor:(id<SMExpr_Visitor>)visitor
             withNSObjectArray:(IOSObjectArray *)args {
  return nil;
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("$C$C$C$", [((SMExpr *) nil_chk(var_)) toCodeWithInt:indentationLevel withBoolean:false], ' ', [((SMTokenType *) nil_chk(((SMToken *) nil_chk(assign_))->type_)) toCodeWithInt:0 withBoolean:false], ' ', [((SMToken *) nil_chk(keyword_))->type_ toCodeWithInt:0 withBoolean:false], ' ', [((SMExpr_Call *) nil_chk(value_)) toCodeWithInt:0 withBoolean:false]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMExpr:withSMToken:withSMToken:withSMExpr_Call:);
  methods[1].selector = @selector(acceptWithSMExpr_Visitor:withNSObjectArray:);
  methods[2].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "var_", "LSMExpr;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "assign_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "keyword_", "LSMToken;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_", "LSMExpr_Call;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMExpr;LSMToken;LSMToken;LSMExpr_Call;", "accept", "LSMExpr_Visitor;[LNSObject;", "<R:Ljava/lang/Object;>(LExpr$Visitor<TR;>;[Ljava/lang/Object;)TR;", "toCode", "IZ", "LSMExpr;" };
  static const J2ObjcClassInfo _SMExpr_Yield = { "Yield", "net.globulus.simi", ptrTable, methods, fields, 7, 0x8, 3, 4, 6, -1, -1, -1, -1 };
  return &_SMExpr_Yield;
}

@end

void SMExpr_Yield_initWithSMExpr_withSMToken_withSMToken_withSMExpr_Call_(SMExpr_Yield *self, SMExpr *var, SMToken *assign, SMToken *keyword, SMExpr_Call *value) {
  SMExpr_init(self);
  self->var_ = var;
  self->assign_ = assign;
  self->keyword_ = keyword;
  self->value_ = value;
}

SMExpr_Yield *new_SMExpr_Yield_initWithSMExpr_withSMToken_withSMToken_withSMExpr_Call_(SMExpr *var, SMToken *assign, SMToken *keyword, SMExpr_Call *value) {
  J2OBJC_NEW_IMPL(SMExpr_Yield, initWithSMExpr_withSMToken_withSMToken_withSMExpr_Call_, var, assign, keyword, value)
}

SMExpr_Yield *create_SMExpr_Yield_initWithSMExpr_withSMToken_withSMToken_withSMExpr_Call_(SMExpr *var, SMToken *assign, SMToken *keyword, SMExpr_Call *value) {
  J2OBJC_CREATE_IMPL(SMExpr_Yield, initWithSMExpr_withSMToken_withSMToken_withSMExpr_Call_, var, assign, keyword, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMExpr_Yield)
