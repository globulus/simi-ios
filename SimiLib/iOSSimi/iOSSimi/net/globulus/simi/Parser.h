//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Parser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiParser")
#ifdef RESTRICT_NetGlobulusSimiParser
#define INCLUDE_ALL_NetGlobulusSimiParser 0
#else
#define INCLUDE_ALL_NetGlobulusSimiParser 1
#endif
#undef RESTRICT_NetGlobulusSimiParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMParser_) && (INCLUDE_ALL_NetGlobulusSimiParser || defined(INCLUDE_SMParser))
#define SMParser_

@class SMExpr;
@class SMToken;
@protocol JavaUtilList;

@interface SMParser : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)tokens;

+ (SMExpr *)getAssignExprWithSMParser:(SMParser *)parser
                           withSMExpr:(SMExpr *)expr
                          withSMToken:(SMToken *)equals
                           withSMExpr:(SMExpr *)value;

- (id<JavaUtilList>)parse;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SMParser)

FOUNDATION_EXPORT void SMParser_initWithJavaUtilList_(SMParser *self, id<JavaUtilList> tokens);

FOUNDATION_EXPORT SMParser *new_SMParser_initWithJavaUtilList_(id<JavaUtilList> tokens) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMParser *create_SMParser_initWithJavaUtilList_(id<JavaUtilList> tokens);

FOUNDATION_EXPORT SMExpr *SMParser_getAssignExprWithSMParser_withSMExpr_withSMToken_withSMExpr_(SMParser *parser, SMExpr *expr, SMToken *equals, SMExpr *value);

J2OBJC_TYPE_LITERAL_HEADER(SMParser)

@compatibility_alias NetGlobulusSimiParser SMParser;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiParser")
