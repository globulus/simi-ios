//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/SimiValue.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "SimiCallable.h"
#include "SimiObject.h"
#include "SimiValue.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface SMSimiValue_Callable () {
 @public
  id<SMSimiObject> instance_;
}

@end

J2OBJC_FIELD_SETTER(SMSimiValue_Callable, instance_, id<SMSimiObject>)

@implementation SMSimiValue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMSimiValue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (SMSimiValue *)copy__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SMSimiValue *)getValue {
  return self;
}

- (void)setValueWithSMSimiValue:(SMSimiValue *)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Can't set value of SimiValue!");
}

- (id<JavaUtilList>)getAnnotations {
  return nil;
}

- (NSString *)getString {
  if ([self isKindOfClass:[SMSimiValue_String class]]) {
    return ((SMSimiValue_String *) cast_chk(self, [SMSimiValue_String class]))->value_;
  }
  @throw new_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_([self java_getClass], SMSimiValue_String_class_());
}

- (JavaLangDouble *)getNumber {
  if ([self isKindOfClass:[SMSimiValue_Number class]]) {
    return JavaLangDouble_valueOfWithDouble_(((SMSimiValue_Number *) cast_chk(self, [SMSimiValue_Number class]))->value_);
  }
  @throw new_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_([self java_getClass], SMSimiValue_Number_class_());
}

- (id<SMSimiObject>)getObject {
  if ([self isKindOfClass:[SMSimiValue_Object class]]) {
    return ((SMSimiValue_Object *) cast_chk(self, [SMSimiValue_Object class]))->value_;
  }
  @throw new_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_([self java_getClass], SMSimiValue_Object_class_());
}

- (id<SMSimiCallable>)getCallable {
  if ([self isKindOfClass:[SMSimiValue_Callable class]]) {
    return ((SMSimiValue_Callable *) cast_chk(self, [SMSimiValue_Callable class]))->value_;
  }
  @throw new_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_([self java_getClass], SMSimiValue_Callable_class_());
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x401, 0, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiCallable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copy__);
  methods[2].selector = @selector(cloneWithBoolean:);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(setValueWithSMSimiValue:);
  methods[5].selector = @selector(getAnnotations);
  methods[6].selector = @selector(getString);
  methods[7].selector = @selector(getNumber);
  methods[8].selector = @selector(getObject);
  methods[9].selector = @selector(getCallable);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "copy", "clone", "Z", "setValue", "LSMSimiValue;", "()Ljava/util/List<LSimiObject;>;", "LSMSimiValue_String;LSMSimiValue_Number;LSMSimiValue_Object;LSMSimiValue_Callable;LSMSimiValue_IncompatibleValuesException;", "Ljava/lang/Object;LSimiProperty;LCodifiable;Ljava/lang/Comparable<LSimiValue;>;" };
  static const J2ObjcClassInfo _SMSimiValue = { "SimiValue", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x401, 10, 0, -1, 6, -1, 7, -1 };
  return &_SMSimiValue;
}

@end

void SMSimiValue_init(SMSimiValue *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiValue)

@implementation SMSimiValue_String

- (instancetype __nonnull)initWithNSString:(NSString *)value {
  SMSimiValue_String_initWithNSString_(self, value);
  return self;
}

- (NSString *)description {
  return value_;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil || !([obj isKindOfClass:[SMSimiValue_String class]])) {
    return false;
  }
  return [((NSString *) nil_chk(value_)) isEqual:((SMSimiValue_String *) cast_chk(obj, [SMSimiValue_String class]))->value_];
}

- (SMSimiValue *)copy__ {
  return new_SMSimiValue_String_initWithNSString_(value_);
}

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_ {
  return [self copy__];
}

- (jint)compareToWithId:(SMSimiValue *)o {
  (void) cast_chk(o, [SMSimiValue class]);
  if (!([o isKindOfClass:[SMSimiValue_String class]])) {
    @throw new_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_([self java_getClass], [((SMSimiValue *) nil_chk(o)) java_getClass]);
  }
  return [((NSString *) nil_chk(self->value_)) compareToWithId:((SMSimiValue_String *) nil_chk(((SMSimiValue_String *) cast_chk(o, [SMSimiValue_String class]))))->value_];
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return JreStrcat("C$C", '"', [((NSString *) nil_chk([self description])) java_replace:@"\"" withSequence:@"\\\""], '"');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(copy__);
  methods[4].selector = @selector(cloneWithBoolean:);
  methods[5].selector = @selector(compareToWithId:);
  methods[6].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", "equals", "LNSObject;", "copy", "clone", "Z", "compareTo", "LSMSimiValue;", "toCode", "IZ" };
  static const J2ObjcClassInfo _SMSimiValue_String = { "String", "net.globulus.simi", ptrTable, methods, fields, 7, 0x9, 7, 1, 8, -1, -1, -1, -1 };
  return &_SMSimiValue_String;
}

@end

void SMSimiValue_String_initWithNSString_(SMSimiValue_String *self, NSString *value) {
  SMSimiValue_init(self);
  self->value_ = value;
}

SMSimiValue_String *new_SMSimiValue_String_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(SMSimiValue_String, initWithNSString_, value)
}

SMSimiValue_String *create_SMSimiValue_String_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(SMSimiValue_String, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiValue_String)

J2OBJC_INITIALIZED_DEFN(SMSimiValue_Number)

SMSimiValue_Number *SMSimiValue_Number_TRUE;
SMSimiValue_Number *SMSimiValue_Number_FALSE;

@implementation SMSimiValue_Number

+ (SMSimiValue_Number *)TRUE_ {
  return SMSimiValue_Number_TRUE;
}

+ (SMSimiValue_Number *)FALSE_ {
  return SMSimiValue_Number_FALSE;
}

- (instancetype __nonnull)initWithDouble:(jdouble)value {
  SMSimiValue_Number_initWithDouble_(self, value);
  return self;
}

- (instancetype __nonnull)initWithBoolean:(jboolean)value {
  SMSimiValue_Number_initWithBoolean_(self, value);
  return self;
}

// THIS HAS TO BE FIXED BECAUSE IT THROWS BAD_ACCESS IF USED IN J2OBJC ORIGINAL FORM
- (NSString *)description {
    if (floor(value_) == value_) {
        return [NSString stringWithFormat:@"%.0f", value_];
    }
   return [NSString stringWithFormat:@"%f", value_];
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil /*|| !([obj isKindOfClass:[SMSimiValue_Number class]])*/) {
    return false;
  }
  return JavaLangDouble_compareWithDouble_withDouble_(value_, ((SMSimiValue_Number *) cast_chk(obj, [SMSimiValue_Number class]))->value_) == 0;
}

- (SMSimiValue *)copy__ {
  return new_SMSimiValue_Number_initWithDouble_(value_);
}

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_ {
  return [self copy__];
}

- (jint)compareToWithId:(SMSimiValue *)o {
  (void) cast_chk(o, [SMSimiValue class]);
  if (!([o isKindOfClass:[SMSimiValue_Number class]])) {
    @throw new_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_([self java_getClass], [((SMSimiValue *) nil_chk(o)) java_getClass]);
  }
  return JavaLangDouble_compareWithDouble_withDouble_(self->value_, ((SMSimiValue_Number *) nil_chk(((SMSimiValue_Number *) cast_chk(o, [SMSimiValue_Number class]))))->value_);
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [self description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDouble:);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(copy__);
  methods[5].selector = @selector(cloneWithBoolean:);
  methods[6].selector = @selector(compareToWithId:);
  methods[7].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "D", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "TRUE", "LSMSimiValue_Number;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "FALSE", "LSMSimiValue_Number;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "D", "Z", "toString", "equals", "LNSObject;", "copy", "clone", "compareTo", "LSMSimiValue;", "toCode", "IZ", &SMSimiValue_Number_TRUE, &SMSimiValue_Number_FALSE };
  static const J2ObjcClassInfo _SMSimiValue_Number = { "Number", "net.globulus.simi", ptrTable, methods, fields, 7, 0x9, 8, 3, 8, -1, -1, -1, -1 };
  return &_SMSimiValue_Number;
}

+ (void)initialize {
  if (self == [SMSimiValue_Number class]) {
    SMSimiValue_Number_TRUE = new_SMSimiValue_Number_initWithBoolean_(true);
    SMSimiValue_Number_FALSE = new_SMSimiValue_Number_initWithBoolean_(false);
    J2OBJC_SET_INITIALIZED(SMSimiValue_Number)
  }
}

@end

void SMSimiValue_Number_initWithDouble_(SMSimiValue_Number *self, jdouble value) {
  SMSimiValue_init(self);
  self->value_ = value;
}

SMSimiValue_Number *new_SMSimiValue_Number_initWithDouble_(jdouble value) {
  J2OBJC_NEW_IMPL(SMSimiValue_Number, initWithDouble_, value)
}

SMSimiValue_Number *create_SMSimiValue_Number_initWithDouble_(jdouble value) {
  J2OBJC_CREATE_IMPL(SMSimiValue_Number, initWithDouble_, value)
}

void SMSimiValue_Number_initWithBoolean_(SMSimiValue_Number *self, jboolean value) {
  SMSimiValue_init(self);
  self->value_ = value ? 1 : 0;
}

SMSimiValue_Number *new_SMSimiValue_Number_initWithBoolean_(jboolean value) {
  J2OBJC_NEW_IMPL(SMSimiValue_Number, initWithBoolean_, value)
}

SMSimiValue_Number *create_SMSimiValue_Number_initWithBoolean_(jboolean value) {
  J2OBJC_CREATE_IMPL(SMSimiValue_Number, initWithBoolean_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiValue_Number)

@implementation SMSimiValue_Object

- (instancetype __nonnull)initWithSMSimiObject:(id<SMSimiObject>)value {
  SMSimiValue_Object_initWithSMSimiObject_(self, value);
  return self;
}

- (NSString *)description {
  return [((id<SMSimiObject>) nil_chk(value_)) description];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (SMSimiValue *)copy__ {
  return new_SMSimiValue_Object_initWithSMSimiObject_(value_);
}

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_ {
  return new_SMSimiValue_Object_initWithSMSimiObject_([((id<SMSimiObject>) nil_chk(value_)) cloneWithBoolean:mutable_]);
}

- (jint)compareToWithId:(SMSimiValue *)o {
  (void) cast_chk(o, [SMSimiValue class]);
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Unable to compare objects by default, implement in subclass!");
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((id<SMSimiObject>) nil_chk(value_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiObject:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(copy__);
  methods[4].selector = @selector(cloneWithBoolean:);
  methods[5].selector = @selector(compareToWithId:);
  methods[6].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LSMSimiObject;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiObject;", "toString", "equals", "LNSObject;", "copy", "clone", "Z", "compareTo", "LSMSimiValue;", "toCode", "IZ" };
  static const J2ObjcClassInfo _SMSimiValue_Object = { "Object", "net.globulus.simi", ptrTable, methods, fields, 7, 0x9, 7, 1, 8, -1, -1, -1, -1 };
  return &_SMSimiValue_Object;
}

@end

void SMSimiValue_Object_initWithSMSimiObject_(SMSimiValue_Object *self, id<SMSimiObject> value) {
  SMSimiValue_init(self);
  self->value_ = value;
}

SMSimiValue_Object *new_SMSimiValue_Object_initWithSMSimiObject_(id<SMSimiObject> value) {
  J2OBJC_NEW_IMPL(SMSimiValue_Object, initWithSMSimiObject_, value)
}

SMSimiValue_Object *create_SMSimiValue_Object_initWithSMSimiObject_(id<SMSimiObject> value) {
  J2OBJC_CREATE_IMPL(SMSimiValue_Object, initWithSMSimiObject_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiValue_Object)

@implementation SMSimiValue_Callable

- (instancetype __nonnull)initWithSMSimiCallable:(id<SMSimiCallable>)value
                                    withNSString:(NSString *)name
                                withSMSimiObject:(id<SMSimiObject>)instance {
  SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(self, value, name, instance);
  return self;
}

- (NSString *)description {
  return [((id<SMSimiCallable>) nil_chk(value_)) description];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (SMSimiValue *)copy__ {
  return new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(value_, name_, instance_);
}

- (SMSimiValue *)cloneWithBoolean:(jboolean)mutable_ {
  return [self copy__];
}

- (id<SMSimiObject>)getInstance {
  return instance_;
}

- (void)bindWithSMSimiObject:(id<SMSimiObject>)instance {
  self->instance_ = instance;
}

- (jint)compareToWithId:(SMSimiValue *)o {
  (void) cast_chk(o, [SMSimiValue class]);
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Unable to compare callables!");
}

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst {
  return [((id<SMSimiCallable>) nil_chk(value_)) toCodeWithInt:indentationLevel withBoolean:ignoreFirst];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LSMSimiValue;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LSMSimiObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSMSimiCallable:withNSString:withSMSimiObject:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(copy__);
  methods[4].selector = @selector(cloneWithBoolean:);
  methods[5].selector = @selector(getInstance);
  methods[6].selector = @selector(bindWithSMSimiObject:);
  methods[7].selector = @selector(compareToWithId:);
  methods[8].selector = @selector(toCodeWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LSMSimiCallable;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "instance_", "LSMSimiObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSMSimiCallable;LNSString;LSMSimiObject;", "toString", "equals", "LNSObject;", "copy", "clone", "Z", "bind", "LSMSimiObject;", "compareTo", "LSMSimiValue;", "toCode", "IZ" };
  static const J2ObjcClassInfo _SMSimiValue_Callable = { "Callable", "net.globulus.simi", ptrTable, methods, fields, 7, 0x9, 9, 3, 10, -1, -1, -1, -1 };
  return &_SMSimiValue_Callable;
}

@end

void SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(SMSimiValue_Callable *self, id<SMSimiCallable> value, NSString *name, id<SMSimiObject> instance) {
  SMSimiValue_init(self);
  self->value_ = value;
  self->name_ = name;
  self->instance_ = instance;
}

SMSimiValue_Callable *new_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(id<SMSimiCallable> value, NSString *name, id<SMSimiObject> instance) {
  J2OBJC_NEW_IMPL(SMSimiValue_Callable, initWithSMSimiCallable_withNSString_withSMSimiObject_, value, name, instance)
}

SMSimiValue_Callable *create_SMSimiValue_Callable_initWithSMSimiCallable_withNSString_withSMSimiObject_(id<SMSimiCallable> value, NSString *name, id<SMSimiObject> instance) {
  J2OBJC_CREATE_IMPL(SMSimiValue_Callable, initWithSMSimiCallable_withNSString_withSMSimiObject_, value, name, instance)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiValue_Callable)

@implementation SMSimiValue_IncompatibleValuesException

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)value
                              withIOSClass:(IOSClass *)expected {
  SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_(self, value, expected);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;LIOSClass;", "(Ljava/lang/Class<+LSimiValue;>;Ljava/lang/Class<+LSimiValue;>;)V", "LSMSimiValue;" };
  static const J2ObjcClassInfo _SMSimiValue_IncompatibleValuesException = { "IncompatibleValuesException", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x9, 1, 0, 2, -1, -1, -1, -1 };
  return &_SMSimiValue_IncompatibleValuesException;
}

@end

void SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_(SMSimiValue_IncompatibleValuesException *self, IOSClass *value, IOSClass *expected) {
  JavaLangRuntimeException_initWithNSString_(self, JreStrcat("$$$$", @"Incompatible types, expected ", [((IOSClass *) nil_chk(expected)) getSimpleName], @", got ", [((IOSClass *) nil_chk(value)) getSimpleName]));
}

SMSimiValue_IncompatibleValuesException *new_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_(IOSClass *value, IOSClass *expected) {
  J2OBJC_NEW_IMPL(SMSimiValue_IncompatibleValuesException, initWithIOSClass_withIOSClass_, value, expected)
}

SMSimiValue_IncompatibleValuesException *create_SMSimiValue_IncompatibleValuesException_initWithIOSClass_withIOSClass_(IOSClass *value, IOSClass *expected) {
  J2OBJC_CREATE_IMPL(SMSimiValue_IncompatibleValuesException, initWithIOSClass_withIOSClass_, value, expected)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMSimiValue_IncompatibleValuesException)
