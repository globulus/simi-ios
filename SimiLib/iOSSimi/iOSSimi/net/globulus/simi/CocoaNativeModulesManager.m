//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/net/globulus/simi/CocoaNativeModulesManager.java
//

#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "CocoaNativeModulesManager.h"
#include "Interpreter.h"
#include "SimiObject.h"
#include "SimiProperty.h"

@implementation SMCocoaNativeModulesManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMCocoaNativeModulesManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)load__WithNSString:(NSString *)path {
}

- (id<SMSimiProperty>)callWithNSString:(NSString *)className_
                          withNSString:(NSString *)methodName
                      withSMSimiObject:(id<SMSimiObject>)self_
                     withSMInterpreter:(SMInterpreter *)interpreter
                      withJavaUtilList:(id<JavaUtilList>)args {
    if (!invocations) {
        invocations = [[NSMutableDictionary alloc] init];
    }
    if (!classes) {
        classes = [[NSMutableDictionary alloc] init];
    }
    className_ = [NSString stringWithFormat:@"SM_%@", className_];
    Class class = [classes objectForKey:className_];
    if (class == nil) {
        class = NSClassFromString(className_);
        if (class) {
            [classes setObject:class forKey:className_];
            [invocations setObject:[[NSMutableDictionary alloc] init] forKey:className_];
        }
    }
    if (class) {
        NSMutableDictionary *classInvocations = [invocations objectForKey:className_];
        NSInvocation *invocation = [classInvocations objectForKey:methodName];
        if (invocation == nil) {
            unsigned int methodCount = 0;
            Method *methods = class_copyMethodList(objc_getMetaClass([className_ cStringUsingEncoding:NSUTF8StringEncoding]), &methodCount);
            SEL selector;
            for (unsigned int i = 0; i < methodCount; i++) {
                Method method = methods[i];
                SEL methodSel = method_getName(method);
                NSString *selName = NSStringFromSelector(methodSel);
                if ([[selName substringToIndex:[selName rangeOfString:@":"].location] isEqualToString:methodName]) {
                    selector = methodSel;
                }
            }
            
            free(methods);
            
            if (selector) {
                NSInvocation *inv = [NSInvocation invocationWithMethodSignature:[class methodSignatureForSelector:selector]];
                [inv setSelector:selector];
                [inv setTarget:class];
                [classInvocations setObject:inv forKey:methodName];
                invocation = inv;
            }
        }
        if (invocation) {
            NSMutableArray *params = [NSMutableArray arrayWithArray:@[self_, interpreter]];
            for (id arg in args) {
                [params addObject:arg];
            }
            for (int i = 0; i < [params count]; i++) {
                NSObject *obj = [params objectAtIndex:i];
                [invocation setArgument:&obj atIndex:(i + 2)];
            }
            [invocation invoke];
            void *tempResultSet;
            [invocation getReturnValue:&tempResultSet];
            return  (__bridge id<SMSimiProperty>)tempResultSet;
        }
    }
    return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LSMSimiProperty;", 0x1, 2, 3, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(load__WithNSString:);
  methods[2].selector = @selector(callWithNSString:withNSString:withSMSimiObject:withSMInterpreter:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "load", "LNSString;", "call", "LNSString;LNSString;LSMSimiObject;LSMInterpreter;LJavaUtilList;", "LJavaLangIllegalArgumentException;", "(Ljava/lang/String;Ljava/lang/String;Lnet/globulus/simi/SimiObject;Lnet/globulus/simi/Interpreter;Ljava/util/List<Lnet/globulus/simi/SimiProperty;>;)Lnet/globulus/simi/SimiProperty;" };
  static const J2ObjcClassInfo _SMCocoaNativeModulesManager = { "CocoaNativeModulesManager", "net.globulus.simi", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_SMCocoaNativeModulesManager;
}

@end

void SMCocoaNativeModulesManager_init(SMCocoaNativeModulesManager *self) {
    NSObject_init(self);
}

SMCocoaNativeModulesManager *new_SMCocoaNativeModulesManager_init() {
  J2OBJC_NEW_IMPL(SMCocoaNativeModulesManager, init)
}

SMCocoaNativeModulesManager *create_SMCocoaNativeModulesManager_init() {
  J2OBJC_CREATE_IMPL(SMCocoaNativeModulesManager, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMCocoaNativeModulesManager)
