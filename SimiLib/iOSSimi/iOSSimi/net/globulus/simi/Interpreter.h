//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Interpreter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiInterpreter")
#ifdef RESTRICT_NetGlobulusSimiInterpreter
#define INCLUDE_ALL_NetGlobulusSimiInterpreter 0
#else
#define INCLUDE_ALL_NetGlobulusSimiInterpreter 1
#endif
#undef RESTRICT_NetGlobulusSimiInterpreter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMInterpreter_) && (INCLUDE_ALL_NetGlobulusSimiInterpreter || defined(INCLUDE_SMInterpreter))
#define SMInterpreter_

#define RESTRICT_NetGlobulusSimiBlockInterpreter 1
#define INCLUDE_SMBlockInterpreter 1
#include "BlockInterpreter.h"

#define RESTRICT_NetGlobulusSimiExpr 1
#define INCLUDE_SMExpr_Visitor 1
#include "Expr.h"

#define RESTRICT_NetGlobulusSimiStmt 1
#define INCLUDE_SMStmt_Visitor 1
#include "Stmt.h"

@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilLinkedHashMap;
@class SMExpr;
@class SMExpr_Annotations;
@class SMExpr_Assign;
@class SMExpr_Binary;
@class SMExpr_Block;
@class SMExpr_Call;
@class SMExpr_Get;
@class SMExpr_Grouping;
@class SMExpr_Gu;
@class SMExpr_Ivic;
@class SMExpr_Literal;
@class SMExpr_Logical;
@class SMExpr_ObjectLiteral;
@class SMExpr_Self;
@class SMExpr_Set;
@class SMExpr_Super;
@class SMExpr_Unary;
@class SMExpr_Variable;
@class SMSimiException;
@class SMSimiValue;
@class SMStmt_Annotation;
@class SMStmt_Break;
@class SMStmt_Class;
@class SMStmt_Continue;
@class SMStmt_Elsif;
@class SMStmt_Expression;
@class SMStmt_For;
@class SMStmt_Function;
@class SMStmt_If;
@class SMStmt_Import;
@class SMStmt_Print;
@class SMStmt_Rescue;
@class SMStmt_Return;
@class SMStmt_While;
@class SMStmt_Yield;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol SMSimiBlock;
@protocol SMSimiClass;
@protocol SMSimiEnvironment;
@protocol SMSimiObject;
@protocol SMSimiProperty;

@interface SMInterpreter : NSObject < SMBlockInterpreter, SMExpr_Visitor, SMStmt_Visitor > {
 @public
  id<JavaUtilCollection> nativeModulesManagers_;
}

+ (SMInterpreter *)sharedInstance;

+ (void)setSharedInstance:(SMInterpreter *)value;

#pragma mark Public

- (id<JavaUtilList>)defineTempVarsWithSMSimiPropertyArray:(IOSObjectArray *)vars;

- (void)executeBlockWithSMSimiBlock:(id<SMSimiBlock>)block
              withSMSimiEnvironment:(id<SMSimiEnvironment>)environment
                            withInt:(jint)startAt;

- (id<SMSimiEnvironment>)getEnvironment;

- (id<SMSimiProperty>)getGlobalWithNSString:(NSString *)name;

- (id<SMSimiObject>)newArrayWithBoolean:(jboolean)immutable
                  withJavaUtilArrayList:(JavaUtilArrayList *)props OBJC_METHOD_FAMILY_NONE;

- (id<SMSimiObject>)newInstanceWithSMSimiClass:(id<SMSimiClass>)clazz
                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)props OBJC_METHOD_FAMILY_NONE;

- (id<SMSimiObject>)newObjectWithBoolean:(jboolean)immutable
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)props OBJC_METHOD_FAMILY_NONE;

- (void)raiseExceptionWithSMSimiException:(SMSimiException *)e;

- (void)undefineTempVarsWithJavaUtilList:(id<JavaUtilList>)names;

- (SMSimiValue *)visitAnnotationsExprWithSMExpr_Annotations:(SMExpr_Annotations *)expr;

- (id<SMSimiProperty>)visitAnnotationStmtWithSMStmt_Annotation:(SMStmt_Annotation *)stmt;

- (id<SMSimiProperty>)visitAssignExprWithSMExpr_Assign:(SMExpr_Assign *)expr;

- (SMSimiValue *)visitBinaryExprWithSMExpr_Binary:(SMExpr_Binary *)expr;

- (SMSimiValue *)visitBlockExprWithSMExpr_Block:(SMExpr_Block *)stmt
                                    withBoolean:(jboolean)newScope
                                    withBoolean:(jboolean)execute;

- (id<SMSimiProperty>)visitBreakStmtWithSMStmt_Break:(SMStmt_Break *)stmt;

- (id<SMSimiProperty>)visitCallExprWithSMExpr_Call:(SMExpr_Call *)expr;

- (id<SMSimiProperty>)visitClassStmtWithSMStmt_Class:(SMStmt_Class *)stmt
                                         withBoolean:(jboolean)addToEnv;

- (id<SMSimiProperty>)visitContinueStmtWithSMStmt_Continue:(SMStmt_Continue *)stmt;

- (id<SMSimiProperty>)visitElsifStmtWithSMStmt_Elsif:(SMStmt_Elsif *)stmt;

- (id<SMSimiProperty>)visitExpressionStmtWithSMStmt_Expression:(SMStmt_Expression *)stmt;

- (id<SMSimiProperty>)visitForStmtWithSMStmt_For:(SMStmt_For *)stmt;

- (SMSimiValue *)visitFunctionStmtWithSMStmt_Function:(SMStmt_Function *)stmt;

- (id<SMSimiProperty>)visitGetExprWithSMExpr_Get:(SMExpr_Get *)expr;

- (id<SMSimiProperty>)visitGroupingExprWithSMExpr_Grouping:(SMExpr_Grouping *)expr;

- (id<SMSimiProperty>)visitGuExprWithSMExpr_Gu:(SMExpr_Gu *)expr;

- (id<SMSimiProperty>)visitIfStmtWithSMStmt_If:(SMStmt_If *)stmt;

- (id<SMSimiProperty>)visitImportStmtWithSMStmt_Import:(SMStmt_Import *)stmt;

- (id<SMSimiProperty>)visitIvicExprWithSMExpr_Ivic:(SMExpr_Ivic *)expr;

- (SMSimiValue *)visitLiteralExprWithSMExpr_Literal:(SMExpr_Literal *)expr;

- (id<SMSimiProperty>)visitLogicalExprWithSMExpr_Logical:(SMExpr_Logical *)expr;

- (SMSimiValue *)visitObjectLiteralExprWithSMExpr_ObjectLiteral:(SMExpr_ObjectLiteral *)expr;

- (id<SMSimiProperty>)visitPrintStmtWithSMStmt_Print:(SMStmt_Print *)stmt;

- (id<SMSimiProperty>)visitRescueStmtWithSMStmt_Rescue:(SMStmt_Rescue *)stmt;

- (id<SMSimiProperty>)visitReturnStmtWithSMStmt_Return:(SMStmt_Return *)stmt;

- (id<SMSimiProperty>)visitSelfExprWithSMExpr_Self:(SMExpr_Self *)expr;

- (id<SMSimiProperty>)visitSetExprWithSMExpr_Set:(SMExpr_Set *)expr;

- (SMSimiValue *)visitSuperExprWithSMExpr_Super:(SMExpr_Super *)expr;

- (SMSimiValue *)visitUnaryExprWithSMExpr_Unary:(SMExpr_Unary *)expr;

- (id<SMSimiProperty>)visitVariableExprWithSMExpr_Variable:(SMExpr_Variable *)expr;

- (id<SMSimiProperty>)visitWhileStmtWithSMStmt_While:(SMStmt_While *)stmt;

- (id<SMSimiProperty>)visitYieldStmtWithSMStmt_Yield:(SMStmt_Yield *)stmt;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)nativeModulesManagers;

- (id<SMSimiProperty>)interpretWithJavaUtilList:(id<JavaUtilList>)statements;

- (id<SMSimiProperty>)interpretWithJavaUtilList:(id<JavaUtilList>)statements
                                    withBoolean:(jboolean)addClassesToRootEnv;

+ (jboolean)isTruthyWithSMSimiProperty:(id<SMSimiProperty>)object;

- (void)resolveWithSMExpr:(SMExpr *)expr
                  withInt:(jint)depth;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SMInterpreter)

J2OBJC_FIELD_SETTER(SMInterpreter, nativeModulesManagers_, id<JavaUtilCollection>)

inline SMInterpreter *SMInterpreter_get_sharedInstance(void);
inline SMInterpreter *SMInterpreter_set_sharedInstance(SMInterpreter *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT SMInterpreter *SMInterpreter_sharedInstance;
J2OBJC_STATIC_FIELD_OBJ(SMInterpreter, sharedInstance, SMInterpreter *)

FOUNDATION_EXPORT void SMInterpreter_initWithJavaUtilCollection_(SMInterpreter *self, id<JavaUtilCollection> nativeModulesManagers);

FOUNDATION_EXPORT SMInterpreter *new_SMInterpreter_initWithJavaUtilCollection_(id<JavaUtilCollection> nativeModulesManagers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMInterpreter *create_SMInterpreter_initWithJavaUtilCollection_(id<JavaUtilCollection> nativeModulesManagers);

FOUNDATION_EXPORT jboolean SMInterpreter_isTruthyWithSMSimiProperty_(id<SMSimiProperty> object);

J2OBJC_TYPE_LITERAL_HEADER(SMInterpreter)

@compatibility_alias NetGlobulusSimiInterpreter SMInterpreter;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiInterpreter")
