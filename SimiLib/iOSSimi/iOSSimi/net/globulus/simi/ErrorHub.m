//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/ErrorHub.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "BlockInterpreter.h"
#include "ErrorHub.h"
#include "ErrorWatcher.h"
#include "RuntimeError.h"
#include "SimiClass.h"
#include "SimiEnvironment.h"
#include "SimiException.h"
#include "SimiObject.h"
#include "SimiProperty.h"
#include "SimiValue.h"
#include "Token.h"
#include "TokenType.h"

@interface SMErrorHub () {
 @public
  id<JavaUtilList> watchers_;
  id<SMBlockInterpreter> interpreter_;
}

- (instancetype __nonnull)init;

- (void)reportWithNSString:(NSString *)exceptionClass
              withNSString:(NSString *)file
                   withInt:(jint)line
              withNSString:(NSString *)where
              withNSString:(NSString *)message;

@end

J2OBJC_FIELD_SETTER(SMErrorHub, watchers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(SMErrorHub, interpreter_, id<SMBlockInterpreter>)

inline SMErrorHub *SMErrorHub_get_instance(void);
static SMErrorHub *SMErrorHub_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMErrorHub, instance, SMErrorHub *)

__attribute__((unused)) static void SMErrorHub_init(SMErrorHub *self);

__attribute__((unused)) static SMErrorHub *new_SMErrorHub_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SMErrorHub *create_SMErrorHub_init(void);

__attribute__((unused)) static void SMErrorHub_reportWithNSString_withNSString_withInt_withNSString_withNSString_(SMErrorHub *self, NSString *exceptionClass, NSString *file, jint line, NSString *where, NSString *message);

J2OBJC_INITIALIZED_DEFN(SMErrorHub)

@implementation SMErrorHub

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  SMErrorHub_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (SMErrorHub *)sharedInstance {
  return SMErrorHub_sharedInstance();
}

- (void)setInterpreterWithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter {
  self->interpreter_ = interpreter;
}

- (void)errorWithNSString:(NSString *)exceptionClass
             withNSString:(NSString *)file
                  withInt:(jint)line
             withNSString:(NSString *)message {
  SMErrorHub_reportWithNSString_withNSString_withInt_withNSString_withNSString_(self, exceptionClass, file, line, @"", message);
}

- (void)errorWithNSString:(NSString *)exceptionClass
              withSMToken:(SMToken *)token
             withNSString:(NSString *)message {
  if (((SMToken *) nil_chk(token))->type_ == JreLoadEnum(SMTokenType, EOF)) {
    SMErrorHub_reportWithNSString_withNSString_withInt_withNSString_withNSString_(self, exceptionClass, token->file_, token->line_, @" at end", message);
  }
  else {
    SMErrorHub_reportWithNSString_withNSString_withInt_withNSString_withNSString_(self, exceptionClass, token->file_, token->line_, JreStrcat("$$C", @" at '", token->lexeme_, '\''), message);
  }
}

- (void)reportWithNSString:(NSString *)exceptionClass
              withNSString:(NSString *)file
                   withInt:(jint)line
              withNSString:(NSString *)where
              withNSString:(NSString *)message {
  SMErrorHub_reportWithNSString_withNSString_withInt_withNSString_withNSString_(self, exceptionClass, file, line, where, message);
}

- (void)runtimeErrorWithSMRuntimeError:(SMRuntimeError *)error {
  for (id<SMErrorWatcher> __strong watcher in nil_chk(watchers_)) {
    [((id<SMErrorWatcher>) nil_chk(watcher)) runtimeErrorWithSMRuntimeError:error];
  }
}

- (void)addWatcherWithSMErrorWatcher:(id<SMErrorWatcher>)watcher {
  [((id<JavaUtilList>) nil_chk(watchers_)) addWithId:watcher];
}

- (void)removeWatcherWithSMErrorWatcher:(id<SMErrorWatcher>)watcher {
  [((id<JavaUtilList>) nil_chk(watchers_)) removeWithId:watcher];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSMErrorHub;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sharedInstance);
  methods[2].selector = @selector(setInterpreterWithSMBlockInterpreter:);
  methods[3].selector = @selector(errorWithNSString:withNSString:withInt:withNSString:);
  methods[4].selector = @selector(errorWithNSString:withSMToken:withNSString:);
  methods[5].selector = @selector(reportWithNSString:withNSString:withInt:withNSString:withNSString:);
  methods[6].selector = @selector(runtimeErrorWithSMRuntimeError:);
  methods[7].selector = @selector(addWatcherWithSMErrorWatcher:);
  methods[8].selector = @selector(removeWatcherWithSMErrorWatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "watchers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
    { "interpreter_", "LSMBlockInterpreter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "instance", "LSMErrorHub;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "setInterpreter", "LSMBlockInterpreter;", "error", "LNSString;LNSString;ILNSString;", "LNSString;LSMToken;LNSString;", "report", "LNSString;LNSString;ILNSString;LNSString;", "runtimeError", "LSMRuntimeError;", "addWatcher", "LSMErrorWatcher;", "removeWatcher", "Ljava/util/List<LErrorWatcher;>;", &SMErrorHub_instance };
  static const J2ObjcClassInfo _SMErrorHub = { "ErrorHub", "net.globulus.simi", ptrTable, methods, fields, 7, 0x0, 9, 3, -1, -1, -1, -1, -1 };
  return &_SMErrorHub;
}

+ (void)initialize {
  if (self == [SMErrorHub class]) {
    SMErrorHub_instance = new_SMErrorHub_init();
    J2OBJC_SET_INITIALIZED(SMErrorHub)
  }
}

@end

void SMErrorHub_init(SMErrorHub *self) {
  NSObject_init(self);
  self->watchers_ = new_JavaUtilArrayList_init();
}

SMErrorHub *new_SMErrorHub_init() {
  J2OBJC_NEW_IMPL(SMErrorHub, init)
}

SMErrorHub *create_SMErrorHub_init() {
  J2OBJC_CREATE_IMPL(SMErrorHub, init)
}

SMErrorHub *SMErrorHub_sharedInstance() {
  SMErrorHub_initialize();
  return SMErrorHub_instance;
}

void SMErrorHub_reportWithNSString_withNSString_withInt_withNSString_withNSString_(SMErrorHub *self, NSString *exceptionClass, NSString *file, jint line, NSString *where, NSString *message) {
  if (self->interpreter_ != nil) {
    NSString *exceptionMessage = JreStrcat("$$$I$$$$", @"[\"", file, @"\" line ", line, @"] Error", where, @": ", message);
    id<SMSimiProperty> exceptionClassProp = [((id<SMSimiEnvironment>) nil_chk([self->interpreter_ getEnvironment])) tryGetWithNSString:exceptionClass];
    if (exceptionClassProp != nil) {
      [((id<SMBlockInterpreter>) nil_chk(self->interpreter_)) raiseExceptionWithSMSimiException:new_SMSimiException_initWithSMSimiClass_withNSString_((id<SMSimiClass>) cast_check([((SMSimiValue *) nil_chk([exceptionClassProp getValue])) getObject], SMSimiClass_class_()), exceptionMessage)];
      return;
    }
  }
  for (id<SMErrorWatcher> __strong watcher in nil_chk(self->watchers_)) {
    [((id<SMErrorWatcher>) nil_chk(watcher)) reportWithNSString:file withInt:line withNSString:where withNSString:message];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SMErrorHub)
