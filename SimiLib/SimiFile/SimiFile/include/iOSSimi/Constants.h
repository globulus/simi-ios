//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/Constants.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiConstants")
#ifdef RESTRICT_NetGlobulusSimiConstants
#define INCLUDE_ALL_NetGlobulusSimiConstants 0
#else
#define INCLUDE_ALL_NetGlobulusSimiConstants 1
#endif
#undef RESTRICT_NetGlobulusSimiConstants

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMConstants_) && (INCLUDE_ALL_NetGlobulusSimiConstants || defined(INCLUDE_SMConstants))
#define SMConstants_

@interface SMConstants : NSObject

+ (NSString *)PRIVATE;

+ (NSString *)IMPLICIT;

+ (NSString *)INIT;

+ (NSString *)SELF;

+ (NSString *)SELF_DEF;

+ (NSString *)SUPER;

+ (NSString *)KEY;

+ (NSString *)VALUE;

+ (NSString *)SET;

+ (NSString *)ITERATE;

+ (NSString *)NEXT;

+ (NSString *)HAS;

+ (NSString *)EQUALS;

+ (NSString *)COMPARE_TO;

+ (NSString *)TO_STRING;

+ (NSString *)RAISE;

+ (NSString *)CLASS_OBJECT;

+ (NSString *)CLASS_FUNCTION;

+ (NSString *)CLASS_STRING;

+ (NSString *)CLASS_NUMBER;

+ (NSString *)CLASS_CLASS;

+ (NSString *)CLASS_EXCEPTION;

+ (NSString *)GLOBALS_CLASS_NAME;

+ (NSString *)CLASS_GLOBALS;

+ (NSString *)PACKAGE_SIMI_API;

+ (NSString *)API_CLASS_NAME;

+ (NSString *)EXCEPTION_NUMBER_FORMAT;

+ (NSString *)EXCEPTION_NIL_REFERENCE;

+ (NSString *)EXCEPTION_TYPE_MISMATCH;

@end

J2OBJC_EMPTY_STATIC_INIT(SMConstants)

inline NSString *SMConstants_get_PRIVATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_PRIVATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, PRIVATE, NSString *)

inline NSString *SMConstants_get_IMPLICIT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_IMPLICIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, IMPLICIT, NSString *)

inline NSString *SMConstants_get_INIT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_INIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, INIT, NSString *)

inline NSString *SMConstants_get_SELF(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_SELF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, SELF, NSString *)

inline NSString *SMConstants_get_SELF_DEF(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_SELF_DEF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, SELF_DEF, NSString *)

inline NSString *SMConstants_get_SUPER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_SUPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, SUPER, NSString *)

inline NSString *SMConstants_get_KEY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, KEY, NSString *)

inline NSString *SMConstants_get_VALUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, VALUE, NSString *)

inline NSString *SMConstants_get_SET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, SET, NSString *)

inline NSString *SMConstants_get_ITERATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_ITERATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, ITERATE, NSString *)

inline NSString *SMConstants_get_NEXT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_NEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, NEXT, NSString *)

inline NSString *SMConstants_get_HAS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_HAS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, HAS, NSString *)

inline NSString *SMConstants_get_EQUALS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_EQUALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, EQUALS, NSString *)

inline NSString *SMConstants_get_COMPARE_TO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_COMPARE_TO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, COMPARE_TO, NSString *)

inline NSString *SMConstants_get_TO_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_TO_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, TO_STRING, NSString *)

inline NSString *SMConstants_get_RAISE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_RAISE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, RAISE, NSString *)

inline NSString *SMConstants_get_CLASS_OBJECT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_CLASS_OBJECT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, CLASS_OBJECT, NSString *)

inline NSString *SMConstants_get_CLASS_FUNCTION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_CLASS_FUNCTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, CLASS_FUNCTION, NSString *)

inline NSString *SMConstants_get_CLASS_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_CLASS_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, CLASS_STRING, NSString *)

inline NSString *SMConstants_get_CLASS_NUMBER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_CLASS_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, CLASS_NUMBER, NSString *)

inline NSString *SMConstants_get_CLASS_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_CLASS_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, CLASS_CLASS, NSString *)

inline NSString *SMConstants_get_CLASS_EXCEPTION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_CLASS_EXCEPTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, CLASS_EXCEPTION, NSString *)

inline NSString *SMConstants_get_GLOBALS_CLASS_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_GLOBALS_CLASS_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, GLOBALS_CLASS_NAME, NSString *)

inline NSString *SMConstants_get_CLASS_GLOBALS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_CLASS_GLOBALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, CLASS_GLOBALS, NSString *)

inline NSString *SMConstants_get_PACKAGE_SIMI_API(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_PACKAGE_SIMI_API;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, PACKAGE_SIMI_API, NSString *)

inline NSString *SMConstants_get_API_CLASS_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_API_CLASS_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, API_CLASS_NAME, NSString *)

inline NSString *SMConstants_get_EXCEPTION_NUMBER_FORMAT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_EXCEPTION_NUMBER_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, EXCEPTION_NUMBER_FORMAT, NSString *)

inline NSString *SMConstants_get_EXCEPTION_NIL_REFERENCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_EXCEPTION_NIL_REFERENCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, EXCEPTION_NIL_REFERENCE, NSString *)

inline NSString *SMConstants_get_EXCEPTION_TYPE_MISMATCH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SMConstants_EXCEPTION_TYPE_MISMATCH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SMConstants, EXCEPTION_TYPE_MISMATCH, NSString *)

J2OBJC_TYPE_LITERAL_HEADER(SMConstants)

@compatibility_alias NetGlobulusSimiConstants SMConstants;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiConstants")
