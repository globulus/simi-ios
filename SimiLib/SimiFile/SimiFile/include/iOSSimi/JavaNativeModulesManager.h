//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/JavaNativeModulesManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiJavaNativeModulesManager")
#ifdef RESTRICT_NetGlobulusSimiJavaNativeModulesManager
#define INCLUDE_ALL_NetGlobulusSimiJavaNativeModulesManager 0
#else
#define INCLUDE_ALL_NetGlobulusSimiJavaNativeModulesManager 1
#endif
#undef RESTRICT_NetGlobulusSimiJavaNativeModulesManager

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMJavaNativeModulesManager_) && (INCLUDE_ALL_NetGlobulusSimiJavaNativeModulesManager || defined(INCLUDE_SMJavaNativeModulesManager))
#define SMJavaNativeModulesManager_

#define RESTRICT_NetGlobulusSimiNativeModulesManager 1
#define INCLUDE_SMNativeModulesManager 1
#include "NativeModulesManager.h"

@class SMInterpreter;
@protocol JavaUtilList;
@protocol SMSimiObject;
@protocol SMSimiProperty;

@interface SMJavaNativeModulesManager : NSObject < SMNativeModulesManager >

#pragma mark Public

- (instancetype __nonnull)init;

- (id<SMSimiProperty>)callWithNSString:(NSString *)className_
                          withNSString:(NSString *)methodName
                      withSMSimiObject:(id<SMSimiObject>)self_
                     withSMInterpreter:(SMInterpreter *)interpreter
                      withJavaUtilList:(id<JavaUtilList>)args;

- (void)load__WithNSString:(NSString *)path
               withBoolean:(jboolean)useApiClassName;

- (void)load__WithNSString:(NSString *)path
               withBoolean:(jboolean)useApiClassName
               withBoolean:(jboolean)useCustomLoader;

@end

J2OBJC_EMPTY_STATIC_INIT(SMJavaNativeModulesManager)

FOUNDATION_EXPORT void SMJavaNativeModulesManager_init(SMJavaNativeModulesManager *self);

FOUNDATION_EXPORT SMJavaNativeModulesManager *new_SMJavaNativeModulesManager_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMJavaNativeModulesManager *create_SMJavaNativeModulesManager_init(void);

J2OBJC_TYPE_LITERAL_HEADER(SMJavaNativeModulesManager)

@compatibility_alias NetGlobulusSimiJavaNativeModulesManager SMJavaNativeModulesManager;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiJavaNativeModulesManager")
