//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/BlockImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetGlobulusSimiBlockImpl")
#ifdef RESTRICT_NetGlobulusSimiBlockImpl
#define INCLUDE_ALL_NetGlobulusSimiBlockImpl 0
#else
#define INCLUDE_ALL_NetGlobulusSimiBlockImpl 1
#endif
#undef RESTRICT_NetGlobulusSimiBlockImpl

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (SMBlockImpl_) && (INCLUDE_ALL_NetGlobulusSimiBlockImpl || defined(INCLUDE_SMBlockImpl))
#define SMBlockImpl_

#define RESTRICT_NetGlobulusSimiSimiBlock 1
#define INCLUDE_SMSimiBlock 1
#include "SimiBlock.h"

#define RESTRICT_NetGlobulusSimiSimiCallable 1
#define INCLUDE_SMSimiCallable 1
#include "SimiCallable.h"

@class SMEnvironment;
@class SMExpr;
@class SMExpr_Block;
@class SMSimiObjectImpl;
@protocol JavaUtilList;
@protocol SMBlockInterpreter;
@protocol SMSimiEnvironment;
@protocol SMSimiProperty;

@interface SMBlockImpl : NSObject < SMSimiBlock, SMSimiCallable > {
 @public
  SMExpr_Block *declaration_;
  SMEnvironment *closure_;
}

#pragma mark Public

- (jint)arity;

- (id<SMSimiProperty>)callWithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter
                           withSMSimiEnvironment:(id<SMSimiEnvironment>)environment
                                withJavaUtilList:(id<JavaUtilList>)arguments
                                     withBoolean:(jboolean)rethrow;

- (jboolean)canReturn;

+ (NSString *)getParamLexemeWithSMExpr:(SMExpr *)param;

- (id<JavaUtilList>)getStatements;

- (NSString *)toCodeWithInt:(jint)indentationLevel
                withBoolean:(jboolean)ignoreFirst;

- (NSString *)description;

- (void)yieldWithInt:(jint)index;

#pragma mark Package-Private

- (instancetype __nonnull)initWithSMExpr_Block:(SMExpr_Block *)declaration
                             withSMEnvironment:(SMEnvironment *)closure;

- (SMBlockImpl *)bindWithSMSimiObjectImpl:(SMSimiObjectImpl *)instance;

- (id<SMSimiProperty>)callWithSMBlockInterpreter:(id<SMBlockInterpreter>)interpreter
                           withSMSimiEnvironment:(id<SMSimiEnvironment>)environment
                                withJavaUtilList:(id<JavaUtilList>)arguments
                                     withBoolean:(jboolean)rethrow
                              withSMSimiCallable:(id<SMSimiCallable>)invoker;

- (jboolean)isNative;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SMBlockImpl)

J2OBJC_FIELD_SETTER(SMBlockImpl, declaration_, SMExpr_Block *)
J2OBJC_FIELD_SETTER(SMBlockImpl, closure_, SMEnvironment *)

FOUNDATION_EXPORT void SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_(SMBlockImpl *self, SMExpr_Block *declaration, SMEnvironment *closure);

FOUNDATION_EXPORT SMBlockImpl *new_SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_(SMExpr_Block *declaration, SMEnvironment *closure) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SMBlockImpl *create_SMBlockImpl_initWithSMExpr_Block_withSMEnvironment_(SMExpr_Block *declaration, SMEnvironment *closure);

FOUNDATION_EXPORT NSString *SMBlockImpl_getParamLexemeWithSMExpr_(SMExpr *param);

J2OBJC_TYPE_LITERAL_HEADER(SMBlockImpl)

@compatibility_alias NetGlobulusSimiBlockImpl SMBlockImpl;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetGlobulusSimiBlockImpl")
